;;; this file is automatically generated, do not edit
#||
Copyright 2015-2021 The Khronos Group Inc.

SPDX-License-Identifier: Apache-2.0 OR MIT
||#

(in-package :vulkan)

(defvkfun ("vkCreateInstance" create-instance) checked-result
  (p-create-info (:pointer (:struct instance-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-instance (:pointer instance)))

(defvkfun ("vkDestroyInstance" destroy-instance) :void
  (instance instance)
  (p-allocator (:pointer (:struct allocation-callbacks))))

(defvkfun ("vkEnumeratePhysicalDevices" enumerate-physical-devices) checked-result
  (instance instance)
  (p-physical-device-count (:pointer :uint32))
  (p-physical-devices (:pointer physical-device)))

(defvkfun ("vkGetDeviceProcAddr" get-device-proc-addr) pfn-void-function
  (device device)
  (p-name :string))

(defvkfun ("vkGetInstanceProcAddr" get-instance-proc-addr) pfn-void-function
  (instance instance)
  (p-name :string))

(defvkfun ("vkGetPhysicalDeviceProperties" get-physical-device-properties) :void
  (physical-device physical-device)
  (p-properties (:pointer (:struct physical-device-properties))))

(defvkfun ("vkGetPhysicalDeviceQueueFamilyProperties" get-physical-device-queue-family-properties) :void
  (physical-device physical-device)
  (p-queue-family-property-count (:pointer :uint32))
  (p-queue-family-properties (:pointer (:struct queue-family-properties))))

(defvkfun ("vkGetPhysicalDeviceMemoryProperties" get-physical-device-memory-properties) :void
  (physical-device physical-device)
  (p-memory-properties (:pointer (:struct physical-device-memory-properties))))

(defvkfun ("vkGetPhysicalDeviceFeatures" get-physical-device-features) :void
  (physical-device physical-device)
  (p-features (:pointer (:struct physical-device-features))))

(defvkfun ("vkGetPhysicalDeviceFormatProperties" get-physical-device-format-properties) :void
  (physical-device physical-device)
  (format format)
  (p-format-properties (:pointer (:struct format-properties))))

(defvkfun ("vkGetPhysicalDeviceImageFormatProperties" get-physical-device-image-format-properties) checked-result
  (physical-device physical-device)
  (format format)
  (type image-type)
  (tiling image-tiling)
  (usage image-usage-flags)
  (flags image-create-flags)
  (p-image-format-properties (:pointer (:struct image-format-properties))))

(defvkfun ("vkCreateDevice" create-device) checked-result
  (physical-device physical-device)
  (p-create-info (:pointer (:struct device-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-device (:pointer device)))

(defvkfun ("vkDestroyDevice" destroy-device) :void
  (device device)
  (p-allocator (:pointer (:struct allocation-callbacks))))

(defvkfun ("vkEnumerateInstanceVersion" enumerate-instance-version) checked-result
  (p-api-version (:pointer :uint32)))

(defvkfun ("vkEnumerateInstanceLayerProperties" enumerate-instance-layer-properties) checked-result
  (p-property-count (:pointer :uint32))
  (p-properties (:pointer (:struct layer-properties))))

(defvkfun ("vkEnumerateInstanceExtensionProperties" enumerate-instance-extension-properties) checked-result
  (p-layer-name :string)
  (p-property-count (:pointer :uint32))
  (p-properties (:pointer (:struct extension-properties))))

(defvkfun ("vkEnumerateDeviceLayerProperties" enumerate-device-layer-properties) checked-result
  (physical-device physical-device)
  (p-property-count (:pointer :uint32))
  (p-properties (:pointer (:struct layer-properties))))

(defvkfun ("vkEnumerateDeviceExtensionProperties" enumerate-device-extension-properties) checked-result
  (physical-device physical-device)
  (p-layer-name :string)
  (p-property-count (:pointer :uint32))
  (p-properties (:pointer (:struct extension-properties))))

(defvkfun ("vkGetDeviceQueue" get-device-queue) :void
  (device device)
  (queue-family-index :uint32)
  (queue-index :uint32)
  (p-queue (:pointer queue)))

(defvkfun ("vkQueueSubmit" queue-submit) checked-result
  (queue queue)
  (submit-count :uint32)
  (p-submits (:pointer (:struct submit-info)))
  (fence fence))

(defvkfun ("vkQueueWaitIdle" queue-wait-idle) checked-result
  (queue queue))

(defvkfun ("vkDeviceWaitIdle" device-wait-idle) checked-result
  (device device))

(defvkfun ("vkAllocateMemory" allocate-memory) checked-result
  (device device)
  (p-allocate-info (:pointer (:struct memory-allocate-info)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-memory (:pointer device-memory)))

(defvkfun ("vkFreeMemory" free-memory) :void
  (device device)
  (memory device-memory)
  (p-allocator (:pointer (:struct allocation-callbacks))))

(defvkfun ("vkMapMemory" map-memory) checked-result
  (device device)
  (memory device-memory)
  (offset device-size)
  (size device-size)
  (flags memory-map-flags)
  (pp-data (:pointer (:pointer :void))))

(defvkfun ("vkUnmapMemory" unmap-memory) :void
  (device device)
  (memory device-memory))

(defvkfun ("vkFlushMappedMemoryRanges" flush-mapped-memory-ranges) checked-result
  (device device)
  (memory-range-count :uint32)
  (p-memory-ranges (:pointer (:struct mapped-memory-range))))

(defvkfun ("vkInvalidateMappedMemoryRanges" invalidate-mapped-memory-ranges) checked-result
  (device device)
  (memory-range-count :uint32)
  (p-memory-ranges (:pointer (:struct mapped-memory-range))))

(defvkfun ("vkGetDeviceMemoryCommitment" get-device-memory-commitment) :void
  (device device)
  (memory device-memory)
  (p-committed-memory-in-bytes (:pointer device-size)))

(defvkfun ("vkGetBufferMemoryRequirements" get-buffer-memory-requirements) :void
  (device device)
  (buffer buffer)
  (p-memory-requirements (:pointer (:struct memory-requirements))))

(defvkfun ("vkBindBufferMemory" bind-buffer-memory) checked-result
  (device device)
  (buffer buffer)
  (memory device-memory)
  (memory-offset device-size))

(defvkfun ("vkGetImageMemoryRequirements" get-image-memory-requirements) :void
  (device device)
  (image image)
  (p-memory-requirements (:pointer (:struct memory-requirements))))

(defvkfun ("vkBindImageMemory" bind-image-memory) checked-result
  (device device)
  (image image)
  (memory device-memory)
  (memory-offset device-size))

(defvkfun ("vkGetImageSparseMemoryRequirements" get-image-sparse-memory-requirements) :void
  (device device)
  (image image)
  (p-sparse-memory-requirement-count (:pointer :uint32))
  (p-sparse-memory-requirements (:pointer (:struct sparse-image-memory-requirements))))

(defvkfun ("vkGetPhysicalDeviceSparseImageFormatProperties" get-physical-device-sparse-image-format-properties) :void
  (physical-device physical-device)
  (format format)
  (type image-type)
  (samples sample-count-flag-bits)
  (usage image-usage-flags)
  (tiling image-tiling)
  (p-property-count (:pointer :uint32))
  (p-properties (:pointer (:struct sparse-image-format-properties))))

(defvkfun ("vkQueueBindSparse" queue-bind-sparse) checked-result
  (queue queue)
  (bind-info-count :uint32)
  (p-bind-info (:pointer (:struct bind-sparse-info)))
  (fence fence))

(defvkfun ("vkCreateFence" create-fence) checked-result
  (device device)
  (p-create-info (:pointer (:struct fence-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-fence (:pointer fence)))

(defvkfun ("vkDestroyFence" destroy-fence) :void
  (device device)
  (fence fence)
  (p-allocator (:pointer (:struct allocation-callbacks))))

(defvkfun ("vkResetFences" reset-fences) checked-result
  (device device)
  (fence-count :uint32)
  (p-fences (:pointer fence)))

(defvkfun ("vkGetFenceStatus" get-fence-status) checked-result
  (device device)
  (fence fence))

(defvkfun ("vkWaitForFences" wait-for-fences) checked-result
  (device device)
  (fence-count :uint32)
  (p-fences (:pointer fence))
  (wait-all bool32)
  (timeout :uint64))

(defvkfun ("vkCreateSemaphore" create-semaphore) checked-result
  (device device)
  (p-create-info (:pointer (:struct semaphore-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-semaphore (:pointer semaphore)))

(defvkfun ("vkDestroySemaphore" destroy-semaphore) :void
  (device device)
  (semaphore semaphore)
  (p-allocator (:pointer (:struct allocation-callbacks))))

(defvkfun ("vkCreateEvent" create-event) checked-result
  (device device)
  (p-create-info (:pointer (:struct event-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-event (:pointer event)))

(defvkfun ("vkDestroyEvent" destroy-event) :void
  (device device)
  (event event)
  (p-allocator (:pointer (:struct allocation-callbacks))))

(defvkfun ("vkGetEventStatus" get-event-status) checked-result
  (device device)
  (event event))

(defvkfun ("vkSetEvent" set-event) checked-result
  (device device)
  (event event))

(defvkfun ("vkResetEvent" reset-event) checked-result
  (device device)
  (event event))

(defvkfun ("vkCreateQueryPool" create-query-pool) checked-result
  (device device)
  (p-create-info (:pointer (:struct query-pool-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-query-pool (:pointer query-pool)))

(defvkfun ("vkDestroyQueryPool" destroy-query-pool) :void
  (device device)
  (query-pool query-pool)
  (p-allocator (:pointer (:struct allocation-callbacks))))

(defvkfun ("vkGetQueryPoolResults" get-query-pool-results) checked-result
  (device device)
  (query-pool query-pool)
  (first-query :uint32)
  (query-count :uint32)
  (data-size :size)
  (p-data (:pointer :void))
  (stride device-size)
  (flags query-result-flags))

(defvkfun ("vkResetQueryPool" reset-query-pool) :void
  (device device)
  (query-pool query-pool)
  (first-query :uint32)
  (query-count :uint32))

(defvkfun ("vkResetQueryPoolEXT" reset-query-pool-ext) :void
  (device device)
  (query-pool query-pool)
  (first-query :uint32)
  (query-count :uint32))

(defvkfun ("vkCreateBuffer" create-buffer) checked-result
  (device device)
  (p-create-info (:pointer (:struct buffer-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-buffer (:pointer buffer)))

(defvkfun ("vkDestroyBuffer" destroy-buffer) :void
  (device device)
  (buffer buffer)
  (p-allocator (:pointer (:struct allocation-callbacks))))

(defvkfun ("vkCreateBufferView" create-buffer-view) checked-result
  (device device)
  (p-create-info (:pointer (:struct buffer-view-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-view (:pointer buffer-view)))

(defvkfun ("vkDestroyBufferView" destroy-buffer-view) :void
  (device device)
  (buffer-view buffer-view)
  (p-allocator (:pointer (:struct allocation-callbacks))))

(defvkfun ("vkCreateImage" create-image) checked-result
  (device device)
  (p-create-info (:pointer (:struct image-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-image (:pointer image)))

(defvkfun ("vkDestroyImage" destroy-image) :void
  (device device)
  (image image)
  (p-allocator (:pointer (:struct allocation-callbacks))))

(defvkfun ("vkGetImageSubresourceLayout" get-image-subresource-layout) :void
  (device device)
  (image image)
  (p-subresource (:pointer (:struct image-subresource)))
  (p-layout (:pointer (:struct subresource-layout))))

(defvkfun ("vkCreateImageView" create-image-view) checked-result
  (device device)
  (p-create-info (:pointer (:struct image-view-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-view (:pointer image-view)))

(defvkfun ("vkDestroyImageView" destroy-image-view) :void
  (device device)
  (image-view image-view)
  (p-allocator (:pointer (:struct allocation-callbacks))))

(defvkfun ("vkCreateShaderModule" create-shader-module) checked-result
  (device device)
  (p-create-info (:pointer (:struct shader-module-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-shader-module (:pointer shader-module)))

(defvkfun ("vkDestroyShaderModule" destroy-shader-module) :void
  (device device)
  (shader-module shader-module)
  (p-allocator (:pointer (:struct allocation-callbacks))))

(defvkfun ("vkCreatePipelineCache" create-pipeline-cache) checked-result
  (device device)
  (p-create-info (:pointer (:struct pipeline-cache-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-pipeline-cache (:pointer pipeline-cache)))

(defvkfun ("vkDestroyPipelineCache" destroy-pipeline-cache) :void
  (device device)
  (pipeline-cache pipeline-cache)
  (p-allocator (:pointer (:struct allocation-callbacks))))

(defvkfun ("vkGetPipelineCacheData" get-pipeline-cache-data) checked-result
  (device device)
  (pipeline-cache pipeline-cache)
  (p-data-size (:pointer :size))
  (p-data (:pointer :void)))

(defvkfun ("vkMergePipelineCaches" merge-pipeline-caches) checked-result
  (device device)
  (dst-cache pipeline-cache)
  (src-cache-count :uint32)
  (p-src-caches (:pointer pipeline-cache)))

(defvkfun ("vkCreateGraphicsPipelines" create-graphics-pipelines) checked-result
  (device device)
  (pipeline-cache pipeline-cache)
  (create-info-count :uint32)
  (p-create-infos (:pointer (:struct graphics-pipeline-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-pipelines (:pointer pipeline)))

(defvkfun ("vkCreateComputePipelines" create-compute-pipelines) checked-result
  (device device)
  (pipeline-cache pipeline-cache)
  (create-info-count :uint32)
  (p-create-infos (:pointer (:struct compute-pipeline-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-pipelines (:pointer pipeline)))

(defvkextfun ("vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI" get-device-subpass-shading-max-workgroup-size-huawei) checked-result
  (device device)
  (renderpass render-pass)
  (p-max-workgroup-size (:pointer (:struct extent-2d))))

(defvkfun ("vkDestroyPipeline" destroy-pipeline) :void
  (device device)
  (pipeline pipeline)
  (p-allocator (:pointer (:struct allocation-callbacks))))

(defvkfun ("vkCreatePipelineLayout" create-pipeline-layout) checked-result
  (device device)
  (p-create-info (:pointer (:struct pipeline-layout-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-pipeline-layout (:pointer pipeline-layout)))

(defvkfun ("vkDestroyPipelineLayout" destroy-pipeline-layout) :void
  (device device)
  (pipeline-layout pipeline-layout)
  (p-allocator (:pointer (:struct allocation-callbacks))))

(defvkfun ("vkCreateSampler" create-sampler) checked-result
  (device device)
  (p-create-info (:pointer (:struct sampler-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-sampler (:pointer sampler)))

(defvkfun ("vkDestroySampler" destroy-sampler) :void
  (device device)
  (sampler sampler)
  (p-allocator (:pointer (:struct allocation-callbacks))))

(defvkfun ("vkCreateDescriptorSetLayout" create-descriptor-set-layout) checked-result
  (device device)
  (p-create-info (:pointer (:struct descriptor-set-layout-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-set-layout (:pointer descriptor-set-layout)))

(defvkfun ("vkDestroyDescriptorSetLayout" destroy-descriptor-set-layout) :void
  (device device)
  (descriptor-set-layout descriptor-set-layout)
  (p-allocator (:pointer (:struct allocation-callbacks))))

(defvkfun ("vkCreateDescriptorPool" create-descriptor-pool) checked-result
  (device device)
  (p-create-info (:pointer (:struct descriptor-pool-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-descriptor-pool (:pointer descriptor-pool)))

(defvkfun ("vkDestroyDescriptorPool" destroy-descriptor-pool) :void
  (device device)
  (descriptor-pool descriptor-pool)
  (p-allocator (:pointer (:struct allocation-callbacks))))

(defvkfun ("vkResetDescriptorPool" reset-descriptor-pool) checked-result
  (device device)
  (descriptor-pool descriptor-pool)
  (flags descriptor-pool-reset-flags))

(defvkfun ("vkAllocateDescriptorSets" allocate-descriptor-sets) checked-result
  (device device)
  (p-allocate-info (:pointer (:struct descriptor-set-allocate-info)))
  (p-descriptor-sets (:pointer descriptor-set)))

(defvkfun ("vkFreeDescriptorSets" free-descriptor-sets) checked-result
  (device device)
  (descriptor-pool descriptor-pool)
  (descriptor-set-count :uint32)
  (p-descriptor-sets (:pointer descriptor-set)))

(defvkfun ("vkUpdateDescriptorSets" update-descriptor-sets) :void
  (device device)
  (descriptor-write-count :uint32)
  (p-descriptor-writes (:pointer (:struct write-descriptor-set)))
  (descriptor-copy-count :uint32)
  (p-descriptor-copies (:pointer (:struct copy-descriptor-set))))

(defvkfun ("vkCreateFramebuffer" create-framebuffer) checked-result
  (device device)
  (p-create-info (:pointer (:struct framebuffer-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-framebuffer (:pointer framebuffer)))

(defvkfun ("vkDestroyFramebuffer" destroy-framebuffer) :void
  (device device)
  (framebuffer framebuffer)
  (p-allocator (:pointer (:struct allocation-callbacks))))

(defvkfun ("vkCreateRenderPass" create-render-pass) checked-result
  (device device)
  (p-create-info (:pointer (:struct render-pass-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-render-pass (:pointer render-pass)))

(defvkfun ("vkDestroyRenderPass" destroy-render-pass) :void
  (device device)
  (render-pass render-pass)
  (p-allocator (:pointer (:struct allocation-callbacks))))

(defvkfun ("vkGetRenderAreaGranularity" get-render-area-granularity) :void
  (device device)
  (render-pass render-pass)
  (p-granularity (:pointer (:struct extent-2d))))

(defvkfun ("vkCreateCommandPool" create-command-pool) checked-result
  (device device)
  (p-create-info (:pointer (:struct command-pool-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-command-pool (:pointer command-pool)))

(defvkfun ("vkDestroyCommandPool" destroy-command-pool) :void
  (device device)
  (command-pool command-pool)
  (p-allocator (:pointer (:struct allocation-callbacks))))

(defvkfun ("vkResetCommandPool" reset-command-pool) checked-result
  (device device)
  (command-pool command-pool)
  (flags command-pool-reset-flags))

(defvkfun ("vkAllocateCommandBuffers" allocate-command-buffers) checked-result
  (device device)
  (p-allocate-info (:pointer (:struct command-buffer-allocate-info)))
  (p-command-buffers (:pointer command-buffer)))

(defvkfun ("vkFreeCommandBuffers" free-command-buffers) :void
  (device device)
  (command-pool command-pool)
  (command-buffer-count :uint32)
  (p-command-buffers (:pointer command-buffer)))

(defvkfun ("vkBeginCommandBuffer" begin-command-buffer) checked-result
  (command-buffer command-buffer)
  (p-begin-info (:pointer (:struct command-buffer-begin-info))))

(defvkfun ("vkEndCommandBuffer" end-command-buffer) checked-result
  (command-buffer command-buffer))

(defvkfun ("vkResetCommandBuffer" reset-command-buffer) checked-result
  (command-buffer command-buffer)
  (flags command-buffer-reset-flags))

(defvkfun ("vkCmdBindPipeline" cmd-bind-pipeline) :void
  (command-buffer command-buffer)
  (pipeline-bind-point pipeline-bind-point)
  (pipeline pipeline))

(defvkfun ("vkCmdSetViewport" cmd-set-viewport) :void
  (command-buffer command-buffer)
  (first-viewport :uint32)
  (viewport-count :uint32)
  (p-viewports (:pointer (:struct viewport))))

(defvkfun ("vkCmdSetScissor" cmd-set-scissor) :void
  (command-buffer command-buffer)
  (first-scissor :uint32)
  (scissor-count :uint32)
  (p-scissors (:pointer (:struct rect-2d))))

(defvkfun ("vkCmdSetLineWidth" cmd-set-line-width) :void
  (command-buffer command-buffer)
  (line-width :float))

(defvkfun ("vkCmdSetDepthBias" cmd-set-depth-bias) :void
  (command-buffer command-buffer)
  (depth-bias-constant-factor :float)
  (depth-bias-clamp :float)
  (depth-bias-slope-factor :float))

(defvkfun ("vkCmdSetBlendConstants" cmd-set-blend-constants) :void
  (command-buffer command-buffer)
  (blend-constants :float))

(defvkfun ("vkCmdSetDepthBounds" cmd-set-depth-bounds) :void
  (command-buffer command-buffer)
  (min-depth-bounds :float)
  (max-depth-bounds :float))

(defvkfun ("vkCmdSetStencilCompareMask" cmd-set-stencil-compare-mask) :void
  (command-buffer command-buffer)
  (face-mask stencil-face-flags)
  (compare-mask :uint32))

(defvkfun ("vkCmdSetStencilWriteMask" cmd-set-stencil-write-mask) :void
  (command-buffer command-buffer)
  (face-mask stencil-face-flags)
  (write-mask :uint32))

(defvkfun ("vkCmdSetStencilReference" cmd-set-stencil-reference) :void
  (command-buffer command-buffer)
  (face-mask stencil-face-flags)
  (reference :uint32))

(defvkfun ("vkCmdBindDescriptorSets" cmd-bind-descriptor-sets) :void
  (command-buffer command-buffer)
  (pipeline-bind-point pipeline-bind-point)
  (layout pipeline-layout)
  (first-set :uint32)
  (descriptor-set-count :uint32)
  (p-descriptor-sets (:pointer descriptor-set))
  (dynamic-offset-count :uint32)
  (p-dynamic-offsets (:pointer :uint32)))

(defvkfun ("vkCmdBindIndexBuffer" cmd-bind-index-buffer) :void
  (command-buffer command-buffer)
  (buffer buffer)
  (offset device-size)
  (index-type index-type))

(defvkfun ("vkCmdBindVertexBuffers" cmd-bind-vertex-buffers) :void
  (command-buffer command-buffer)
  (first-binding :uint32)
  (binding-count :uint32)
  (p-buffers (:pointer buffer))
  (p-offsets (:pointer device-size)))

(defvkfun ("vkCmdDraw" cmd-draw) :void
  (command-buffer command-buffer)
  (vertex-count :uint32)
  (instance-count :uint32)
  (first-vertex :uint32)
  (first-instance :uint32))

(defvkfun ("vkCmdDrawIndexed" cmd-draw-indexed) :void
  (command-buffer command-buffer)
  (index-count :uint32)
  (instance-count :uint32)
  (first-index :uint32)
  (vertex-offset :int32)
  (first-instance :uint32))

(defvkextfun ("vkCmdDrawMultiEXT" cmd-draw-multi-ext) :void
  (command-buffer command-buffer)
  (draw-count :uint32)
  (p-vertex-info (:pointer (:struct multi-draw-info-ext)))
  (instance-count :uint32)
  (first-instance :uint32)
  (stride :uint32))

(defvkextfun ("vkCmdDrawMultiIndexedEXT" cmd-draw-multi-indexed-ext) :void
  (command-buffer command-buffer)
  (draw-count :uint32)
  (p-index-info (:pointer (:struct multi-draw-indexed-info-ext)))
  (instance-count :uint32)
  (first-instance :uint32)
  (stride :uint32)
  (p-vertex-offset (:pointer :int32)))

(defvkfun ("vkCmdDrawIndirect" cmd-draw-indirect) :void
  (command-buffer command-buffer)
  (buffer buffer)
  (offset device-size)
  (draw-count :uint32)
  (stride :uint32))

(defvkfun ("vkCmdDrawIndexedIndirect" cmd-draw-indexed-indirect) :void
  (command-buffer command-buffer)
  (buffer buffer)
  (offset device-size)
  (draw-count :uint32)
  (stride :uint32))

(defvkfun ("vkCmdDispatch" cmd-dispatch) :void
  (command-buffer command-buffer)
  (group-count-x :uint32)
  (group-count-y :uint32)
  (group-count-z :uint32))

(defvkfun ("vkCmdDispatchIndirect" cmd-dispatch-indirect) :void
  (command-buffer command-buffer)
  (buffer buffer)
  (offset device-size))

(defvkextfun ("vkCmdSubpassShadingHUAWEI" cmd-subpass-shading-huawei) :void
  (command-buffer command-buffer))

(defvkfun ("vkCmdCopyBuffer" cmd-copy-buffer) :void
  (command-buffer command-buffer)
  (src-buffer buffer)
  (dst-buffer buffer)
  (region-count :uint32)
  (p-regions (:pointer (:struct buffer-copy))))

(defvkfun ("vkCmdCopyImage" cmd-copy-image) :void
  (command-buffer command-buffer)
  (src-image image)
  (src-image-layout image-layout)
  (dst-image image)
  (dst-image-layout image-layout)
  (region-count :uint32)
  (p-regions (:pointer (:struct image-copy))))

(defvkfun ("vkCmdBlitImage" cmd-blit-image) :void
  (command-buffer command-buffer)
  (src-image image)
  (src-image-layout image-layout)
  (dst-image image)
  (dst-image-layout image-layout)
  (region-count :uint32)
  (p-regions (:pointer (:struct image-blit)))
  (filter filter))

(defvkfun ("vkCmdCopyBufferToImage" cmd-copy-buffer-to-image) :void
  (command-buffer command-buffer)
  (src-buffer buffer)
  (dst-image image)
  (dst-image-layout image-layout)
  (region-count :uint32)
  (p-regions (:pointer (:struct buffer-image-copy))))

(defvkfun ("vkCmdCopyImageToBuffer" cmd-copy-image-to-buffer) :void
  (command-buffer command-buffer)
  (src-image image)
  (src-image-layout image-layout)
  (dst-buffer buffer)
  (region-count :uint32)
  (p-regions (:pointer (:struct buffer-image-copy))))

(defvkfun ("vkCmdUpdateBuffer" cmd-update-buffer) :void
  (command-buffer command-buffer)
  (dst-buffer buffer)
  (dst-offset device-size)
  (data-size device-size)
  (p-data (:pointer :void)))

(defvkfun ("vkCmdFillBuffer" cmd-fill-buffer) :void
  (command-buffer command-buffer)
  (dst-buffer buffer)
  (dst-offset device-size)
  (size device-size)
  (data :uint32))

(defvkfun ("vkCmdClearColorImage" cmd-clear-color-image) :void
  (command-buffer command-buffer)
  (image image)
  (image-layout image-layout)
  (p-color (:pointer (:union clear-color-value)))
  (range-count :uint32)
  (p-ranges (:pointer (:struct image-subresource-range))))

(defvkfun ("vkCmdClearDepthStencilImage" cmd-clear-depth-stencil-image) :void
  (command-buffer command-buffer)
  (image image)
  (image-layout image-layout)
  (p-depth-stencil (:pointer (:struct clear-depth-stencil-value)))
  (range-count :uint32)
  (p-ranges (:pointer (:struct image-subresource-range))))

(defvkfun ("vkCmdClearAttachments" cmd-clear-attachments) :void
  (command-buffer command-buffer)
  (attachment-count :uint32)
  (p-attachments (:pointer (:struct clear-attachment)))
  (rect-count :uint32)
  (p-rects (:pointer (:struct clear-rect))))

(defvkfun ("vkCmdResolveImage" cmd-resolve-image) :void
  (command-buffer command-buffer)
  (src-image image)
  (src-image-layout image-layout)
  (dst-image image)
  (dst-image-layout image-layout)
  (region-count :uint32)
  (p-regions (:pointer (:struct image-resolve))))

(defvkfun ("vkCmdSetEvent" cmd-set-event) :void
  (command-buffer command-buffer)
  (event event)
  (stage-mask pipeline-stage-flags))

(defvkfun ("vkCmdResetEvent" cmd-reset-event) :void
  (command-buffer command-buffer)
  (event event)
  (stage-mask pipeline-stage-flags))

(defvkfun ("vkCmdWaitEvents" cmd-wait-events) :void
  (command-buffer command-buffer)
  (event-count :uint32)
  (p-events (:pointer event))
  (src-stage-mask pipeline-stage-flags)
  (dst-stage-mask pipeline-stage-flags)
  (memory-barrier-count :uint32)
  (p-memory-barriers (:pointer (:struct memory-barrier)))
  (buffer-memory-barrier-count :uint32)
  (p-buffer-memory-barriers (:pointer (:struct buffer-memory-barrier)))
  (image-memory-barrier-count :uint32)
  (p-image-memory-barriers (:pointer (:struct image-memory-barrier))))

(defvkfun ("vkCmdPipelineBarrier" cmd-pipeline-barrier) :void
  (command-buffer command-buffer)
  (src-stage-mask pipeline-stage-flags)
  (dst-stage-mask pipeline-stage-flags)
  (dependency-flags dependency-flags)
  (memory-barrier-count :uint32)
  (p-memory-barriers (:pointer (:struct memory-barrier)))
  (buffer-memory-barrier-count :uint32)
  (p-buffer-memory-barriers (:pointer (:struct buffer-memory-barrier)))
  (image-memory-barrier-count :uint32)
  (p-image-memory-barriers (:pointer (:struct image-memory-barrier))))

(defvkfun ("vkCmdBeginQuery" cmd-begin-query) :void
  (command-buffer command-buffer)
  (query-pool query-pool)
  (query :uint32)
  (flags query-control-flags))

(defvkfun ("vkCmdEndQuery" cmd-end-query) :void
  (command-buffer command-buffer)
  (query-pool query-pool)
  (query :uint32))

(defvkextfun ("vkCmdBeginConditionalRenderingEXT" cmd-begin-conditional-rendering-ext) :void
  (command-buffer command-buffer)
  (p-conditional-rendering-begin (:pointer (:struct conditional-rendering-begin-info-ext))))

(defvkextfun ("vkCmdEndConditionalRenderingEXT" cmd-end-conditional-rendering-ext) :void
  (command-buffer command-buffer))

(defvkfun ("vkCmdResetQueryPool" cmd-reset-query-pool) :void
  (command-buffer command-buffer)
  (query-pool query-pool)
  (first-query :uint32)
  (query-count :uint32))

(defvkfun ("vkCmdWriteTimestamp" cmd-write-timestamp) :void
  (command-buffer command-buffer)
  (pipeline-stage pipeline-stage-flag-bits)
  (query-pool query-pool)
  (query :uint32))

(defvkfun ("vkCmdCopyQueryPoolResults" cmd-copy-query-pool-results) :void
  (command-buffer command-buffer)
  (query-pool query-pool)
  (first-query :uint32)
  (query-count :uint32)
  (dst-buffer buffer)
  (dst-offset device-size)
  (stride device-size)
  (flags query-result-flags))

(defvkfun ("vkCmdPushConstants" cmd-push-constants) :void
  (command-buffer command-buffer)
  (layout pipeline-layout)
  (stage-flags shader-stage-flags)
  (offset :uint32)
  (size :uint32)
  (p-values (:pointer :void)))

(defvkfun ("vkCmdBeginRenderPass" cmd-begin-render-pass) :void
  (command-buffer command-buffer)
  (p-render-pass-begin (:pointer (:struct render-pass-begin-info)))
  (contents subpass-contents))

(defvkfun ("vkCmdNextSubpass" cmd-next-subpass) :void
  (command-buffer command-buffer)
  (contents subpass-contents))

(defvkfun ("vkCmdEndRenderPass" cmd-end-render-pass) :void
  (command-buffer command-buffer))

(defvkfun ("vkCmdExecuteCommands" cmd-execute-commands) :void
  (command-buffer command-buffer)
  (command-buffer-count :uint32)
  (p-command-buffers (:pointer command-buffer)))

(defvkfun ("vkCreateAndroidSurfaceKHR" create-android-surface-khr) checked-result
  (instance instance)
  (p-create-info (:pointer (:struct android-surface-create-info-khr)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-surface (:pointer surface-khr)))

(defvkfun ("vkGetPhysicalDeviceDisplayPropertiesKHR" get-physical-device-display-properties-khr) checked-result
  (physical-device physical-device)
  (p-property-count (:pointer :uint32))
  (p-properties (:pointer (:struct display-properties-khr))))

(defvkfun ("vkGetPhysicalDeviceDisplayPlanePropertiesKHR" get-physical-device-display-plane-properties-khr) checked-result
  (physical-device physical-device)
  (p-property-count (:pointer :uint32))
  (p-properties (:pointer (:struct display-plane-properties-khr))))

(defvkfun ("vkGetDisplayPlaneSupportedDisplaysKHR" get-display-plane-supported-displays-khr) checked-result
  (physical-device physical-device)
  (plane-index :uint32)
  (p-display-count (:pointer :uint32))
  (p-displays (:pointer display-khr)))

(defvkfun ("vkGetDisplayModePropertiesKHR" get-display-mode-properties-khr) checked-result
  (physical-device physical-device)
  (display display-khr)
  (p-property-count (:pointer :uint32))
  (p-properties (:pointer (:struct display-mode-properties-khr))))

(defvkfun ("vkCreateDisplayModeKHR" create-display-mode-khr) checked-result
  (physical-device physical-device)
  (display display-khr)
  (p-create-info (:pointer (:struct display-mode-create-info-khr)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-mode (:pointer display-mode-khr)))

(defvkfun ("vkGetDisplayPlaneCapabilitiesKHR" get-display-plane-capabilities-khr) checked-result
  (physical-device physical-device)
  (mode display-mode-khr)
  (plane-index :uint32)
  (p-capabilities (:pointer (:struct display-plane-capabilities-khr))))

(defvkfun ("vkCreateDisplayPlaneSurfaceKHR" create-display-plane-surface-khr) checked-result
  (instance instance)
  (p-create-info (:pointer (:struct display-surface-create-info-khr)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-surface (:pointer surface-khr)))

(defvkfun ("vkCreateSharedSwapchainsKHR" create-shared-swapchains-khr) checked-result
  (device device)
  (swapchain-count :uint32)
  (p-create-infos (:pointer (:struct swapchain-create-info-khr)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-swapchains (:pointer swapchain-khr)))

(defvkfun ("vkDestroySurfaceKHR" destroy-surface-khr) :void
  (instance instance)
  (surface surface-khr)
  (p-allocator (:pointer (:struct allocation-callbacks))))

(defvkfun ("vkGetPhysicalDeviceSurfaceSupportKHR" get-physical-device-surface-support-khr) checked-result
  (physical-device physical-device)
  (queue-family-index :uint32)
  (surface surface-khr)
  (p-supported (:pointer bool32)))

(defvkfun ("vkGetPhysicalDeviceSurfaceCapabilitiesKHR" get-physical-device-surface-capabilities-khr) checked-result
  (physical-device physical-device)
  (surface surface-khr)
  (p-surface-capabilities (:pointer (:struct surface-capabilities-khr))))

(defvkfun ("vkGetPhysicalDeviceSurfaceFormatsKHR" get-physical-device-surface-formats-khr) checked-result
  (physical-device physical-device)
  (surface surface-khr)
  (p-surface-format-count (:pointer :uint32))
  (p-surface-formats (:pointer (:struct surface-format-khr))))

(defvkfun ("vkGetPhysicalDeviceSurfacePresentModesKHR" get-physical-device-surface-present-modes-khr) checked-result
  (physical-device physical-device)
  (surface surface-khr)
  (p-present-mode-count (:pointer :uint32))
  (p-present-modes (:pointer present-mode-khr)))

(defvkfun ("vkCreateSwapchainKHR" create-swapchain-khr) checked-result
  (device device)
  (p-create-info (:pointer (:struct swapchain-create-info-khr)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-swapchain (:pointer swapchain-khr)))

(defvkfun ("vkDestroySwapchainKHR" destroy-swapchain-khr) :void
  (device device)
  (swapchain swapchain-khr)
  (p-allocator (:pointer (:struct allocation-callbacks))))

(defvkfun ("vkGetSwapchainImagesKHR" get-swapchain-images-khr) checked-result
  (device device)
  (swapchain swapchain-khr)
  (p-swapchain-image-count (:pointer :uint32))
  (p-swapchain-images (:pointer image)))

(defvkfun ("vkAcquireNextImageKHR" acquire-next-image-khr) checked-result
  (device device)
  (swapchain swapchain-khr)
  (timeout :uint64)
  (semaphore semaphore)
  (fence fence)
  (p-image-index (:pointer :uint32)))

(defvkfun ("vkQueuePresentKHR" queue-present-khr) checked-result
  (queue queue)
  (p-present-info (:pointer (:struct present-info-khr))))

(defvkextfun ("vkCreateViSurfaceNN" create-vi-surface-nn) checked-result
  (instance instance)
  (p-create-info (:pointer (:struct vi-surface-create-info-nn)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-surface (:pointer surface-khr)))

(defvkfun ("vkCreateWaylandSurfaceKHR" create-wayland-surface-khr) checked-result
  (instance instance)
  (p-create-info (:pointer (:struct wayland-surface-create-info-khr)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-surface (:pointer surface-khr)))

(defvkfun ("vkGetPhysicalDeviceWaylandPresentationSupportKHR" get-physical-device-wayland-presentation-support-khr) bool32
  (physical-device physical-device)
  (queue-family-index :uint32)
  (display (:pointer wl_display)))

(defvkfun ("vkCreateWin32SurfaceKHR" create-win32-surface-khr) checked-result
  (instance instance)
  (p-create-info (:pointer (:struct win32-surface-create-info-khr)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-surface (:pointer surface-khr)))

(defvkfun ("vkGetPhysicalDeviceWin32PresentationSupportKHR" get-physical-device-win32-presentation-support-khr) bool32
  (physical-device physical-device)
  (queue-family-index :uint32))

(defvkfun ("vkCreateXlibSurfaceKHR" create-xlib-surface-khr) checked-result
  (instance instance)
  (p-create-info (:pointer (:struct xlib-surface-create-info-khr)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-surface (:pointer surface-khr)))

(defvkfun ("vkGetPhysicalDeviceXlibPresentationSupportKHR" get-physical-device-xlib-presentation-support-khr) bool32
  (physical-device physical-device)
  (queue-family-index :uint32)
  (dpy (:pointer display))
  (visual-id visual-id))

(defvkfun ("vkCreateXcbSurfaceKHR" create-xcb-surface-khr) checked-result
  (instance instance)
  (p-create-info (:pointer (:struct xcb-surface-create-info-khr)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-surface (:pointer surface-khr)))

(defvkfun ("vkGetPhysicalDeviceXcbPresentationSupportKHR" get-physical-device-xcb-presentation-support-khr) bool32
  (physical-device physical-device)
  (queue-family-index :uint32)
  (connection (:pointer xcb_connection_t))
  (visual_id xcb_visualid_t))

(defvkfun ("vkCreateDirectFBSurfaceEXT" create-direct-fb-surface-ext) checked-result
  (instance instance)
  (p-create-info (:pointer (:struct direct-fb-surface-create-info-ext)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-surface (:pointer surface-khr)))

(defvkfun ("vkGetPhysicalDeviceDirectFBPresentationSupportEXT" get-physical-device-direct-fb-presentation-support-ext) bool32
  (physical-device physical-device)
  (queue-family-index :uint32)
  (dfb (:pointer i-direct-fb)))

(defvkfun ("vkCreateImagePipeSurfaceFUCHSIA" create-image-pipe-surface-fuchsia) checked-result
  (instance instance)
  (p-create-info (:pointer (:struct image-pipe-surface-create-info-fuchsia)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-surface (:pointer surface-khr)))

(defvkfun ("vkCreateStreamDescriptorSurfaceGGP" create-stream-descriptor-surface-ggp) checked-result
  (instance instance)
  (p-create-info (:pointer (:struct stream-descriptor-surface-create-info-ggp)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-surface (:pointer surface-khr)))

(defvkfun ("vkCreateScreenSurfaceQNX" create-screen-surface-qnx) checked-result
  (instance instance)
  (p-create-info (:pointer (:struct screen-surface-create-info-qnx)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-surface (:pointer surface-khr)))

(defvkfun ("vkGetPhysicalDeviceScreenPresentationSupportQNX" get-physical-device-screen-presentation-support-qnx) bool32
  (physical-device physical-device)
  (queue-family-index :uint32)
  (window (:pointer (:struct _screen_window))))

(defvkextfun ("vkCreateDebugReportCallbackEXT" create-debug-report-callback-ext) checked-result
  (instance instance)
  (p-create-info (:pointer (:struct debug-report-callback-create-info-ext)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-callback (:pointer debug-report-callback-ext)))

(defvkextfun ("vkDestroyDebugReportCallbackEXT" destroy-debug-report-callback-ext) :void
  (instance instance)
  (callback debug-report-callback-ext)
  (p-allocator (:pointer (:struct allocation-callbacks))))

(defvkextfun ("vkDebugReportMessageEXT" debug-report-message-ext) :void
  (instance instance)
  (flags debug-report-flags-ext)
  (object-type debug-report-object-type-ext)
  (object :uint64)
  (location :size)
  (message-code :int32)
  (p-layer-prefix :string)
  (p-message :string))

(defvkextfun ("vkDebugMarkerSetObjectNameEXT" debug-marker-set-object-name-ext) checked-result
  (device device)
  (p-name-info (:pointer (:struct debug-marker-object-name-info-ext))))

(defvkextfun ("vkDebugMarkerSetObjectTagEXT" debug-marker-set-object-tag-ext) checked-result
  (device device)
  (p-tag-info (:pointer (:struct debug-marker-object-tag-info-ext))))

(defvkextfun ("vkCmdDebugMarkerBeginEXT" cmd-debug-marker-begin-ext) :void
  (command-buffer command-buffer)
  (p-marker-info (:pointer (:struct debug-marker-marker-info-ext))))

(defvkextfun ("vkCmdDebugMarkerEndEXT" cmd-debug-marker-end-ext) :void
  (command-buffer command-buffer))

(defvkextfun ("vkCmdDebugMarkerInsertEXT" cmd-debug-marker-insert-ext) :void
  (command-buffer command-buffer)
  (p-marker-info (:pointer (:struct debug-marker-marker-info-ext))))

(defvkextfun ("vkGetPhysicalDeviceExternalImageFormatPropertiesNV" get-physical-device-external-image-format-properties-nv) checked-result
  (physical-device physical-device)
  (format format)
  (type image-type)
  (tiling image-tiling)
  (usage image-usage-flags)
  (flags image-create-flags)
  (external-handle-type external-memory-handle-type-flags-nv)
  (p-external-image-format-properties (:pointer (:struct external-image-format-properties-nv))))

(defvkextfun ("vkGetMemoryWin32HandleNV" get-memory-win32-handle-nv) checked-result
  (device device)
  (memory device-memory)
  (handle-type external-memory-handle-type-flags-nv)
  (p-handle (:pointer handle)))

(defvkextfun ("vkCmdExecuteGeneratedCommandsNV" cmd-execute-generated-commands-nv) :void
  (command-buffer command-buffer)
  (is-preprocessed bool32)
  (p-generated-commands-info (:pointer (:struct generated-commands-info-nv))))

(defvkextfun ("vkCmdPreprocessGeneratedCommandsNV" cmd-preprocess-generated-commands-nv) :void
  (command-buffer command-buffer)
  (p-generated-commands-info (:pointer (:struct generated-commands-info-nv))))

(defvkextfun ("vkCmdBindPipelineShaderGroupNV" cmd-bind-pipeline-shader-group-nv) :void
  (command-buffer command-buffer)
  (pipeline-bind-point pipeline-bind-point)
  (pipeline pipeline)
  (group-index :uint32))

(defvkextfun ("vkGetGeneratedCommandsMemoryRequirementsNV" get-generated-commands-memory-requirements-nv) :void
  (device device)
  (p-info (:pointer (:struct generated-commands-memory-requirements-info-nv)))
  (p-memory-requirements (:pointer (:struct memory-requirements-2))))

(defvkextfun ("vkCreateIndirectCommandsLayoutNV" create-indirect-commands-layout-nv) checked-result
  (device device)
  (p-create-info (:pointer (:struct indirect-commands-layout-create-info-nv)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-indirect-commands-layout (:pointer indirect-commands-layout-nv)))

(defvkextfun ("vkDestroyIndirectCommandsLayoutNV" destroy-indirect-commands-layout-nv) :void
  (device device)
  (indirect-commands-layout indirect-commands-layout-nv)
  (p-allocator (:pointer (:struct allocation-callbacks))))

(defvkfun ("vkGetPhysicalDeviceFeatures2" get-physical-device-features-2) :void
  (physical-device physical-device)
  (p-features (:pointer (:struct physical-device-features-2))))

(defvkfun ("vkGetPhysicalDeviceFeatures2KHR" get-physical-device-features-2-khr) :void
  (physical-device physical-device)
  (p-features (:pointer (:struct physical-device-features-2))))

(defvkfun ("vkGetPhysicalDeviceProperties2" get-physical-device-properties-2) :void
  (physical-device physical-device)
  (p-properties (:pointer (:struct physical-device-properties-2))))

(defvkfun ("vkGetPhysicalDeviceProperties2KHR" get-physical-device-properties-2-khr) :void
  (physical-device physical-device)
  (p-properties (:pointer (:struct physical-device-properties-2))))

(defvkfun ("vkGetPhysicalDeviceFormatProperties2" get-physical-device-format-properties-2) :void
  (physical-device physical-device)
  (format format)
  (p-format-properties (:pointer (:struct format-properties-2))))

(defvkfun ("vkGetPhysicalDeviceFormatProperties2KHR" get-physical-device-format-properties-2-khr) :void
  (physical-device physical-device)
  (format format)
  (p-format-properties (:pointer (:struct format-properties-2))))

(defvkfun ("vkGetPhysicalDeviceImageFormatProperties2" get-physical-device-image-format-properties-2) checked-result
  (physical-device physical-device)
  (p-image-format-info (:pointer (:struct physical-device-image-format-info-2)))
  (p-image-format-properties (:pointer (:struct image-format-properties-2))))

(defvkfun ("vkGetPhysicalDeviceImageFormatProperties2KHR" get-physical-device-image-format-properties-2-khr) checked-result
  (physical-device physical-device)
  (p-image-format-info (:pointer (:struct physical-device-image-format-info-2)))
  (p-image-format-properties (:pointer (:struct image-format-properties-2))))

(defvkfun ("vkGetPhysicalDeviceQueueFamilyProperties2" get-physical-device-queue-family-properties-2) :void
  (physical-device physical-device)
  (p-queue-family-property-count (:pointer :uint32))
  (p-queue-family-properties (:pointer (:struct queue-family-properties-2))))

(defvkfun ("vkGetPhysicalDeviceQueueFamilyProperties2KHR" get-physical-device-queue-family-properties-2-khr) :void
  (physical-device physical-device)
  (p-queue-family-property-count (:pointer :uint32))
  (p-queue-family-properties (:pointer (:struct queue-family-properties-2))))

(defvkfun ("vkGetPhysicalDeviceMemoryProperties2" get-physical-device-memory-properties-2) :void
  (physical-device physical-device)
  (p-memory-properties (:pointer (:struct physical-device-memory-properties-2))))

(defvkfun ("vkGetPhysicalDeviceMemoryProperties2KHR" get-physical-device-memory-properties-2-khr) :void
  (physical-device physical-device)
  (p-memory-properties (:pointer (:struct physical-device-memory-properties-2))))

(defvkfun ("vkGetPhysicalDeviceSparseImageFormatProperties2" get-physical-device-sparse-image-format-properties-2) :void
  (physical-device physical-device)
  (p-format-info (:pointer (:struct physical-device-sparse-image-format-info-2)))
  (p-property-count (:pointer :uint32))
  (p-properties (:pointer (:struct sparse-image-format-properties-2))))

(defvkfun ("vkGetPhysicalDeviceSparseImageFormatProperties2KHR" get-physical-device-sparse-image-format-properties-2-khr) :void
  (physical-device physical-device)
  (p-format-info (:pointer (:struct physical-device-sparse-image-format-info-2)))
  (p-property-count (:pointer :uint32))
  (p-properties (:pointer (:struct sparse-image-format-properties-2))))

(defvkextfun ("vkCmdPushDescriptorSetKHR" cmd-push-descriptor-set-khr) :void
  (command-buffer command-buffer)
  (pipeline-bind-point pipeline-bind-point)
  (layout pipeline-layout)
  (set :uint32)
  (descriptor-write-count :uint32)
  (p-descriptor-writes (:pointer (:struct write-descriptor-set))))

(defvkfun ("vkTrimCommandPool" trim-command-pool) :void
  (device device)
  (command-pool command-pool)
  (flags command-pool-trim-flags))

(defvkfun ("vkTrimCommandPoolKHR" trim-command-pool-khr) :void
  (device device)
  (command-pool command-pool)
  (flags command-pool-trim-flags))

(defvkfun ("vkGetPhysicalDeviceExternalBufferProperties" get-physical-device-external-buffer-properties) :void
  (physical-device physical-device)
  (p-external-buffer-info (:pointer (:struct physical-device-external-buffer-info)))
  (p-external-buffer-properties (:pointer (:struct external-buffer-properties))))

(defvkfun ("vkGetPhysicalDeviceExternalBufferPropertiesKHR" get-physical-device-external-buffer-properties-khr) :void
  (physical-device physical-device)
  (p-external-buffer-info (:pointer (:struct physical-device-external-buffer-info)))
  (p-external-buffer-properties (:pointer (:struct external-buffer-properties))))

(defvkextfun ("vkGetMemoryWin32HandleKHR" get-memory-win32-handle-khr) checked-result
  (device device)
  (p-get-win32-handle-info (:pointer (:struct memory-get-win32-handle-info-khr)))
  (p-handle (:pointer handle)))

(defvkextfun ("vkGetMemoryWin32HandlePropertiesKHR" get-memory-win32-handle-properties-khr) checked-result
  (device device)
  (handle-type external-memory-handle-type-flag-bits)
  (handle handle)
  (p-memory-win32-handle-properties (:pointer (:struct memory-win32-handle-properties-khr))))

(defvkextfun ("vkGetMemoryFdKHR" get-memory-fd-khr) checked-result
  (device device)
  (p-get-fd-info (:pointer (:struct memory-get-fd-info-khr)))
  (p-fd (:pointer :int)))

(defvkextfun ("vkGetMemoryFdPropertiesKHR" get-memory-fd-properties-khr) checked-result
  (device device)
  (handle-type external-memory-handle-type-flag-bits)
  (fd :int)
  (p-memory-fd-properties (:pointer (:struct memory-fd-properties-khr))))

(defvkextfun ("vkGetMemoryZirconHandleFUCHSIA" get-memory-zircon-handle-fuchsia) checked-result
  (device device)
  (p-get-zircon-handle-info (:pointer (:struct memory-get-zircon-handle-info-fuchsia)))
  (p-zircon-handle (:pointer zx_handle_t)))

(defvkextfun ("vkGetMemoryZirconHandlePropertiesFUCHSIA" get-memory-zircon-handle-properties-fuchsia) checked-result
  (device device)
  (handle-type external-memory-handle-type-flag-bits)
  (zircon-handle zx_handle_t)
  (p-memory-zircon-handle-properties (:pointer (:struct memory-zircon-handle-properties-fuchsia))))

(defvkextfun ("vkGetMemoryRemoteAddressNV" get-memory-remote-address-nv) checked-result
  (device device)
  (p-memory-get-remote-address-info (:pointer (:struct memory-get-remote-address-info-nv)))
  (p-address (:pointer remote-address-nv)))

(defvkfun ("vkGetPhysicalDeviceExternalSemaphoreProperties" get-physical-device-external-semaphore-properties) :void
  (physical-device physical-device)
  (p-external-semaphore-info (:pointer (:struct physical-device-external-semaphore-info)))
  (p-external-semaphore-properties (:pointer (:struct external-semaphore-properties))))

(defvkfun ("vkGetPhysicalDeviceExternalSemaphorePropertiesKHR" get-physical-device-external-semaphore-properties-khr) :void
  (physical-device physical-device)
  (p-external-semaphore-info (:pointer (:struct physical-device-external-semaphore-info)))
  (p-external-semaphore-properties (:pointer (:struct external-semaphore-properties))))

(defvkextfun ("vkGetSemaphoreWin32HandleKHR" get-semaphore-win32-handle-khr) checked-result
  (device device)
  (p-get-win32-handle-info (:pointer (:struct semaphore-get-win32-handle-info-khr)))
  (p-handle (:pointer handle)))

(defvkextfun ("vkImportSemaphoreWin32HandleKHR" import-semaphore-win32-handle-khr) checked-result
  (device device)
  (p-import-semaphore-win32-handle-info (:pointer (:struct import-semaphore-win32-handle-info-khr))))

(defvkextfun ("vkGetSemaphoreFdKHR" get-semaphore-fd-khr) checked-result
  (device device)
  (p-get-fd-info (:pointer (:struct semaphore-get-fd-info-khr)))
  (p-fd (:pointer :int)))

(defvkextfun ("vkImportSemaphoreFdKHR" import-semaphore-fd-khr) checked-result
  (device device)
  (p-import-semaphore-fd-info (:pointer (:struct import-semaphore-fd-info-khr))))

(defvkextfun ("vkGetSemaphoreZirconHandleFUCHSIA" get-semaphore-zircon-handle-fuchsia) checked-result
  (device device)
  (p-get-zircon-handle-info (:pointer (:struct semaphore-get-zircon-handle-info-fuchsia)))
  (p-zircon-handle (:pointer zx_handle_t)))

(defvkextfun ("vkImportSemaphoreZirconHandleFUCHSIA" import-semaphore-zircon-handle-fuchsia) checked-result
  (device device)
  (p-import-semaphore-zircon-handle-info (:pointer (:struct import-semaphore-zircon-handle-info-fuchsia))))

(defvkfun ("vkGetPhysicalDeviceExternalFenceProperties" get-physical-device-external-fence-properties) :void
  (physical-device physical-device)
  (p-external-fence-info (:pointer (:struct physical-device-external-fence-info)))
  (p-external-fence-properties (:pointer (:struct external-fence-properties))))

(defvkfun ("vkGetPhysicalDeviceExternalFencePropertiesKHR" get-physical-device-external-fence-properties-khr) :void
  (physical-device physical-device)
  (p-external-fence-info (:pointer (:struct physical-device-external-fence-info)))
  (p-external-fence-properties (:pointer (:struct external-fence-properties))))

(defvkextfun ("vkGetFenceWin32HandleKHR" get-fence-win32-handle-khr) checked-result
  (device device)
  (p-get-win32-handle-info (:pointer (:struct fence-get-win32-handle-info-khr)))
  (p-handle (:pointer handle)))

(defvkextfun ("vkImportFenceWin32HandleKHR" import-fence-win32-handle-khr) checked-result
  (device device)
  (p-import-fence-win32-handle-info (:pointer (:struct import-fence-win32-handle-info-khr))))

(defvkextfun ("vkGetFenceFdKHR" get-fence-fd-khr) checked-result
  (device device)
  (p-get-fd-info (:pointer (:struct fence-get-fd-info-khr)))
  (p-fd (:pointer :int)))

(defvkextfun ("vkImportFenceFdKHR" import-fence-fd-khr) checked-result
  (device device)
  (p-import-fence-fd-info (:pointer (:struct import-fence-fd-info-khr))))

(defvkextfun ("vkReleaseDisplayEXT" release-display-ext) checked-result
  (physical-device physical-device)
  (display display-khr))

(defvkextfun ("vkAcquireXlibDisplayEXT" acquire-xlib-display-ext) checked-result
  (physical-device physical-device)
  (dpy (:pointer display))
  (display display-khr))

(defvkextfun ("vkGetRandROutputDisplayEXT" get-rand-r-output-display-ext) checked-result
  (physical-device physical-device)
  (dpy (:pointer display))
  (rr-output rr-output)
  (p-display (:pointer display-khr)))

(defvkextfun ("vkAcquireWinrtDisplayNV" acquire-winrt-display-nv) checked-result
  (physical-device physical-device)
  (display display-khr))

(defvkextfun ("vkGetWinrtDisplayNV" get-winrt-display-nv) checked-result
  (physical-device physical-device)
  (device-relative-id :uint32)
  (p-display (:pointer display-khr)))

(defvkextfun ("vkDisplayPowerControlEXT" display-power-control-ext) checked-result
  (device device)
  (display display-khr)
  (p-display-power-info (:pointer (:struct display-power-info-ext))))

(defvkextfun ("vkRegisterDeviceEventEXT" register-device-event-ext) checked-result
  (device device)
  (p-device-event-info (:pointer (:struct device-event-info-ext)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-fence (:pointer fence)))

(defvkextfun ("vkRegisterDisplayEventEXT" register-display-event-ext) checked-result
  (device device)
  (display display-khr)
  (p-display-event-info (:pointer (:struct display-event-info-ext)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-fence (:pointer fence)))

(defvkextfun ("vkGetSwapchainCounterEXT" get-swapchain-counter-ext) checked-result
  (device device)
  (swapchain swapchain-khr)
  (counter surface-counter-flag-bits-ext)
  (p-counter-value (:pointer :uint64)))

(defvkextfun ("vkGetPhysicalDeviceSurfaceCapabilities2EXT" get-physical-device-surface-capabilities-2-ext) checked-result
  (physical-device physical-device)
  (surface surface-khr)
  (p-surface-capabilities (:pointer (:struct surface-capabilities-2-ext))))

(defvkfun ("vkEnumeratePhysicalDeviceGroups" enumerate-physical-device-groups) checked-result
  (instance instance)
  (p-physical-device-group-count (:pointer :uint32))
  (p-physical-device-group-properties (:pointer (:struct physical-device-group-properties))))

(defvkfun ("vkEnumeratePhysicalDeviceGroupsKHR" enumerate-physical-device-groups-khr) checked-result
  (instance instance)
  (p-physical-device-group-count (:pointer :uint32))
  (p-physical-device-group-properties (:pointer (:struct physical-device-group-properties))))

(defvkfun ("vkGetDeviceGroupPeerMemoryFeatures" get-device-group-peer-memory-features) :void
  (device device)
  (heap-index :uint32)
  (local-device-index :uint32)
  (remote-device-index :uint32)
  (p-peer-memory-features (:pointer peer-memory-feature-flags)))

(defvkfun ("vkGetDeviceGroupPeerMemoryFeaturesKHR" get-device-group-peer-memory-features-khr) :void
  (device device)
  (heap-index :uint32)
  (local-device-index :uint32)
  (remote-device-index :uint32)
  (p-peer-memory-features (:pointer peer-memory-feature-flags)))

(defvkfun ("vkBindBufferMemory2" bind-buffer-memory-2) checked-result
  (device device)
  (bind-info-count :uint32)
  (p-bind-infos (:pointer (:struct bind-buffer-memory-info))))

(defvkfun ("vkBindBufferMemory2KHR" bind-buffer-memory-2-khr) checked-result
  (device device)
  (bind-info-count :uint32)
  (p-bind-infos (:pointer (:struct bind-buffer-memory-info))))

(defvkfun ("vkBindImageMemory2" bind-image-memory-2) checked-result
  (device device)
  (bind-info-count :uint32)
  (p-bind-infos (:pointer (:struct bind-image-memory-info))))

(defvkfun ("vkBindImageMemory2KHR" bind-image-memory-2-khr) checked-result
  (device device)
  (bind-info-count :uint32)
  (p-bind-infos (:pointer (:struct bind-image-memory-info))))

(defvkfun ("vkCmdSetDeviceMask" cmd-set-device-mask) :void
  (command-buffer command-buffer)
  (device-mask :uint32))

(defvkfun ("vkCmdSetDeviceMaskKHR" cmd-set-device-mask-khr) :void
  (command-buffer command-buffer)
  (device-mask :uint32))

(defvkextfun ("vkGetDeviceGroupPresentCapabilitiesKHR" get-device-group-present-capabilities-khr) checked-result
  (device device)
  (p-device-group-present-capabilities (:pointer (:struct device-group-present-capabilities-khr))))

(defvkextfun ("vkGetDeviceGroupSurfacePresentModesKHR" get-device-group-surface-present-modes-khr) checked-result
  (device device)
  (surface surface-khr)
  (p-modes (:pointer device-group-present-mode-flags-khr)))

(defvkextfun ("vkAcquireNextImage2KHR" acquire-next-image-2-khr) checked-result
  (device device)
  (p-acquire-info (:pointer (:struct acquire-next-image-info-khr)))
  (p-image-index (:pointer :uint32)))

(defvkfun ("vkCmdDispatchBase" cmd-dispatch-base) :void
  (command-buffer command-buffer)
  (base-group-x :uint32)
  (base-group-y :uint32)
  (base-group-z :uint32)
  (group-count-x :uint32)
  (group-count-y :uint32)
  (group-count-z :uint32))

(defvkfun ("vkCmdDispatchBaseKHR" cmd-dispatch-base-khr) :void
  (command-buffer command-buffer)
  (base-group-x :uint32)
  (base-group-y :uint32)
  (base-group-z :uint32)
  (group-count-x :uint32)
  (group-count-y :uint32)
  (group-count-z :uint32))

(defvkextfun ("vkGetPhysicalDevicePresentRectanglesKHR" get-physical-device-present-rectangles-khr) checked-result
  (physical-device physical-device)
  (surface surface-khr)
  (p-rect-count (:pointer :uint32))
  (p-rects (:pointer (:struct rect-2d))))

(defvkfun ("vkCreateDescriptorUpdateTemplate" create-descriptor-update-template) checked-result
  (device device)
  (p-create-info (:pointer (:struct descriptor-update-template-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-descriptor-update-template (:pointer descriptor-update-template)))

(defvkfun ("vkCreateDescriptorUpdateTemplateKHR" create-descriptor-update-template-khr) checked-result
  (device device)
  (p-create-info (:pointer (:struct descriptor-update-template-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-descriptor-update-template (:pointer descriptor-update-template)))

(defvkfun ("vkDestroyDescriptorUpdateTemplate" destroy-descriptor-update-template) :void
  (device device)
  (descriptor-update-template descriptor-update-template)
  (p-allocator (:pointer (:struct allocation-callbacks))))

(defvkfun ("vkDestroyDescriptorUpdateTemplateKHR" destroy-descriptor-update-template-khr) :void
  (device device)
  (descriptor-update-template descriptor-update-template)
  (p-allocator (:pointer (:struct allocation-callbacks))))

(defvkfun ("vkUpdateDescriptorSetWithTemplate" update-descriptor-set-with-template) :void
  (device device)
  (descriptor-set descriptor-set)
  (descriptor-update-template descriptor-update-template)
  (p-data (:pointer :void)))

(defvkfun ("vkUpdateDescriptorSetWithTemplateKHR" update-descriptor-set-with-template-khr) :void
  (device device)
  (descriptor-set descriptor-set)
  (descriptor-update-template descriptor-update-template)
  (p-data (:pointer :void)))

(defvkextfun ("vkCmdPushDescriptorSetWithTemplateKHR" cmd-push-descriptor-set-with-template-khr) :void
  (command-buffer command-buffer)
  (descriptor-update-template descriptor-update-template)
  (layout pipeline-layout)
  (set :uint32)
  (p-data (:pointer :void)))

(defvkextfun ("vkSetHdrMetadataEXT" set-hdr-metadata-ext) :void
  (device device)
  (swapchain-count :uint32)
  (p-swapchains (:pointer swapchain-khr))
  (p-metadata (:pointer (:struct hdr-metadata-ext))))

(defvkextfun ("vkGetSwapchainStatusKHR" get-swapchain-status-khr) checked-result
  (device device)
  (swapchain swapchain-khr))

(defvkextfun ("vkGetRefreshCycleDurationGOOGLE" get-refresh-cycle-duration-google) checked-result
  (device device)
  (swapchain swapchain-khr)
  (p-display-timing-properties (:pointer (:struct refresh-cycle-duration-google))))

(defvkextfun ("vkGetPastPresentationTimingGOOGLE" get-past-presentation-timing-google) checked-result
  (device device)
  (swapchain swapchain-khr)
  (p-presentation-timing-count (:pointer :uint32))
  (p-presentation-timings (:pointer (:struct past-presentation-timing-google))))

(defvkfun ("vkCreateIOSSurfaceMVK" create-ios-surface-mvk) checked-result
  (instance instance)
  (p-create-info (:pointer (:struct ios-surface-create-info-mvk)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-surface (:pointer surface-khr)))

(defvkfun ("vkCreateMacOSSurfaceMVK" create-mac-os-surface-mvk) checked-result
  (instance instance)
  (p-create-info (:pointer (:struct mac-os-surface-create-info-mvk)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-surface (:pointer surface-khr)))

(defvkfun ("vkCreateMetalSurfaceEXT" create-metal-surface-ext) checked-result
  (instance instance)
  (p-create-info (:pointer (:struct metal-surface-create-info-ext)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-surface (:pointer surface-khr)))

(defvkextfun ("vkCmdSetViewportWScalingNV" cmd-set-viewport-w-scaling-nv) :void
  (command-buffer command-buffer)
  (first-viewport :uint32)
  (viewport-count :uint32)
  (p-viewport-w-scalings (:pointer (:struct viewport-w-scaling-nv))))

(defvkextfun ("vkCmdSetDiscardRectangleEXT" cmd-set-discard-rectangle-ext) :void
  (command-buffer command-buffer)
  (first-discard-rectangle :uint32)
  (discard-rectangle-count :uint32)
  (p-discard-rectangles (:pointer (:struct rect-2d))))

(defvkextfun ("vkCmdSetSampleLocationsEXT" cmd-set-sample-locations-ext) :void
  (command-buffer command-buffer)
  (p-sample-locations-info (:pointer (:struct sample-locations-info-ext))))

(defvkextfun ("vkGetPhysicalDeviceMultisamplePropertiesEXT" get-physical-device-multisample-properties-ext) :void
  (physical-device physical-device)
  (samples sample-count-flag-bits)
  (p-multisample-properties (:pointer (:struct multisample-properties-ext))))

(defvkfun ("vkGetPhysicalDeviceSurfaceCapabilities2KHR" get-physical-device-surface-capabilities-2-khr) checked-result
  (physical-device physical-device)
  (p-surface-info (:pointer (:struct physical-device-surface-info-2-khr)))
  (p-surface-capabilities (:pointer (:struct surface-capabilities-2-khr))))

(defvkfun ("vkGetPhysicalDeviceSurfaceFormats2KHR" get-physical-device-surface-formats-2-khr) checked-result
  (physical-device physical-device)
  (p-surface-info (:pointer (:struct physical-device-surface-info-2-khr)))
  (p-surface-format-count (:pointer :uint32))
  (p-surface-formats (:pointer (:struct surface-format-2-khr))))

(defvkfun ("vkGetPhysicalDeviceDisplayProperties2KHR" get-physical-device-display-properties-2-khr) checked-result
  (physical-device physical-device)
  (p-property-count (:pointer :uint32))
  (p-properties (:pointer (:struct display-properties-2-khr))))

(defvkfun ("vkGetPhysicalDeviceDisplayPlaneProperties2KHR" get-physical-device-display-plane-properties-2-khr) checked-result
  (physical-device physical-device)
  (p-property-count (:pointer :uint32))
  (p-properties (:pointer (:struct display-plane-properties-2-khr))))

(defvkfun ("vkGetDisplayModeProperties2KHR" get-display-mode-properties-2-khr) checked-result
  (physical-device physical-device)
  (display display-khr)
  (p-property-count (:pointer :uint32))
  (p-properties (:pointer (:struct display-mode-properties-2-khr))))

(defvkfun ("vkGetDisplayPlaneCapabilities2KHR" get-display-plane-capabilities-2-khr) checked-result
  (physical-device physical-device)
  (p-display-plane-info (:pointer (:struct display-plane-info-2-khr)))
  (p-capabilities (:pointer (:struct display-plane-capabilities-2-khr))))

(defvkfun ("vkGetBufferMemoryRequirements2" get-buffer-memory-requirements-2) :void
  (device device)
  (p-info (:pointer (:struct buffer-memory-requirements-info-2)))
  (p-memory-requirements (:pointer (:struct memory-requirements-2))))

(defvkfun ("vkGetBufferMemoryRequirements2KHR" get-buffer-memory-requirements-2-khr) :void
  (device device)
  (p-info (:pointer (:struct buffer-memory-requirements-info-2)))
  (p-memory-requirements (:pointer (:struct memory-requirements-2))))

(defvkfun ("vkGetImageMemoryRequirements2" get-image-memory-requirements-2) :void
  (device device)
  (p-info (:pointer (:struct image-memory-requirements-info-2)))
  (p-memory-requirements (:pointer (:struct memory-requirements-2))))

(defvkfun ("vkGetImageMemoryRequirements2KHR" get-image-memory-requirements-2-khr) :void
  (device device)
  (p-info (:pointer (:struct image-memory-requirements-info-2)))
  (p-memory-requirements (:pointer (:struct memory-requirements-2))))

(defvkfun ("vkGetImageSparseMemoryRequirements2" get-image-sparse-memory-requirements-2) :void
  (device device)
  (p-info (:pointer (:struct image-sparse-memory-requirements-info-2)))
  (p-sparse-memory-requirement-count (:pointer :uint32))
  (p-sparse-memory-requirements (:pointer (:struct sparse-image-memory-requirements-2))))

(defvkfun ("vkGetImageSparseMemoryRequirements2KHR" get-image-sparse-memory-requirements-2-khr) :void
  (device device)
  (p-info (:pointer (:struct image-sparse-memory-requirements-info-2)))
  (p-sparse-memory-requirement-count (:pointer :uint32))
  (p-sparse-memory-requirements (:pointer (:struct sparse-image-memory-requirements-2))))

(defvkextfun ("vkGetDeviceBufferMemoryRequirementsKHR" get-device-buffer-memory-requirements-khr) :void
  (device device)
  (p-info (:pointer (:struct device-buffer-memory-requirements-khr)))
  (p-memory-requirements (:pointer (:struct memory-requirements-2))))

(defvkextfun ("vkGetDeviceImageMemoryRequirementsKHR" get-device-image-memory-requirements-khr) :void
  (device device)
  (p-info (:pointer (:struct device-image-memory-requirements-khr)))
  (p-memory-requirements (:pointer (:struct memory-requirements-2))))

(defvkextfun ("vkGetDeviceImageSparseMemoryRequirementsKHR" get-device-image-sparse-memory-requirements-khr) :void
  (device device)
  (p-info (:pointer (:struct device-image-memory-requirements-khr)))
  (p-sparse-memory-requirement-count (:pointer :uint32))
  (p-sparse-memory-requirements (:pointer (:struct sparse-image-memory-requirements-2))))

(defvkfun ("vkCreateSamplerYcbcrConversion" create-sampler-ycbcr-conversion) checked-result
  (device device)
  (p-create-info (:pointer (:struct sampler-ycbcr-conversion-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-ycbcr-conversion (:pointer sampler-ycbcr-conversion)))

(defvkfun ("vkCreateSamplerYcbcrConversionKHR" create-sampler-ycbcr-conversion-khr) checked-result
  (device device)
  (p-create-info (:pointer (:struct sampler-ycbcr-conversion-create-info)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-ycbcr-conversion (:pointer sampler-ycbcr-conversion)))

(defvkfun ("vkDestroySamplerYcbcrConversion" destroy-sampler-ycbcr-conversion) :void
  (device device)
  (ycbcr-conversion sampler-ycbcr-conversion)
  (p-allocator (:pointer (:struct allocation-callbacks))))

(defvkfun ("vkDestroySamplerYcbcrConversionKHR" destroy-sampler-ycbcr-conversion-khr) :void
  (device device)
  (ycbcr-conversion sampler-ycbcr-conversion)
  (p-allocator (:pointer (:struct allocation-callbacks))))

(defvkfun ("vkGetDeviceQueue2" get-device-queue-2) :void
  (device device)
  (p-queue-info (:pointer (:struct device-queue-info-2)))
  (p-queue (:pointer queue)))

(defvkextfun ("vkCreateValidationCacheEXT" create-validation-cache-ext) checked-result
  (device device)
  (p-create-info (:pointer (:struct validation-cache-create-info-ext)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-validation-cache (:pointer validation-cache-ext)))

(defvkextfun ("vkDestroyValidationCacheEXT" destroy-validation-cache-ext) :void
  (device device)
  (validation-cache validation-cache-ext)
  (p-allocator (:pointer (:struct allocation-callbacks))))

(defvkextfun ("vkGetValidationCacheDataEXT" get-validation-cache-data-ext) checked-result
  (device device)
  (validation-cache validation-cache-ext)
  (p-data-size (:pointer :size))
  (p-data (:pointer :void)))

(defvkextfun ("vkMergeValidationCachesEXT" merge-validation-caches-ext) checked-result
  (device device)
  (dst-cache validation-cache-ext)
  (src-cache-count :uint32)
  (p-src-caches (:pointer validation-cache-ext)))

(defvkfun ("vkGetDescriptorSetLayoutSupport" get-descriptor-set-layout-support) :void
  (device device)
  (p-create-info (:pointer (:struct descriptor-set-layout-create-info)))
  (p-support (:pointer (:struct descriptor-set-layout-support))))

(defvkfun ("vkGetDescriptorSetLayoutSupportKHR" get-descriptor-set-layout-support-khr) :void
  (device device)
  (p-create-info (:pointer (:struct descriptor-set-layout-create-info)))
  (p-support (:pointer (:struct descriptor-set-layout-support))))

(defvkextfun ("vkGetShaderInfoAMD" get-shader-info-amd) checked-result
  (device device)
  (pipeline pipeline)
  (shader-stage shader-stage-flag-bits)
  (info-type shader-info-type-amd)
  (p-info-size (:pointer :size))
  (p-info (:pointer :void)))

(defvkextfun ("vkSetLocalDimmingAMD" set-local-dimming-amd) :void
  (device device)
  (swap-chain swapchain-khr)
  (local-dimming-enable bool32))

(defvkextfun ("vkGetPhysicalDeviceCalibrateableTimeDomainsEXT" get-physical-device-calibrateable-time-domains-ext) checked-result
  (physical-device physical-device)
  (p-time-domain-count (:pointer :uint32))
  (p-time-domains (:pointer time-domain-ext)))

(defvkextfun ("vkGetCalibratedTimestampsEXT" get-calibrated-timestamps-ext) checked-result
  (device device)
  (timestamp-count :uint32)
  (p-timestamp-infos (:pointer (:struct calibrated-timestamp-info-ext)))
  (p-timestamps (:pointer :uint64))
  (p-max-deviation (:pointer :uint64)))

(defvkextfun ("vkSetDebugUtilsObjectNameEXT" set-debug-utils-object-name-ext) checked-result
  (device device)
  (p-name-info (:pointer (:struct debug-utils-object-name-info-ext))))

(defvkextfun ("vkSetDebugUtilsObjectTagEXT" set-debug-utils-object-tag-ext) checked-result
  (device device)
  (p-tag-info (:pointer (:struct debug-utils-object-tag-info-ext))))

(defvkextfun ("vkQueueBeginDebugUtilsLabelEXT" queue-begin-debug-utils-label-ext) :void
  (queue queue)
  (p-label-info (:pointer (:struct debug-utils-label-ext))))

(defvkextfun ("vkQueueEndDebugUtilsLabelEXT" queue-end-debug-utils-label-ext) :void
  (queue queue))

(defvkextfun ("vkQueueInsertDebugUtilsLabelEXT" queue-insert-debug-utils-label-ext) :void
  (queue queue)
  (p-label-info (:pointer (:struct debug-utils-label-ext))))

(defvkextfun ("vkCmdBeginDebugUtilsLabelEXT" cmd-begin-debug-utils-label-ext) :void
  (command-buffer command-buffer)
  (p-label-info (:pointer (:struct debug-utils-label-ext))))

(defvkextfun ("vkCmdEndDebugUtilsLabelEXT" cmd-end-debug-utils-label-ext) :void
  (command-buffer command-buffer))

(defvkextfun ("vkCmdInsertDebugUtilsLabelEXT" cmd-insert-debug-utils-label-ext) :void
  (command-buffer command-buffer)
  (p-label-info (:pointer (:struct debug-utils-label-ext))))

(defvkextfun ("vkCreateDebugUtilsMessengerEXT" create-debug-utils-messenger-ext) checked-result
  (instance instance)
  (p-create-info (:pointer (:struct debug-utils-messenger-create-info-ext)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-messenger (:pointer debug-utils-messenger-ext)))

(defvkextfun ("vkDestroyDebugUtilsMessengerEXT" destroy-debug-utils-messenger-ext) :void
  (instance instance)
  (messenger debug-utils-messenger-ext)
  (p-allocator (:pointer (:struct allocation-callbacks))))

(defvkextfun ("vkSubmitDebugUtilsMessageEXT" submit-debug-utils-message-ext) :void
  (instance instance)
  (message-severity debug-utils-message-severity-flag-bits-ext)
  (message-types debug-utils-message-type-flags-ext)
  (p-callback-data (:pointer (:struct debug-utils-messenger-callback-data-ext))))

(defvkextfun ("vkGetMemoryHostPointerPropertiesEXT" get-memory-host-pointer-properties-ext) checked-result
  (device device)
  (handle-type external-memory-handle-type-flag-bits)
  (p-host-pointer (:pointer :void))
  (p-memory-host-pointer-properties (:pointer (:struct memory-host-pointer-properties-ext))))

(defvkextfun ("vkCmdWriteBufferMarkerAMD" cmd-write-buffer-marker-amd) :void
  (command-buffer command-buffer)
  (pipeline-stage pipeline-stage-flag-bits)
  (dst-buffer buffer)
  (dst-offset device-size)
  (marker :uint32))

(defvkfun ("vkCreateRenderPass2" create-render-pass-2) checked-result
  (device device)
  (p-create-info (:pointer (:struct render-pass-create-info-2)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-render-pass (:pointer render-pass)))

(defvkfun ("vkCreateRenderPass2KHR" create-render-pass-2-khr) checked-result
  (device device)
  (p-create-info (:pointer (:struct render-pass-create-info-2)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-render-pass (:pointer render-pass)))

(defvkfun ("vkCmdBeginRenderPass2" cmd-begin-render-pass-2) :void
  (command-buffer command-buffer)
  (p-render-pass-begin (:pointer (:struct render-pass-begin-info)))
  (p-subpass-begin-info (:pointer (:struct subpass-begin-info))))

(defvkfun ("vkCmdBeginRenderPass2KHR" cmd-begin-render-pass-2-khr) :void
  (command-buffer command-buffer)
  (p-render-pass-begin (:pointer (:struct render-pass-begin-info)))
  (p-subpass-begin-info (:pointer (:struct subpass-begin-info))))

(defvkfun ("vkCmdNextSubpass2" cmd-next-subpass-2) :void
  (command-buffer command-buffer)
  (p-subpass-begin-info (:pointer (:struct subpass-begin-info)))
  (p-subpass-end-info (:pointer (:struct subpass-end-info))))

(defvkfun ("vkCmdNextSubpass2KHR" cmd-next-subpass-2-khr) :void
  (command-buffer command-buffer)
  (p-subpass-begin-info (:pointer (:struct subpass-begin-info)))
  (p-subpass-end-info (:pointer (:struct subpass-end-info))))

(defvkfun ("vkCmdEndRenderPass2" cmd-end-render-pass-2) :void
  (command-buffer command-buffer)
  (p-subpass-end-info (:pointer (:struct subpass-end-info))))

(defvkfun ("vkCmdEndRenderPass2KHR" cmd-end-render-pass-2-khr) :void
  (command-buffer command-buffer)
  (p-subpass-end-info (:pointer (:struct subpass-end-info))))

(defvkfun ("vkGetSemaphoreCounterValue" get-semaphore-counter-value) checked-result
  (device device)
  (semaphore semaphore)
  (p-value (:pointer :uint64)))

(defvkfun ("vkGetSemaphoreCounterValueKHR" get-semaphore-counter-value-khr) checked-result
  (device device)
  (semaphore semaphore)
  (p-value (:pointer :uint64)))

(defvkfun ("vkWaitSemaphores" wait-semaphores) checked-result
  (device device)
  (p-wait-info (:pointer (:struct semaphore-wait-info)))
  (timeout :uint64))

(defvkfun ("vkWaitSemaphoresKHR" wait-semaphores-khr) checked-result
  (device device)
  (p-wait-info (:pointer (:struct semaphore-wait-info)))
  (timeout :uint64))

(defvkfun ("vkSignalSemaphore" signal-semaphore) checked-result
  (device device)
  (p-signal-info (:pointer (:struct semaphore-signal-info))))

(defvkfun ("vkSignalSemaphoreKHR" signal-semaphore-khr) checked-result
  (device device)
  (p-signal-info (:pointer (:struct semaphore-signal-info))))

(defvkextfun ("vkGetAndroidHardwareBufferPropertiesANDROID" get-android-hardware-buffer-properties-android) checked-result
  (device device)
  (buffer (:pointer a-hardware-buffer))
  (p-properties (:pointer (:struct android-hardware-buffer-properties-android))))

(defvkextfun ("vkGetMemoryAndroidHardwareBufferANDROID" get-memory-android-hardware-buffer-android) checked-result
  (device device)
  (p-info (:pointer (:struct memory-get-android-hardware-buffer-info-android)))
  (p-buffer (:pointer (:pointer a-hardware-buffer))))

(defvkfun ("vkCmdDrawIndirectCount" cmd-draw-indirect-count) :void
  (command-buffer command-buffer)
  (buffer buffer)
  (offset device-size)
  (count-buffer buffer)
  (count-buffer-offset device-size)
  (max-draw-count :uint32)
  (stride :uint32))

(defvkfun ("vkCmdDrawIndirectCountAMD" cmd-draw-indirect-count-amd) :void
  (command-buffer command-buffer)
  (buffer buffer)
  (offset device-size)
  (count-buffer buffer)
  (count-buffer-offset device-size)
  (max-draw-count :uint32)
  (stride :uint32))

(defvkfun ("vkCmdDrawIndirectCountKHR" cmd-draw-indirect-count-khr) :void
  (command-buffer command-buffer)
  (buffer buffer)
  (offset device-size)
  (count-buffer buffer)
  (count-buffer-offset device-size)
  (max-draw-count :uint32)
  (stride :uint32))

(defvkfun ("vkCmdDrawIndexedIndirectCount" cmd-draw-indexed-indirect-count) :void
  (command-buffer command-buffer)
  (buffer buffer)
  (offset device-size)
  (count-buffer buffer)
  (count-buffer-offset device-size)
  (max-draw-count :uint32)
  (stride :uint32))

(defvkfun ("vkCmdDrawIndexedIndirectCountAMD" cmd-draw-indexed-indirect-count-amd) :void
  (command-buffer command-buffer)
  (buffer buffer)
  (offset device-size)
  (count-buffer buffer)
  (count-buffer-offset device-size)
  (max-draw-count :uint32)
  (stride :uint32))

(defvkfun ("vkCmdDrawIndexedIndirectCountKHR" cmd-draw-indexed-indirect-count-khr) :void
  (command-buffer command-buffer)
  (buffer buffer)
  (offset device-size)
  (count-buffer buffer)
  (count-buffer-offset device-size)
  (max-draw-count :uint32)
  (stride :uint32))

(defvkextfun ("vkCmdSetCheckpointNV" cmd-set-checkpoint-nv) :void
  (command-buffer command-buffer)
  (p-checkpoint-marker (:pointer :void)))

(defvkextfun ("vkGetQueueCheckpointDataNV" get-queue-checkpoint-data-nv) :void
  (queue queue)
  (p-checkpoint-data-count (:pointer :uint32))
  (p-checkpoint-data (:pointer (:struct checkpoint-data-nv))))

(defvkextfun ("vkCmdBindTransformFeedbackBuffersEXT" cmd-bind-transform-feedback-buffers-ext) :void
  (command-buffer command-buffer)
  (first-binding :uint32)
  (binding-count :uint32)
  (p-buffers (:pointer buffer))
  (p-offsets (:pointer device-size))
  (p-sizes (:pointer device-size)))

(defvkextfun ("vkCmdBeginTransformFeedbackEXT" cmd-begin-transform-feedback-ext) :void
  (command-buffer command-buffer)
  (first-counter-buffer :uint32)
  (counter-buffer-count :uint32)
  (p-counter-buffers (:pointer buffer))
  (p-counter-buffer-offsets (:pointer device-size)))

(defvkextfun ("vkCmdEndTransformFeedbackEXT" cmd-end-transform-feedback-ext) :void
  (command-buffer command-buffer)
  (first-counter-buffer :uint32)
  (counter-buffer-count :uint32)
  (p-counter-buffers (:pointer buffer))
  (p-counter-buffer-offsets (:pointer device-size)))

(defvkextfun ("vkCmdBeginQueryIndexedEXT" cmd-begin-query-indexed-ext) :void
  (command-buffer command-buffer)
  (query-pool query-pool)
  (query :uint32)
  (flags query-control-flags)
  (index :uint32))

(defvkextfun ("vkCmdEndQueryIndexedEXT" cmd-end-query-indexed-ext) :void
  (command-buffer command-buffer)
  (query-pool query-pool)
  (query :uint32)
  (index :uint32))

(defvkextfun ("vkCmdDrawIndirectByteCountEXT" cmd-draw-indirect-byte-count-ext) :void
  (command-buffer command-buffer)
  (instance-count :uint32)
  (first-instance :uint32)
  (counter-buffer buffer)
  (counter-buffer-offset device-size)
  (counter-offset :uint32)
  (vertex-stride :uint32))

(defvkextfun ("vkCmdSetExclusiveScissorNV" cmd-set-exclusive-scissor-nv) :void
  (command-buffer command-buffer)
  (first-exclusive-scissor :uint32)
  (exclusive-scissor-count :uint32)
  (p-exclusive-scissors (:pointer (:struct rect-2d))))

(defvkextfun ("vkCmdBindShadingRateImageNV" cmd-bind-shading-rate-image-nv) :void
  (command-buffer command-buffer)
  (image-view image-view)
  (image-layout image-layout))

(defvkextfun ("vkCmdSetViewportShadingRatePaletteNV" cmd-set-viewport-shading-rate-palette-nv) :void
  (command-buffer command-buffer)
  (first-viewport :uint32)
  (viewport-count :uint32)
  (p-shading-rate-palettes (:pointer (:struct shading-rate-palette-nv))))

(defvkextfun ("vkCmdSetCoarseSampleOrderNV" cmd-set-coarse-sample-order-nv) :void
  (command-buffer command-buffer)
  (sample-order-type coarse-sample-order-type-nv)
  (custom-sample-order-count :uint32)
  (p-custom-sample-orders (:pointer (:struct coarse-sample-order-custom-nv))))

(defvkextfun ("vkCmdDrawMeshTasksNV" cmd-draw-mesh-tasks-nv) :void
  (command-buffer command-buffer)
  (task-count :uint32)
  (first-task :uint32))

(defvkextfun ("vkCmdDrawMeshTasksIndirectNV" cmd-draw-mesh-tasks-indirect-nv) :void
  (command-buffer command-buffer)
  (buffer buffer)
  (offset device-size)
  (draw-count :uint32)
  (stride :uint32))

(defvkextfun ("vkCmdDrawMeshTasksIndirectCountNV" cmd-draw-mesh-tasks-indirect-count-nv) :void
  (command-buffer command-buffer)
  (buffer buffer)
  (offset device-size)
  (count-buffer buffer)
  (count-buffer-offset device-size)
  (max-draw-count :uint32)
  (stride :uint32))

(defvkextfun ("vkCompileDeferredNV" compile-deferred-nv) checked-result
  (device device)
  (pipeline pipeline)
  (shader :uint32))

(defvkextfun ("vkCreateAccelerationStructureNV" create-acceleration-structure-nv) checked-result
  (device device)
  (p-create-info (:pointer (:struct acceleration-structure-create-info-nv)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-acceleration-structure (:pointer acceleration-structure-nv)))

(defvkextfun ("vkCmdBindInvocationMaskHUAWEI" cmd-bind-invocation-mask-huawei) :void
  (command-buffer command-buffer)
  (image-view image-view)
  (image-layout image-layout))

(defvkextfun ("vkDestroyAccelerationStructureKHR" destroy-acceleration-structure-khr) :void
  (device device)
  (acceleration-structure acceleration-structure-khr)
  (p-allocator (:pointer (:struct allocation-callbacks))))

(defvkextfun ("vkDestroyAccelerationStructureNV" destroy-acceleration-structure-nv) :void
  (device device)
  (acceleration-structure acceleration-structure-nv)
  (p-allocator (:pointer (:struct allocation-callbacks))))

(defvkextfun ("vkGetAccelerationStructureMemoryRequirementsNV" get-acceleration-structure-memory-requirements-nv) :void
  (device device)
  (p-info (:pointer (:struct acceleration-structure-memory-requirements-info-nv)))
  (p-memory-requirements (:pointer (:struct memory-requirements-2-khr))))

(defvkextfun ("vkBindAccelerationStructureMemoryNV" bind-acceleration-structure-memory-nv) checked-result
  (device device)
  (bind-info-count :uint32)
  (p-bind-infos (:pointer (:struct bind-acceleration-structure-memory-info-nv))))

(defvkextfun ("vkCmdCopyAccelerationStructureNV" cmd-copy-acceleration-structure-nv) :void
  (command-buffer command-buffer)
  (dst acceleration-structure-nv)
  (src acceleration-structure-nv)
  (mode copy-acceleration-structure-mode-khr))

(defvkextfun ("vkCmdCopyAccelerationStructureKHR" cmd-copy-acceleration-structure-khr) :void
  (command-buffer command-buffer)
  (p-info (:pointer (:struct copy-acceleration-structure-info-khr))))

(defvkextfun ("vkCopyAccelerationStructureKHR" copy-acceleration-structure-khr) checked-result
  (device device)
  (deferred-operation deferred-operation-khr)
  (p-info (:pointer (:struct copy-acceleration-structure-info-khr))))

(defvkextfun ("vkCmdCopyAccelerationStructureToMemoryKHR" cmd-copy-acceleration-structure-to-memory-khr) :void
  (command-buffer command-buffer)
  (p-info (:pointer (:struct copy-acceleration-structure-to-memory-info-khr))))

(defvkextfun ("vkCopyAccelerationStructureToMemoryKHR" copy-acceleration-structure-to-memory-khr) checked-result
  (device device)
  (deferred-operation deferred-operation-khr)
  (p-info (:pointer (:struct copy-acceleration-structure-to-memory-info-khr))))

(defvkextfun ("vkCmdCopyMemoryToAccelerationStructureKHR" cmd-copy-memory-to-acceleration-structure-khr) :void
  (command-buffer command-buffer)
  (p-info (:pointer (:struct copy-memory-to-acceleration-structure-info-khr))))

(defvkextfun ("vkCopyMemoryToAccelerationStructureKHR" copy-memory-to-acceleration-structure-khr) checked-result
  (device device)
  (deferred-operation deferred-operation-khr)
  (p-info (:pointer (:struct copy-memory-to-acceleration-structure-info-khr))))

(defvkextfun ("vkCmdWriteAccelerationStructuresPropertiesKHR" cmd-write-acceleration-structures-properties-khr) :void
  (command-buffer command-buffer)
  (acceleration-structure-count :uint32)
  (p-acceleration-structures (:pointer acceleration-structure-khr))
  (query-type query-type)
  (query-pool query-pool)
  (first-query :uint32))

(defvkextfun ("vkCmdWriteAccelerationStructuresPropertiesNV" cmd-write-acceleration-structures-properties-nv) :void
  (command-buffer command-buffer)
  (acceleration-structure-count :uint32)
  (p-acceleration-structures (:pointer acceleration-structure-nv))
  (query-type query-type)
  (query-pool query-pool)
  (first-query :uint32))

(defvkextfun ("vkCmdBuildAccelerationStructureNV" cmd-build-acceleration-structure-nv) :void
  (command-buffer command-buffer)
  (p-info (:pointer (:struct acceleration-structure-info-nv)))
  (instance-data buffer)
  (instance-offset device-size)
  (update bool32)
  (dst acceleration-structure-nv)
  (src acceleration-structure-nv)
  (scratch buffer)
  (scratch-offset device-size))

(defvkextfun ("vkWriteAccelerationStructuresPropertiesKHR" write-acceleration-structures-properties-khr) checked-result
  (device device)
  (acceleration-structure-count :uint32)
  (p-acceleration-structures (:pointer acceleration-structure-khr))
  (query-type query-type)
  (data-size :size)
  (p-data (:pointer :void))
  (stride :size))

(defvkextfun ("vkCmdTraceRaysKHR" cmd-trace-rays-khr) :void
  (command-buffer command-buffer)
  (p-raygen-shader-binding-table (:pointer (:struct strided-device-address-region-khr)))
  (p-miss-shader-binding-table (:pointer (:struct strided-device-address-region-khr)))
  (p-hit-shader-binding-table (:pointer (:struct strided-device-address-region-khr)))
  (p-callable-shader-binding-table (:pointer (:struct strided-device-address-region-khr)))
  (width :uint32)
  (height :uint32)
  (depth :uint32))

(defvkextfun ("vkCmdTraceRaysNV" cmd-trace-rays-nv) :void
  (command-buffer command-buffer)
  (raygen-shader-binding-table-buffer buffer)
  (raygen-shader-binding-offset device-size)
  (miss-shader-binding-table-buffer buffer)
  (miss-shader-binding-offset device-size)
  (miss-shader-binding-stride device-size)
  (hit-shader-binding-table-buffer buffer)
  (hit-shader-binding-offset device-size)
  (hit-shader-binding-stride device-size)
  (callable-shader-binding-table-buffer buffer)
  (callable-shader-binding-offset device-size)
  (callable-shader-binding-stride device-size)
  (width :uint32)
  (height :uint32)
  (depth :uint32))

(defvkextfun ("vkGetRayTracingShaderGroupHandlesKHR" get-ray-tracing-shader-group-handles-khr) checked-result
  (device device)
  (pipeline pipeline)
  (first-group :uint32)
  (group-count :uint32)
  (data-size :size)
  (p-data (:pointer :void)))

(defvkfun ("vkGetRayTracingShaderGroupHandlesNV" get-ray-tracing-shader-group-handles-nv) checked-result
  (device device)
  (pipeline pipeline)
  (first-group :uint32)
  (group-count :uint32)
  (data-size :size)
  (p-data (:pointer :void)))

(defvkextfun ("vkGetRayTracingCaptureReplayShaderGroupHandlesKHR" get-ray-tracing-capture-replay-shader-group-handles-khr) checked-result
  (device device)
  (pipeline pipeline)
  (first-group :uint32)
  (group-count :uint32)
  (data-size :size)
  (p-data (:pointer :void)))

(defvkextfun ("vkGetAccelerationStructureHandleNV" get-acceleration-structure-handle-nv) checked-result
  (device device)
  (acceleration-structure acceleration-structure-nv)
  (data-size :size)
  (p-data (:pointer :void)))

(defvkextfun ("vkCreateRayTracingPipelinesNV" create-ray-tracing-pipelines-nv) checked-result
  (device device)
  (pipeline-cache pipeline-cache)
  (create-info-count :uint32)
  (p-create-infos (:pointer (:struct ray-tracing-pipeline-create-info-nv)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-pipelines (:pointer pipeline)))

(defvkextfun ("vkCreateRayTracingPipelinesKHR" create-ray-tracing-pipelines-khr) checked-result
  (device device)
  (deferred-operation deferred-operation-khr)
  (pipeline-cache pipeline-cache)
  (create-info-count :uint32)
  (p-create-infos (:pointer (:struct ray-tracing-pipeline-create-info-khr)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-pipelines (:pointer pipeline)))

(defvkextfun ("vkGetPhysicalDeviceCooperativeMatrixPropertiesNV" get-physical-device-cooperative-matrix-properties-nv) checked-result
  (physical-device physical-device)
  (p-property-count (:pointer :uint32))
  (p-properties (:pointer (:struct cooperative-matrix-properties-nv))))

(defvkextfun ("vkCmdTraceRaysIndirectKHR" cmd-trace-rays-indirect-khr) :void
  (command-buffer command-buffer)
  (p-raygen-shader-binding-table (:pointer (:struct strided-device-address-region-khr)))
  (p-miss-shader-binding-table (:pointer (:struct strided-device-address-region-khr)))
  (p-hit-shader-binding-table (:pointer (:struct strided-device-address-region-khr)))
  (p-callable-shader-binding-table (:pointer (:struct strided-device-address-region-khr)))
  (indirect-device-address device-address))

(defvkextfun ("vkGetDeviceAccelerationStructureCompatibilityKHR" get-device-acceleration-structure-compatibility-khr) :void
  (device device)
  (p-version-info (:pointer (:struct acceleration-structure-version-info-khr)))
  (p-compatibility (:pointer acceleration-structure-compatibility-khr)))

(defvkextfun ("vkGetRayTracingShaderGroupStackSizeKHR" get-ray-tracing-shader-group-stack-size-khr) device-size
  (device device)
  (pipeline pipeline)
  (group :uint32)
  (group-shader shader-group-shader-khr))

(defvkextfun ("vkCmdSetRayTracingPipelineStackSizeKHR" cmd-set-ray-tracing-pipeline-stack-size-khr) :void
  (command-buffer command-buffer)
  (pipeline-stack-size :uint32))

(defvkextfun ("vkGetImageViewHandleNVX" get-image-view-handle-nvx) :uint32
  (device device)
  (p-info (:pointer (:struct image-view-handle-info-nvx))))

(defvkextfun ("vkGetImageViewAddressNVX" get-image-view-address-nvx) checked-result
  (device device)
  (image-view image-view)
  (p-properties (:pointer (:struct image-view-address-properties-nvx))))

(defvkextfun ("vkGetPhysicalDeviceSurfacePresentModes2EXT" get-physical-device-surface-present-modes-2-ext) checked-result
  (physical-device physical-device)
  (p-surface-info (:pointer (:struct physical-device-surface-info-2-khr)))
  (p-present-mode-count (:pointer :uint32))
  (p-present-modes (:pointer present-mode-khr)))

(defvkextfun ("vkGetDeviceGroupSurfacePresentModes2EXT" get-device-group-surface-present-modes-2-ext) checked-result
  (device device)
  (p-surface-info (:pointer (:struct physical-device-surface-info-2-khr)))
  (p-modes (:pointer device-group-present-mode-flags-khr)))

(defvkextfun ("vkAcquireFullScreenExclusiveModeEXT" acquire-full-screen-exclusive-mode-ext) checked-result
  (device device)
  (swapchain swapchain-khr))

(defvkextfun ("vkReleaseFullScreenExclusiveModeEXT" release-full-screen-exclusive-mode-ext) checked-result
  (device device)
  (swapchain swapchain-khr))

(defvkextfun ("vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR" enumerate-physical-device-queue-family-performance-query-counters-khr) checked-result
  (physical-device physical-device)
  (queue-family-index :uint32)
  (p-counter-count (:pointer :uint32))
  (p-counters (:pointer (:struct performance-counter-khr)))
  (p-counter-descriptions (:pointer (:struct performance-counter-description-khr))))

(defvkextfun ("vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR" get-physical-device-queue-family-performance-query-passes-khr) :void
  (physical-device physical-device)
  (p-performance-query-create-info (:pointer (:struct query-pool-performance-create-info-khr)))
  (p-num-passes (:pointer :uint32)))

(defvkextfun ("vkAcquireProfilingLockKHR" acquire-profiling-lock-khr) checked-result
  (device device)
  (p-info (:pointer (:struct acquire-profiling-lock-info-khr))))

(defvkextfun ("vkReleaseProfilingLockKHR" release-profiling-lock-khr) :void
  (device device))

(defvkextfun ("vkGetImageDrmFormatModifierPropertiesEXT" get-image-drm-format-modifier-properties-ext) checked-result
  (device device)
  (image image)
  (p-properties (:pointer (:struct image-drm-format-modifier-properties-ext))))

(defvkfun ("vkGetBufferOpaqueCaptureAddress" get-buffer-opaque-capture-address) :uint64
  (device device)
  (p-info (:pointer (:struct buffer-device-address-info))))

(defvkfun ("vkGetBufferOpaqueCaptureAddressKHR" get-buffer-opaque-capture-address-khr) :uint64
  (device device)
  (p-info (:pointer (:struct buffer-device-address-info))))

(defvkfun ("vkGetBufferDeviceAddress" get-buffer-device-address) device-address
  (device device)
  (p-info (:pointer (:struct buffer-device-address-info))))

(defvkfun ("vkGetBufferDeviceAddressEXT" get-buffer-device-address-ext) device-address
  (device device)
  (p-info (:pointer (:struct buffer-device-address-info))))

(defvkfun ("vkGetBufferDeviceAddressKHR" get-buffer-device-address-khr) device-address
  (device device)
  (p-info (:pointer (:struct buffer-device-address-info))))

(defvkfun ("vkCreateHeadlessSurfaceEXT" create-headless-surface-ext) checked-result
  (instance instance)
  (p-create-info (:pointer (:struct headless-surface-create-info-ext)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-surface (:pointer surface-khr)))

(defvkextfun ("vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV" get-physical-device-supported-framebuffer-mixed-samples-combinations-nv) checked-result
  (physical-device physical-device)
  (p-combination-count (:pointer :uint32))
  (p-combinations (:pointer (:struct framebuffer-mixed-samples-combination-nv))))

(defvkextfun ("vkInitializePerformanceApiINTEL" initialize-performance-api-intel) checked-result
  (device device)
  (p-initialize-info (:pointer (:struct initialize-performance-api-info-intel))))

(defvkextfun ("vkUninitializePerformanceApiINTEL" uninitialize-performance-api-intel) :void
  (device device))

(defvkextfun ("vkCmdSetPerformanceMarkerINTEL" cmd-set-performance-marker-intel) checked-result
  (command-buffer command-buffer)
  (p-marker-info (:pointer (:struct performance-marker-info-intel))))

(defvkextfun ("vkCmdSetPerformanceStreamMarkerINTEL" cmd-set-performance-stream-marker-intel) checked-result
  (command-buffer command-buffer)
  (p-marker-info (:pointer (:struct performance-stream-marker-info-intel))))

(defvkextfun ("vkCmdSetPerformanceOverrideINTEL" cmd-set-performance-override-intel) checked-result
  (command-buffer command-buffer)
  (p-override-info (:pointer (:struct performance-override-info-intel))))

(defvkextfun ("vkAcquirePerformanceConfigurationINTEL" acquire-performance-configuration-intel) checked-result
  (device device)
  (p-acquire-info (:pointer (:struct performance-configuration-acquire-info-intel)))
  (p-configuration (:pointer performance-configuration-intel)))

(defvkextfun ("vkReleasePerformanceConfigurationINTEL" release-performance-configuration-intel) checked-result
  (device device)
  (configuration performance-configuration-intel))

(defvkextfun ("vkQueueSetPerformanceConfigurationINTEL" queue-set-performance-configuration-intel) checked-result
  (queue queue)
  (configuration performance-configuration-intel))

(defvkextfun ("vkGetPerformanceParameterINTEL" get-performance-parameter-intel) checked-result
  (device device)
  (parameter performance-parameter-type-intel)
  (p-value (:pointer (:struct performance-value-intel))))

(defvkfun ("vkGetDeviceMemoryOpaqueCaptureAddress" get-device-memory-opaque-capture-address) :uint64
  (device device)
  (p-info (:pointer (:struct device-memory-opaque-capture-address-info))))

(defvkfun ("vkGetDeviceMemoryOpaqueCaptureAddressKHR" get-device-memory-opaque-capture-address-khr) :uint64
  (device device)
  (p-info (:pointer (:struct device-memory-opaque-capture-address-info))))

(defvkextfun ("vkGetPipelineExecutablePropertiesKHR" get-pipeline-executable-properties-khr) checked-result
  (device device)
  (p-pipeline-info (:pointer (:struct pipeline-info-khr)))
  (p-executable-count (:pointer :uint32))
  (p-properties (:pointer (:struct pipeline-executable-properties-khr))))

(defvkextfun ("vkGetPipelineExecutableStatisticsKHR" get-pipeline-executable-statistics-khr) checked-result
  (device device)
  (p-executable-info (:pointer (:struct pipeline-executable-info-khr)))
  (p-statistic-count (:pointer :uint32))
  (p-statistics (:pointer (:struct pipeline-executable-statistic-khr))))

(defvkextfun ("vkGetPipelineExecutableInternalRepresentationsKHR" get-pipeline-executable-internal-representations-khr) checked-result
  (device device)
  (p-executable-info (:pointer (:struct pipeline-executable-info-khr)))
  (p-internal-representation-count (:pointer :uint32))
  (p-internal-representations (:pointer (:struct pipeline-executable-internal-representation-khr))))

(defvkextfun ("vkCmdSetLineStippleEXT" cmd-set-line-stipple-ext) :void
  (command-buffer command-buffer)
  (line-stipple-factor :uint32)
  (line-stipple-pattern :uint16))

(defvkextfun ("vkGetPhysicalDeviceToolPropertiesEXT" get-physical-device-tool-properties-ext) checked-result
  (physical-device physical-device)
  (p-tool-count (:pointer :uint32))
  (p-tool-properties (:pointer (:struct physical-device-tool-properties-ext))))

(defvkextfun ("vkCreateAccelerationStructureKHR" create-acceleration-structure-khr) checked-result
  (device device)
  (p-create-info (:pointer (:struct acceleration-structure-create-info-khr)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-acceleration-structure (:pointer acceleration-structure-khr)))

(defvkextfun ("vkCmdBuildAccelerationStructuresKHR" cmd-build-acceleration-structures-khr) :void
  (command-buffer command-buffer)
  (info-count :uint32)
  (p-infos (:pointer (:struct acceleration-structure-build-geometry-info-khr)))
  (pp-build-range-infos (:pointer (:pointer (:struct acceleration-structure-build-range-info-khr)))))

(defvkextfun ("vkCmdBuildAccelerationStructuresIndirectKHR" cmd-build-acceleration-structures-indirect-khr) :void
  (command-buffer command-buffer)
  (info-count :uint32)
  (p-infos (:pointer (:struct acceleration-structure-build-geometry-info-khr)))
  (p-indirect-device-addresses (:pointer device-address))
  (p-indirect-strides (:pointer :uint32))
  (pp-max-primitive-counts (:pointer (:pointer :uint32))))

(defvkextfun ("vkBuildAccelerationStructuresKHR" build-acceleration-structures-khr) checked-result
  (device device)
  (deferred-operation deferred-operation-khr)
  (info-count :uint32)
  (p-infos (:pointer (:struct acceleration-structure-build-geometry-info-khr)))
  (pp-build-range-infos (:pointer (:pointer (:struct acceleration-structure-build-range-info-khr)))))

(defvkextfun ("vkGetAccelerationStructureDeviceAddressKHR" get-acceleration-structure-device-address-khr) device-address
  (device device)
  (p-info (:pointer (:struct acceleration-structure-device-address-info-khr))))

(defvkextfun ("vkCreateDeferredOperationKHR" create-deferred-operation-khr) checked-result
  (device device)
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-deferred-operation (:pointer deferred-operation-khr)))

(defvkextfun ("vkDestroyDeferredOperationKHR" destroy-deferred-operation-khr) :void
  (device device)
  (operation deferred-operation-khr)
  (p-allocator (:pointer (:struct allocation-callbacks))))

(defvkextfun ("vkGetDeferredOperationMaxConcurrencyKHR" get-deferred-operation-max-concurrency-khr) :uint32
  (device device)
  (operation deferred-operation-khr))

(defvkextfun ("vkGetDeferredOperationResultKHR" get-deferred-operation-result-khr) checked-result
  (device device)
  (operation deferred-operation-khr))

(defvkextfun ("vkDeferredOperationJoinKHR" deferred-operation-join-khr) checked-result
  (device device)
  (operation deferred-operation-khr))

(defvkextfun ("vkCmdSetCullModeEXT" cmd-set-cull-mode-ext) :void
  (command-buffer command-buffer)
  (cull-mode cull-mode-flags))

(defvkextfun ("vkCmdSetFrontFaceEXT" cmd-set-front-face-ext) :void
  (command-buffer command-buffer)
  (front-face front-face))

(defvkextfun ("vkCmdSetPrimitiveTopologyEXT" cmd-set-primitive-topology-ext) :void
  (command-buffer command-buffer)
  (primitive-topology primitive-topology))

(defvkextfun ("vkCmdSetViewportWithCountEXT" cmd-set-viewport-with-count-ext) :void
  (command-buffer command-buffer)
  (viewport-count :uint32)
  (p-viewports (:pointer (:struct viewport))))

(defvkextfun ("vkCmdSetScissorWithCountEXT" cmd-set-scissor-with-count-ext) :void
  (command-buffer command-buffer)
  (scissor-count :uint32)
  (p-scissors (:pointer (:struct rect-2d))))

(defvkextfun ("vkCmdBindVertexBuffers2EXT" cmd-bind-vertex-buffers-2-ext) :void
  (command-buffer command-buffer)
  (first-binding :uint32)
  (binding-count :uint32)
  (p-buffers (:pointer buffer))
  (p-offsets (:pointer device-size))
  (p-sizes (:pointer device-size))
  (p-strides (:pointer device-size)))

(defvkextfun ("vkCmdSetDepthTestEnableEXT" cmd-set-depth-test-enable-ext) :void
  (command-buffer command-buffer)
  (depth-test-enable bool32))

(defvkextfun ("vkCmdSetDepthWriteEnableEXT" cmd-set-depth-write-enable-ext) :void
  (command-buffer command-buffer)
  (depth-write-enable bool32))

(defvkextfun ("vkCmdSetDepthCompareOpEXT" cmd-set-depth-compare-op-ext) :void
  (command-buffer command-buffer)
  (depth-compare-op compare-op))

(defvkextfun ("vkCmdSetDepthBoundsTestEnableEXT" cmd-set-depth-bounds-test-enable-ext) :void
  (command-buffer command-buffer)
  (depth-bounds-test-enable bool32))

(defvkextfun ("vkCmdSetStencilTestEnableEXT" cmd-set-stencil-test-enable-ext) :void
  (command-buffer command-buffer)
  (stencil-test-enable bool32))

(defvkextfun ("vkCmdSetStencilOpEXT" cmd-set-stencil-op-ext) :void
  (command-buffer command-buffer)
  (face-mask stencil-face-flags)
  (fail-op stencil-op)
  (pass-op stencil-op)
  (depth-fail-op stencil-op)
  (compare-op compare-op))

(defvkextfun ("vkCmdSetPatchControlPointsEXT" cmd-set-patch-control-points-ext) :void
  (command-buffer command-buffer)
  (patch-control-points :uint32))

(defvkextfun ("vkCmdSetRasterizerDiscardEnableEXT" cmd-set-rasterizer-discard-enable-ext) :void
  (command-buffer command-buffer)
  (rasterizer-discard-enable bool32))

(defvkextfun ("vkCmdSetDepthBiasEnableEXT" cmd-set-depth-bias-enable-ext) :void
  (command-buffer command-buffer)
  (depth-bias-enable bool32))

(defvkextfun ("vkCmdSetLogicOpEXT" cmd-set-logic-op-ext) :void
  (command-buffer command-buffer)
  (logic-op logic-op))

(defvkextfun ("vkCmdSetPrimitiveRestartEnableEXT" cmd-set-primitive-restart-enable-ext) :void
  (command-buffer command-buffer)
  (primitive-restart-enable bool32))

(defvkextfun ("vkCreatePrivateDataSlotEXT" create-private-data-slot-ext) checked-result
  (device device)
  (p-create-info (:pointer (:struct private-data-slot-create-info-ext)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-private-data-slot (:pointer private-data-slot-ext)))

(defvkextfun ("vkDestroyPrivateDataSlotEXT" destroy-private-data-slot-ext) :void
  (device device)
  (private-data-slot private-data-slot-ext)
  (p-allocator (:pointer (:struct allocation-callbacks))))

(defvkextfun ("vkSetPrivateDataEXT" set-private-data-ext) checked-result
  (device device)
  (object-type object-type)
  (object-handle :uint64)
  (private-data-slot private-data-slot-ext)
  (data :uint64))

(defvkextfun ("vkGetPrivateDataEXT" get-private-data-ext) :void
  (device device)
  (object-type object-type)
  (object-handle :uint64)
  (private-data-slot private-data-slot-ext)
  (p-data (:pointer :uint64)))

(defvkextfun ("vkCmdCopyBuffer2KHR" cmd-copy-buffer-2-khr) :void
  (command-buffer command-buffer)
  (p-copy-buffer-info (:pointer (:struct copy-buffer-info-2-khr))))

(defvkextfun ("vkCmdCopyImage2KHR" cmd-copy-image-2-khr) :void
  (command-buffer command-buffer)
  (p-copy-image-info (:pointer (:struct copy-image-info-2-khr))))

(defvkextfun ("vkCmdBlitImage2KHR" cmd-blit-image-2-khr) :void
  (command-buffer command-buffer)
  (p-blit-image-info (:pointer (:struct blit-image-info-2-khr))))

(defvkextfun ("vkCmdCopyBufferToImage2KHR" cmd-copy-buffer-to-image-2-khr) :void
  (command-buffer command-buffer)
  (p-copy-buffer-to-image-info (:pointer (:struct copy-buffer-to-image-info-2-khr))))

(defvkextfun ("vkCmdCopyImageToBuffer2KHR" cmd-copy-image-to-buffer-2-khr) :void
  (command-buffer command-buffer)
  (p-copy-image-to-buffer-info (:pointer (:struct copy-image-to-buffer-info-2-khr))))

(defvkextfun ("vkCmdResolveImage2KHR" cmd-resolve-image-2-khr) :void
  (command-buffer command-buffer)
  (p-resolve-image-info (:pointer (:struct resolve-image-info-2-khr))))

(defvkextfun ("vkCmdSetFragmentShadingRateKHR" cmd-set-fragment-shading-rate-khr) :void
  (command-buffer command-buffer)
  (p-fragment-size (:pointer (:struct extent-2d)))
  (combiner-ops fragment-shading-rate-combiner-op-khr))

(defvkextfun ("vkGetPhysicalDeviceFragmentShadingRatesKHR" get-physical-device-fragment-shading-rates-khr) checked-result
  (physical-device physical-device)
  (p-fragment-shading-rate-count (:pointer :uint32))
  (p-fragment-shading-rates (:pointer (:struct physical-device-fragment-shading-rate-khr))))

(defvkextfun ("vkCmdSetFragmentShadingRateEnumNV" cmd-set-fragment-shading-rate-enum-nv) :void
  (command-buffer command-buffer)
  (shading-rate fragment-shading-rate-nv)
  (combiner-ops fragment-shading-rate-combiner-op-khr))

(defvkextfun ("vkGetAccelerationStructureBuildSizesKHR" get-acceleration-structure-build-sizes-khr) :void
  (device device)
  (build-type acceleration-structure-build-type-khr)
  (p-build-info (:pointer (:struct acceleration-structure-build-geometry-info-khr)))
  (p-max-primitive-counts (:pointer :uint32))
  (p-size-info (:pointer (:struct acceleration-structure-build-sizes-info-khr))))

(defvkextfun ("vkCmdSetVertexInputEXT" cmd-set-vertex-input-ext) :void
  (command-buffer command-buffer)
  (vertex-binding-description-count :uint32)
  (p-vertex-binding-descriptions (:pointer (:struct vertex-input-binding-description-2-ext)))
  (vertex-attribute-description-count :uint32)
  (p-vertex-attribute-descriptions (:pointer (:struct vertex-input-attribute-description-2-ext))))

(defvkextfun ("vkCmdSetColorWriteEnableEXT" cmd-set-color-write-enable-ext) :void
  (command-buffer command-buffer)
  (attachment-count :uint32)
  (p-color-write-enables (:pointer bool32)))

(defvkextfun ("vkCmdSetEvent2KHR" cmd-set-event-2-khr) :void
  (command-buffer command-buffer)
  (event event)
  (p-dependency-info (:pointer (:struct dependency-info-khr))))

(defvkextfun ("vkCmdResetEvent2KHR" cmd-reset-event-2-khr) :void
  (command-buffer command-buffer)
  (event event)
  (stage-mask pipeline-stage-flags-2-khr))

(defvkextfun ("vkCmdWaitEvents2KHR" cmd-wait-events-2-khr) :void
  (command-buffer command-buffer)
  (event-count :uint32)
  (p-events (:pointer event))
  (p-dependency-infos (:pointer (:struct dependency-info-khr))))

(defvkextfun ("vkCmdPipelineBarrier2KHR" cmd-pipeline-barrier-2-khr) :void
  (command-buffer command-buffer)
  (p-dependency-info (:pointer (:struct dependency-info-khr))))

(defvkextfun ("vkQueueSubmit2KHR" queue-submit-2-khr) checked-result
  (queue queue)
  (submit-count :uint32)
  (p-submits (:pointer (:struct submit-info-2-khr)))
  (fence fence))

(defvkextfun ("vkCmdWriteTimestamp2KHR" cmd-write-timestamp-2-khr) :void
  (command-buffer command-buffer)
  (stage pipeline-stage-flags-2-khr)
  (query-pool query-pool)
  (query :uint32))

(defvkextfun ("vkCmdWriteBufferMarker2AMD" cmd-write-buffer-marker-2-amd) :void
  (command-buffer command-buffer)
  (stage pipeline-stage-flags-2-khr)
  (dst-buffer buffer)
  (dst-offset device-size)
  (marker :uint32))

(defvkextfun ("vkGetQueueCheckpointData2NV" get-queue-checkpoint-data-2-nv) :void
  (queue queue)
  (p-checkpoint-data-count (:pointer :uint32))
  (p-checkpoint-data (:pointer (:struct checkpoint-data-2-nv))))

(defvkextfun ("vkGetPhysicalDeviceVideoCapabilitiesKHR" get-physical-device-video-capabilities-khr) checked-result
  (physical-device physical-device)
  (p-video-profile (:pointer (:struct video-profile-khr)))
  (p-capabilities (:pointer (:struct video-capabilities-khr))))

(defvkextfun ("vkGetPhysicalDeviceVideoFormatPropertiesKHR" get-physical-device-video-format-properties-khr) checked-result
  (physical-device physical-device)
  (p-video-format-info (:pointer (:struct physical-device-video-format-info-khr)))
  (p-video-format-property-count (:pointer :uint32))
  (p-video-format-properties (:pointer (:struct video-format-properties-khr))))

(defvkextfun ("vkCreateVideoSessionKHR" create-video-session-khr) checked-result
  (device device)
  (p-create-info (:pointer (:struct video-session-create-info-khr)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-video-session (:pointer video-session-khr)))

(defvkextfun ("vkDestroyVideoSessionKHR" destroy-video-session-khr) :void
  (device device)
  (video-session video-session-khr)
  (p-allocator (:pointer (:struct allocation-callbacks))))

(defvkextfun ("vkCreateVideoSessionParametersKHR" create-video-session-parameters-khr) checked-result
  (device device)
  (p-create-info (:pointer (:struct video-session-parameters-create-info-khr)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-video-session-parameters (:pointer video-session-parameters-khr)))

(defvkextfun ("vkUpdateVideoSessionParametersKHR" update-video-session-parameters-khr) checked-result
  (device device)
  (video-session-parameters video-session-parameters-khr)
  (p-update-info (:pointer (:struct video-session-parameters-update-info-khr))))

(defvkextfun ("vkDestroyVideoSessionParametersKHR" destroy-video-session-parameters-khr) :void
  (device device)
  (video-session-parameters video-session-parameters-khr)
  (p-allocator (:pointer (:struct allocation-callbacks))))

(defvkextfun ("vkGetVideoSessionMemoryRequirementsKHR" get-video-session-memory-requirements-khr) checked-result
  (device device)
  (video-session video-session-khr)
  (p-video-session-memory-requirements-count (:pointer :uint32))
  (p-video-session-memory-requirements (:pointer (:struct video-get-memory-properties-khr))))

(defvkextfun ("vkBindVideoSessionMemoryKHR" bind-video-session-memory-khr) checked-result
  (device device)
  (video-session video-session-khr)
  (video-session-bind-memory-count :uint32)
  (p-video-session-bind-memories (:pointer (:struct video-bind-memory-khr))))

(defvkextfun ("vkCmdDecodeVideoKHR" cmd-decode-video-khr) :void
  (command-buffer command-buffer)
  (p-frame-info (:pointer (:struct video-decode-info-khr))))

(defvkextfun ("vkCmdBeginVideoCodingKHR" cmd-begin-video-coding-khr) :void
  (command-buffer command-buffer)
  (p-begin-info (:pointer (:struct video-begin-coding-info-khr))))

(defvkextfun ("vkCmdControlVideoCodingKHR" cmd-control-video-coding-khr) :void
  (command-buffer command-buffer)
  (p-coding-control-info (:pointer (:struct video-coding-control-info-khr))))

(defvkextfun ("vkCmdEndVideoCodingKHR" cmd-end-video-coding-khr) :void
  (command-buffer command-buffer)
  (p-end-coding-info (:pointer (:struct video-end-coding-info-khr))))

(defvkextfun ("vkCmdEncodeVideoKHR" cmd-encode-video-khr) :void
  (command-buffer command-buffer)
  (p-encode-info (:pointer (:struct video-encode-info-khr))))

(defvkextfun ("vkCreateCuModuleNVX" create-cu-module-nvx) checked-result
  (device device)
  (p-create-info (:pointer (:struct cu-module-create-info-nvx)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-module (:pointer cu-module-nvx)))

(defvkextfun ("vkCreateCuFunctionNVX" create-cu-function-nvx) checked-result
  (device device)
  (p-create-info (:pointer (:struct cu-function-create-info-nvx)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-function (:pointer cu-function-nvx)))

(defvkextfun ("vkDestroyCuModuleNVX" destroy-cu-module-nvx) :void
  (device device)
  (module cu-module-nvx)
  (p-allocator (:pointer (:struct allocation-callbacks))))

(defvkextfun ("vkDestroyCuFunctionNVX" destroy-cu-function-nvx) :void
  (device device)
  (function-handle cu-function-nvx)
  (p-allocator (:pointer (:struct allocation-callbacks))))

(defvkextfun ("vkCmdCuLaunchKernelNVX" cmd-cu-launch-kernel-nvx) :void
  (command-buffer command-buffer)
  (p-launch-info (:pointer (:struct cu-launch-info-nvx))))

(defvkextfun ("vkSetDeviceMemoryPriorityEXT" set-device-memory-priority-ext) :void
  (device device)
  (memory device-memory)
  (priority :float))

(defvkextfun ("vkAcquireDrmDisplayEXT" acquire-drm-display-ext) checked-result
  (physical-device physical-device)
  (drm-fd :int32)
  (display display-khr))

(defvkextfun ("vkGetDrmDisplayEXT" get-drm-display-ext) checked-result
  (physical-device physical-device)
  (drm-fd :int32)
  (connector-id :uint32)
  (display (:pointer display-khr)))

(defvkextfun ("vkWaitForPresentKHR" wait-for-present-khr) checked-result
  (device device)
  (swapchain swapchain-khr)
  (present-id :uint64)
  (timeout :uint64))

(defvkextfun ("vkCreateBufferCollectionFUCHSIA" create-buffer-collection-fuchsia) checked-result
  (device device)
  (p-create-info (:pointer (:struct buffer-collection-create-info-fuchsia)))
  (p-allocator (:pointer (:struct allocation-callbacks)))
  (p-collection (:pointer buffer-collection-fuchsia)))

(defvkextfun ("vkSetBufferCollectionBufferConstraintsFUCHSIA" set-buffer-collection-buffer-constraints-fuchsia) checked-result
  (device device)
  (collection buffer-collection-fuchsia)
  (p-buffer-constraints-info (:pointer (:struct buffer-constraints-info-fuchsia))))

(defvkextfun ("vkSetBufferCollectionImageConstraintsFUCHSIA" set-buffer-collection-image-constraints-fuchsia) checked-result
  (device device)
  (collection buffer-collection-fuchsia)
  (p-image-constraints-info (:pointer (:struct image-constraints-info-fuchsia))))

(defvkextfun ("vkDestroyBufferCollectionFUCHSIA" destroy-buffer-collection-fuchsia) :void
  (device device)
  (collection buffer-collection-fuchsia)
  (p-allocator (:pointer (:struct allocation-callbacks))))

(defvkextfun ("vkGetBufferCollectionPropertiesFUCHSIA" get-buffer-collection-properties-fuchsia) checked-result
  (device device)
  (collection buffer-collection-fuchsia)
  (p-properties (:pointer (:struct buffer-collection-properties-fuchsia))))

(defvkextfun ("vkCmdBeginRenderingKHR" cmd-begin-rendering-khr) :void
  (command-buffer command-buffer)
  (p-rendering-info (:pointer (:struct rendering-info-khr))))

(defvkextfun ("vkCmdEndRenderingKHR" cmd-end-rendering-khr) :void
  (command-buffer command-buffer))

