;;; this file is automatically generated, do not edit
#||
Copyright 2015-2021 The Khronos Group Inc.

SPDX-License-Identifier: Apache-2.0 OR MIT
||#

(in-package :vk)

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-base-out-structure))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next)
       ,ptr
       (:struct %vk:base-out-structure))
    (make-instance 'vk:base-out-structure
                   :s-type %vk:s-type
                   :next %vk:p-next)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-base-in-structure))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next)
       ,ptr
       (:struct %vk:base-in-structure))
    (make-instance 'vk:base-in-structure
                   :s-type %vk:s-type
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk))))))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-offset-2d))
  `(cffi:with-foreign-slots
      ((%vk:x
        %vk:y)
       ,ptr
       (:struct %vk:offset-2d))
    (make-instance 'vk:offset-2d
                   :x %vk:x
                   :y %vk:y)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-offset-3d))
  `(cffi:with-foreign-slots
      ((%vk:x
        %vk:y
        %vk:z)
       ,ptr
       (:struct %vk:offset-3d))
    (make-instance 'vk:offset-3d
                   :x %vk:x
                   :y %vk:y
                   :z %vk:z)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-extent-2d))
  `(cffi:with-foreign-slots
      ((%vk:width
        %vk:height)
       ,ptr
       (:struct %vk:extent-2d))
    (make-instance 'vk:extent-2d
                   :width %vk:width
                   :height %vk:height)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-extent-3d))
  `(cffi:with-foreign-slots
      ((%vk:width
        %vk:height
        %vk:depth)
       ,ptr
       (:struct %vk:extent-3d))
    (make-instance 'vk:extent-3d
                   :width %vk:width
                   :height %vk:height
                   :depth %vk:depth)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-viewport))
  `(cffi:with-foreign-slots
      ((%vk:x
        %vk:y
        %vk:width
        %vk:height
        %vk:min-depth
        %vk:max-depth)
       ,ptr
       (:struct %vk:viewport))
    (make-instance 'vk:viewport
                   :x %vk:x
                   :y %vk:y
                   :width %vk:width
                   :height %vk:height
                   :min-depth %vk:min-depth
                   :max-depth %vk:max-depth)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-rect-2d))
  `(cffi:with-foreign-slots
      ((%vk:offset
        %vk:extent)
       ,ptr
       (:struct %vk:rect-2d))
    (make-instance 'vk:rect-2d
                   :offset %vk:offset
                   :extent %vk:extent)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-clear-rect))
  `(cffi:with-foreign-slots
      ((%vk:rect
        %vk:base-array-layer
        %vk:layer-count)
       ,ptr
       (:struct %vk:clear-rect))
    (make-instance 'vk:clear-rect
                   :rect %vk:rect
                   :base-array-layer %vk:base-array-layer
                   :layer-count %vk:layer-count)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-component-mapping))
  `(cffi:with-foreign-slots
      ((%vk:r
        %vk:g
        %vk:b
        %vk:a)
       ,ptr
       (:struct %vk:component-mapping))
    (make-instance 'vk:component-mapping
                   :r %vk:r
                   :g %vk:g
                   :b %vk:b
                   :a %vk:a)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-properties))
  `(cffi:with-foreign-slots
      ((%vk:api-version
        %vk:driver-version
        %vk:vendor-id
        %vk:device-id
        %vk:device-type
        %vk:device-name
        %vk:pipeline-cache-uuid
        %vk:limits
        %vk:sparse-properties)
       ,ptr
       (:struct %vk:physical-device-properties))
    (make-instance 'vk:physical-device-properties
                   :api-version %vk:api-version
                   :driver-version %vk:driver-version
                   :vendor-id %vk:vendor-id
                   :device-id %vk:device-id
                   :device-type %vk:device-type
                   :device-name (cffi:foreign-string-to-lisp %vk:device-name)
                   :pipeline-cache-uuid (cl:coerce (loop for i from 0 below 16 collect (cffi:mem-aref %vk:pipeline-cache-uuid :uint8 i)) 'vector)
                   :limits %vk:limits
                   :sparse-properties %vk:sparse-properties)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-extension-properties))
  `(cffi:with-foreign-slots
      ((%vk:extension-name
        %vk:spec-version)
       ,ptr
       (:struct %vk:extension-properties))
    (make-instance 'vk:extension-properties
                   :extension-name (cffi:foreign-string-to-lisp %vk:extension-name)
                   :spec-version %vk:spec-version)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-layer-properties))
  `(cffi:with-foreign-slots
      ((%vk:layer-name
        %vk:spec-version
        %vk:implementation-version
        %vk:description)
       ,ptr
       (:struct %vk:layer-properties))
    (make-instance 'vk:layer-properties
                   :layer-name (cffi:foreign-string-to-lisp %vk:layer-name)
                   :spec-version %vk:spec-version
                   :implementation-version %vk:implementation-version
                   :description (cffi:foreign-string-to-lisp %vk:description))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-application-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:p-application-name
        %vk:application-version
        %vk:p-engine-name
        %vk:engine-version
        %vk:api-version)
       ,ptr
       (:struct %vk:application-info))
    (make-instance 'vk:application-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :application-name %vk:p-application-name
                   :application-version %vk:application-version
                   :engine-name %vk:p-engine-name
                   :engine-version %vk:engine-version
                   :api-version %vk:api-version)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-allocation-callbacks))
  `(cffi:with-foreign-slots
      ((%vk:p-user-data
        %vk:pfn-allocation
        %vk:pfn-reallocation
        %vk:pfn-free
        %vk:pfn-internal-allocation
        %vk:pfn-internal-free)
       ,ptr
       (:struct %vk:allocation-callbacks))
    (make-instance 'vk:allocation-callbacks
                   :user-data %vk:p-user-data
                   :pfn-allocation %vk:pfn-allocation
                   :pfn-reallocation %vk:pfn-reallocation
                   :pfn-free %vk:pfn-free
                   :pfn-internal-allocation %vk:pfn-internal-allocation
                   :pfn-internal-free %vk:pfn-internal-free)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-device-queue-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:queue-family-index
        %vk:queue-count
        %vk:p-queue-priorities)
       ,ptr
       (:struct %vk:device-queue-create-info))
    (make-instance 'vk:device-queue-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :queue-family-index %vk:queue-family-index
                   :queue-priorities (loop for i from 0 below %vk:queue-count collect (cffi:mem-aref %vk:p-queue-priorities :float i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-device-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:queue-create-info-count
        %vk:p-queue-create-infos
        %vk:enabled-layer-count
        %vk:pp-enabled-layer-names
        %vk:enabled-extension-count
        %vk:pp-enabled-extension-names
        %vk:p-enabled-features)
       ,ptr
       (:struct %vk:device-create-info))
    (make-instance 'vk:device-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :queue-create-infos (loop for i from 0 below %vk:queue-create-info-count collect (cffi:mem-aref %vk:p-queue-create-infos '(:struct %vk:device-queue-create-info) i))
                   :enabled-layer-names (loop for i from 0 below %vk:enabled-layer-count collect (cffi:mem-aref %vk:pp-enabled-layer-names :string i))
                   :enabled-extension-names (loop for i from 0 below %vk:enabled-extension-count collect (cffi:mem-aref %vk:pp-enabled-extension-names :string i))
                   :enabled-features %vk:p-enabled-features)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-instance-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:p-application-info
        %vk:enabled-layer-count
        %vk:pp-enabled-layer-names
        %vk:enabled-extension-count
        %vk:pp-enabled-extension-names)
       ,ptr
       (:struct %vk:instance-create-info))
    (make-instance 'vk:instance-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :application-info %vk:p-application-info
                   :enabled-layer-names (loop for i from 0 below %vk:enabled-layer-count collect (cffi:mem-aref %vk:pp-enabled-layer-names :string i))
                   :enabled-extension-names (loop for i from 0 below %vk:enabled-extension-count collect (cffi:mem-aref %vk:pp-enabled-extension-names :string i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-queue-family-properties))
  `(cffi:with-foreign-slots
      ((%vk:queue-flags
        %vk:queue-count
        %vk:timestamp-valid-bits
        %vk:min-image-transfer-granularity)
       ,ptr
       (:struct %vk:queue-family-properties))
    (make-instance 'vk:queue-family-properties
                   :queue-flags %vk:queue-flags
                   :queue-count %vk:queue-count
                   :timestamp-valid-bits %vk:timestamp-valid-bits
                   :min-image-transfer-granularity %vk:min-image-transfer-granularity)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-memory-properties))
  `(cffi:with-foreign-slots
      ((%vk:memory-type-count
        %vk:memory-types
        %vk:memory-heap-count
        %vk:memory-heaps)
       ,ptr
       (:struct %vk:physical-device-memory-properties))
    (make-instance 'vk:physical-device-memory-properties
                   :memory-type-count %vk:memory-type-count
                   :memory-types (loop for i from 0 below 32 collect (cffi:mem-aref (cffi:foreign-slot-pointer ,ptr '(:struct %vk:physical-device-memory-properties) '%vk:memory-types) '(:struct %vk:memory-type) i))
                   :memory-heap-count %vk:memory-heap-count
                   :memory-heaps (loop for i from 0 below 16 collect (cffi:mem-aref (cffi:foreign-slot-pointer ,ptr '(:struct %vk:physical-device-memory-properties) '%vk:memory-heaps) '(:struct %vk:memory-heap) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-memory-allocate-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:allocation-size
        %vk:memory-type-index)
       ,ptr
       (:struct %vk:memory-allocate-info))
    (make-instance 'vk:memory-allocate-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :allocation-size %vk:allocation-size
                   :memory-type-index %vk:memory-type-index)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-memory-requirements))
  `(cffi:with-foreign-slots
      ((%vk:size
        %vk:alignment
        %vk:memory-type-bits)
       ,ptr
       (:struct %vk:memory-requirements))
    (make-instance 'vk:memory-requirements
                   :size %vk:size
                   :alignment %vk:alignment
                   :memory-type-bits %vk:memory-type-bits)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-sparse-image-format-properties))
  `(cffi:with-foreign-slots
      ((%vk:aspect-mask
        %vk:image-granularity
        %vk:flags)
       ,ptr
       (:struct %vk:sparse-image-format-properties))
    (make-instance 'vk:sparse-image-format-properties
                   :aspect-mask %vk:aspect-mask
                   :image-granularity %vk:image-granularity
                   :flags %vk:flags)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-sparse-image-memory-requirements))
  `(cffi:with-foreign-slots
      ((%vk:format-properties
        %vk:image-mip-tail-first-lod
        %vk:image-mip-tail-size
        %vk:image-mip-tail-offset
        %vk:image-mip-tail-stride)
       ,ptr
       (:struct %vk:sparse-image-memory-requirements))
    (make-instance 'vk:sparse-image-memory-requirements
                   :format-properties %vk:format-properties
                   :image-mip-tail-first-lod %vk:image-mip-tail-first-lod
                   :image-mip-tail-size %vk:image-mip-tail-size
                   :image-mip-tail-offset %vk:image-mip-tail-offset
                   :image-mip-tail-stride %vk:image-mip-tail-stride)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-memory-type))
  `(cffi:with-foreign-slots
      ((%vk:property-flags
        %vk:heap-index)
       ,ptr
       (:struct %vk:memory-type))
    (make-instance 'vk:memory-type
                   :property-flags %vk:property-flags
                   :heap-index %vk:heap-index)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-memory-heap))
  `(cffi:with-foreign-slots
      ((%vk:size
        %vk:flags)
       ,ptr
       (:struct %vk:memory-heap))
    (make-instance 'vk:memory-heap
                   :size %vk:size
                   :flags %vk:flags)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-mapped-memory-range))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:memory
        %vk:offset
        %vk:size)
       ,ptr
       (:struct %vk:mapped-memory-range))
    (make-instance 'vk:mapped-memory-range
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :memory (vk:make-device-memory-wrapper %vk:memory)
                   :offset %vk:offset
                   :size %vk:size)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-format-properties))
  `(cffi:with-foreign-slots
      ((%vk:linear-tiling-features
        %vk:optimal-tiling-features
        %vk:buffer-features)
       ,ptr
       (:struct %vk:format-properties))
    (make-instance 'vk:format-properties
                   :linear-tiling-features %vk:linear-tiling-features
                   :optimal-tiling-features %vk:optimal-tiling-features
                   :buffer-features %vk:buffer-features)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-image-format-properties))
  `(cffi:with-foreign-slots
      ((%vk:max-extent
        %vk:max-mip-levels
        %vk:max-array-layers
        %vk:sample-counts
        %vk:max-resource-size)
       ,ptr
       (:struct %vk:image-format-properties))
    (make-instance 'vk:image-format-properties
                   :max-extent %vk:max-extent
                   :max-mip-levels %vk:max-mip-levels
                   :max-array-layers %vk:max-array-layers
                   :sample-counts %vk:sample-counts
                   :max-resource-size %vk:max-resource-size)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-descriptor-buffer-info))
  `(cffi:with-foreign-slots
      ((%vk:buffer
        %vk:offset
        %vk:range)
       ,ptr
       (:struct %vk:descriptor-buffer-info))
    (make-instance 'vk:descriptor-buffer-info
                   :buffer (vk:make-buffer-wrapper %vk:buffer)
                   :offset %vk:offset
                   :range %vk:range)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-descriptor-image-info))
  `(cffi:with-foreign-slots
      ((%vk:sampler
        %vk:image-view
        %vk:image-layout)
       ,ptr
       (:struct %vk:descriptor-image-info))
    (make-instance 'vk:descriptor-image-info
                   :sampler (vk:make-sampler-wrapper %vk:sampler)
                   :image-view (vk:make-image-view-wrapper %vk:image-view)
                   :image-layout %vk:image-layout)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-write-descriptor-set))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:dst-set
        %vk:dst-binding
        %vk:dst-array-element
        %vk:descriptor-count
        %vk:descriptor-type
        %vk:p-image-info
        %vk:p-buffer-info
        %vk:p-texel-buffer-view)
       ,ptr
       (:struct %vk:write-descriptor-set))
    (make-instance 'vk:write-descriptor-set
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :dst-set (vk:make-descriptor-set-wrapper %vk:dst-set)
                   :dst-binding %vk:dst-binding
                   :dst-array-element %vk:dst-array-element
                   :descriptor-type %vk:descriptor-type
                   :image-info (loop for i from 0 below %vk:descriptor-count collect (cffi:mem-aref %vk:p-image-info '(:struct %vk:descriptor-image-info) i))
                   :buffer-info (loop for i from 0 below %vk:descriptor-count collect (cffi:mem-aref %vk:p-buffer-info '(:struct %vk:descriptor-buffer-info) i))
                   :texel-buffer-view (loop for i from 0 below %vk:descriptor-count collect (vk:make-buffer-view-wrapper (cffi:mem-aref %vk:p-texel-buffer-view '%vk:buffer-view i))))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-copy-descriptor-set))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:src-set
        %vk:src-binding
        %vk:src-array-element
        %vk:dst-set
        %vk:dst-binding
        %vk:dst-array-element
        %vk:descriptor-count)
       ,ptr
       (:struct %vk:copy-descriptor-set))
    (make-instance 'vk:copy-descriptor-set
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :src-set (vk:make-descriptor-set-wrapper %vk:src-set)
                   :src-binding %vk:src-binding
                   :src-array-element %vk:src-array-element
                   :dst-set (vk:make-descriptor-set-wrapper %vk:dst-set)
                   :dst-binding %vk:dst-binding
                   :dst-array-element %vk:dst-array-element
                   :descriptor-count %vk:descriptor-count)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-buffer-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:size
        %vk:usage
        %vk:sharing-mode
        %vk:queue-family-index-count
        %vk:p-queue-family-indices)
       ,ptr
       (:struct %vk:buffer-create-info))
    (make-instance 'vk:buffer-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :size %vk:size
                   :usage %vk:usage
                   :sharing-mode %vk:sharing-mode
                   :queue-family-indices (loop for i from 0 below %vk:queue-family-index-count collect (cffi:mem-aref %vk:p-queue-family-indices :uint32 i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-buffer-view-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:buffer
        %vk:format
        %vk:offset
        %vk:range)
       ,ptr
       (:struct %vk:buffer-view-create-info))
    (make-instance 'vk:buffer-view-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :buffer (vk:make-buffer-wrapper %vk:buffer)
                   :format %vk:format
                   :offset %vk:offset
                   :range %vk:range)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-image-subresource))
  `(cffi:with-foreign-slots
      ((%vk:aspect-mask
        %vk:mip-level
        %vk:array-layer)
       ,ptr
       (:struct %vk:image-subresource))
    (make-instance 'vk:image-subresource
                   :aspect-mask %vk:aspect-mask
                   :mip-level %vk:mip-level
                   :array-layer %vk:array-layer)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-image-subresource-layers))
  `(cffi:with-foreign-slots
      ((%vk:aspect-mask
        %vk:mip-level
        %vk:base-array-layer
        %vk:layer-count)
       ,ptr
       (:struct %vk:image-subresource-layers))
    (make-instance 'vk:image-subresource-layers
                   :aspect-mask %vk:aspect-mask
                   :mip-level %vk:mip-level
                   :base-array-layer %vk:base-array-layer
                   :layer-count %vk:layer-count)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-image-subresource-range))
  `(cffi:with-foreign-slots
      ((%vk:aspect-mask
        %vk:base-mip-level
        %vk:level-count
        %vk:base-array-layer
        %vk:layer-count)
       ,ptr
       (:struct %vk:image-subresource-range))
    (make-instance 'vk:image-subresource-range
                   :aspect-mask %vk:aspect-mask
                   :base-mip-level %vk:base-mip-level
                   :level-count %vk:level-count
                   :base-array-layer %vk:base-array-layer
                   :layer-count %vk:layer-count)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-memory-barrier))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:src-access-mask
        %vk:dst-access-mask)
       ,ptr
       (:struct %vk:memory-barrier))
    (make-instance 'vk:memory-barrier
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :src-access-mask %vk:src-access-mask
                   :dst-access-mask %vk:dst-access-mask)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-buffer-memory-barrier))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:src-access-mask
        %vk:dst-access-mask
        %vk:src-queue-family-index
        %vk:dst-queue-family-index
        %vk:buffer
        %vk:offset
        %vk:size)
       ,ptr
       (:struct %vk:buffer-memory-barrier))
    (make-instance 'vk:buffer-memory-barrier
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :src-access-mask %vk:src-access-mask
                   :dst-access-mask %vk:dst-access-mask
                   :src-queue-family-index %vk:src-queue-family-index
                   :dst-queue-family-index %vk:dst-queue-family-index
                   :buffer (vk:make-buffer-wrapper %vk:buffer)
                   :offset %vk:offset
                   :size %vk:size)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-image-memory-barrier))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:src-access-mask
        %vk:dst-access-mask
        %vk:old-layout
        %vk:new-layout
        %vk:src-queue-family-index
        %vk:dst-queue-family-index
        %vk:image
        %vk:subresource-range)
       ,ptr
       (:struct %vk:image-memory-barrier))
    (make-instance 'vk:image-memory-barrier
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :src-access-mask %vk:src-access-mask
                   :dst-access-mask %vk:dst-access-mask
                   :old-layout %vk:old-layout
                   :new-layout %vk:new-layout
                   :src-queue-family-index %vk:src-queue-family-index
                   :dst-queue-family-index %vk:dst-queue-family-index
                   :image (vk:make-image-wrapper %vk:image)
                   :subresource-range %vk:subresource-range)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-image-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:image-type
        %vk:format
        %vk:extent
        %vk:mip-levels
        %vk:array-layers
        %vk:samples
        %vk:tiling
        %vk:usage
        %vk:sharing-mode
        %vk:queue-family-index-count
        %vk:p-queue-family-indices
        %vk:initial-layout)
       ,ptr
       (:struct %vk:image-create-info))
    (make-instance 'vk:image-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :image-type %vk:image-type
                   :format %vk:format
                   :extent %vk:extent
                   :mip-levels %vk:mip-levels
                   :array-layers %vk:array-layers
                   :samples %vk:samples
                   :tiling %vk:tiling
                   :usage %vk:usage
                   :sharing-mode %vk:sharing-mode
                   :queue-family-indices (loop for i from 0 below %vk:queue-family-index-count collect (cffi:mem-aref %vk:p-queue-family-indices :uint32 i))
                   :initial-layout %vk:initial-layout)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-subresource-layout))
  `(cffi:with-foreign-slots
      ((%vk:offset
        %vk:size
        %vk:row-pitch
        %vk:array-pitch
        %vk:depth-pitch)
       ,ptr
       (:struct %vk:subresource-layout))
    (make-instance 'vk:subresource-layout
                   :offset %vk:offset
                   :size %vk:size
                   :row-pitch %vk:row-pitch
                   :array-pitch %vk:array-pitch
                   :depth-pitch %vk:depth-pitch)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-image-view-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:image
        %vk:view-type
        %vk:format
        %vk:components
        %vk:subresource-range)
       ,ptr
       (:struct %vk:image-view-create-info))
    (make-instance 'vk:image-view-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :image (vk:make-image-wrapper %vk:image)
                   :view-type %vk:view-type
                   :format %vk:format
                   :components %vk:components
                   :subresource-range %vk:subresource-range)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-buffer-copy))
  `(cffi:with-foreign-slots
      ((%vk:src-offset
        %vk:dst-offset
        %vk:size)
       ,ptr
       (:struct %vk:buffer-copy))
    (make-instance 'vk:buffer-copy
                   :src-offset %vk:src-offset
                   :dst-offset %vk:dst-offset
                   :size %vk:size)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-sparse-memory-bind))
  `(cffi:with-foreign-slots
      ((%vk:resource-offset
        %vk:size
        %vk:memory
        %vk:memory-offset
        %vk:flags)
       ,ptr
       (:struct %vk:sparse-memory-bind))
    (make-instance 'vk:sparse-memory-bind
                   :resource-offset %vk:resource-offset
                   :size %vk:size
                   :memory (vk:make-device-memory-wrapper %vk:memory)
                   :memory-offset %vk:memory-offset
                   :flags %vk:flags)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-sparse-image-memory-bind))
  `(cffi:with-foreign-slots
      ((%vk:subresource
        %vk:offset
        %vk:extent
        %vk:memory
        %vk:memory-offset
        %vk:flags)
       ,ptr
       (:struct %vk:sparse-image-memory-bind))
    (make-instance 'vk:sparse-image-memory-bind
                   :subresource %vk:subresource
                   :offset %vk:offset
                   :extent %vk:extent
                   :memory (vk:make-device-memory-wrapper %vk:memory)
                   :memory-offset %vk:memory-offset
                   :flags %vk:flags)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-sparse-buffer-memory-bind-info))
  `(cffi:with-foreign-slots
      ((%vk:buffer
        %vk:bind-count
        %vk:p-binds)
       ,ptr
       (:struct %vk:sparse-buffer-memory-bind-info))
    (make-instance 'vk:sparse-buffer-memory-bind-info
                   :buffer (vk:make-buffer-wrapper %vk:buffer)
                   :binds (loop for i from 0 below %vk:bind-count collect (cffi:mem-aref %vk:p-binds '(:struct %vk:sparse-memory-bind) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-sparse-image-opaque-memory-bind-info))
  `(cffi:with-foreign-slots
      ((%vk:image
        %vk:bind-count
        %vk:p-binds)
       ,ptr
       (:struct %vk:sparse-image-opaque-memory-bind-info))
    (make-instance 'vk:sparse-image-opaque-memory-bind-info
                   :image (vk:make-image-wrapper %vk:image)
                   :binds (loop for i from 0 below %vk:bind-count collect (cffi:mem-aref %vk:p-binds '(:struct %vk:sparse-memory-bind) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-sparse-image-memory-bind-info))
  `(cffi:with-foreign-slots
      ((%vk:image
        %vk:bind-count
        %vk:p-binds)
       ,ptr
       (:struct %vk:sparse-image-memory-bind-info))
    (make-instance 'vk:sparse-image-memory-bind-info
                   :image (vk:make-image-wrapper %vk:image)
                   :binds (loop for i from 0 below %vk:bind-count collect (cffi:mem-aref %vk:p-binds '(:struct %vk:sparse-image-memory-bind) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-bind-sparse-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:wait-semaphore-count
        %vk:p-wait-semaphores
        %vk:buffer-bind-count
        %vk:p-buffer-binds
        %vk:image-opaque-bind-count
        %vk:p-image-opaque-binds
        %vk:image-bind-count
        %vk:p-image-binds
        %vk:signal-semaphore-count
        %vk:p-signal-semaphores)
       ,ptr
       (:struct %vk:bind-sparse-info))
    (make-instance 'vk:bind-sparse-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :wait-semaphores (loop for i from 0 below %vk:wait-semaphore-count collect (vk:make-semaphore-wrapper (cffi:mem-aref %vk:p-wait-semaphores '%vk:semaphore i)))
                   :buffer-binds (loop for i from 0 below %vk:buffer-bind-count collect (cffi:mem-aref %vk:p-buffer-binds '(:struct %vk:sparse-buffer-memory-bind-info) i))
                   :image-opaque-binds (loop for i from 0 below %vk:image-opaque-bind-count collect (cffi:mem-aref %vk:p-image-opaque-binds '(:struct %vk:sparse-image-opaque-memory-bind-info) i))
                   :image-binds (loop for i from 0 below %vk:image-bind-count collect (cffi:mem-aref %vk:p-image-binds '(:struct %vk:sparse-image-memory-bind-info) i))
                   :signal-semaphores (loop for i from 0 below %vk:signal-semaphore-count collect (vk:make-semaphore-wrapper (cffi:mem-aref %vk:p-signal-semaphores '%vk:semaphore i))))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-image-copy))
  `(cffi:with-foreign-slots
      ((%vk:src-subresource
        %vk:src-offset
        %vk:dst-subresource
        %vk:dst-offset
        %vk:extent)
       ,ptr
       (:struct %vk:image-copy))
    (make-instance 'vk:image-copy
                   :src-subresource %vk:src-subresource
                   :src-offset %vk:src-offset
                   :dst-subresource %vk:dst-subresource
                   :dst-offset %vk:dst-offset
                   :extent %vk:extent)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-image-blit))
  `(cffi:with-foreign-slots
      ((%vk:src-subresource
        %vk:src-offsets
        %vk:dst-subresource
        %vk:dst-offsets)
       ,ptr
       (:struct %vk:image-blit))
    (make-instance 'vk:image-blit
                   :src-subresource %vk:src-subresource
                   :src-offsets (loop for i from 0 below 2 collect (cffi:mem-aref (cffi:foreign-slot-pointer ,ptr '(:struct %vk:image-blit) '%vk:src-offsets) '(:struct %vk:offset-3d) i))
                   :dst-subresource %vk:dst-subresource
                   :dst-offsets (loop for i from 0 below 2 collect (cffi:mem-aref (cffi:foreign-slot-pointer ,ptr '(:struct %vk:image-blit) '%vk:dst-offsets) '(:struct %vk:offset-3d) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-buffer-image-copy))
  `(cffi:with-foreign-slots
      ((%vk:buffer-offset
        %vk:buffer-row-length
        %vk:buffer-image-height
        %vk:image-subresource
        %vk:image-offset
        %vk:image-extent)
       ,ptr
       (:struct %vk:buffer-image-copy))
    (make-instance 'vk:buffer-image-copy
                   :buffer-offset %vk:buffer-offset
                   :buffer-row-length %vk:buffer-row-length
                   :buffer-image-height %vk:buffer-image-height
                   :image-subresource %vk:image-subresource
                   :image-offset %vk:image-offset
                   :image-extent %vk:image-extent)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-image-resolve))
  `(cffi:with-foreign-slots
      ((%vk:src-subresource
        %vk:src-offset
        %vk:dst-subresource
        %vk:dst-offset
        %vk:extent)
       ,ptr
       (:struct %vk:image-resolve))
    (make-instance 'vk:image-resolve
                   :src-subresource %vk:src-subresource
                   :src-offset %vk:src-offset
                   :dst-subresource %vk:dst-subresource
                   :dst-offset %vk:dst-offset
                   :extent %vk:extent)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-shader-module-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:code-size
        %vk:p-code)
       ,ptr
       (:struct %vk:shader-module-create-info))
    (make-instance 'vk:shader-module-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :code (loop for i from 0 below %vk:code-size collect (cffi:mem-aref %vk:p-code :uint32 i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-descriptor-set-layout-binding))
  `(cffi:with-foreign-slots
      ((%vk:binding
        %vk:descriptor-type
        %vk:descriptor-count
        %vk:stage-flags
        %vk:p-immutable-samplers)
       ,ptr
       (:struct %vk:descriptor-set-layout-binding))
    (make-instance 'vk:descriptor-set-layout-binding
                   :binding %vk:binding
                   :descriptor-type %vk:descriptor-type
                   :descriptor-count %vk:descriptor-count
                   :stage-flags %vk:stage-flags
                   :immutable-samplers (vk:make-sampler-wrapper %vk:p-immutable-samplers))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-descriptor-set-layout-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:binding-count
        %vk:p-bindings)
       ,ptr
       (:struct %vk:descriptor-set-layout-create-info))
    (make-instance 'vk:descriptor-set-layout-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :bindings (loop for i from 0 below %vk:binding-count collect (cffi:mem-aref %vk:p-bindings '(:struct %vk:descriptor-set-layout-binding) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-descriptor-pool-size))
  `(cffi:with-foreign-slots
      ((%vk:type
        %vk:descriptor-count)
       ,ptr
       (:struct %vk:descriptor-pool-size))
    (make-instance 'vk:descriptor-pool-size
                   :type %vk:type
                   :descriptor-count %vk:descriptor-count)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-descriptor-pool-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:max-sets
        %vk:pool-size-count
        %vk:p-pool-sizes)
       ,ptr
       (:struct %vk:descriptor-pool-create-info))
    (make-instance 'vk:descriptor-pool-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :max-sets %vk:max-sets
                   :pool-sizes (loop for i from 0 below %vk:pool-size-count collect (cffi:mem-aref %vk:p-pool-sizes '(:struct %vk:descriptor-pool-size) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-descriptor-set-allocate-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:descriptor-pool
        %vk:descriptor-set-count
        %vk:p-set-layouts)
       ,ptr
       (:struct %vk:descriptor-set-allocate-info))
    (make-instance 'vk:descriptor-set-allocate-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :descriptor-pool (vk:make-descriptor-pool-wrapper %vk:descriptor-pool)
                   :set-layouts (loop for i from 0 below %vk:descriptor-set-count collect (vk:make-descriptor-set-layout-wrapper (cffi:mem-aref %vk:p-set-layouts '%vk:descriptor-set-layout i))))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-specialization-map-entry))
  `(cffi:with-foreign-slots
      ((%vk:constant-id
        %vk:offset
        %vk:size)
       ,ptr
       (:struct %vk:specialization-map-entry))
    (make-instance 'vk:specialization-map-entry
                   :constant-id %vk:constant-id
                   :offset %vk:offset
                   :size %vk:size)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-specialization-info))
  `(cffi:with-foreign-slots
      ((%vk:map-entry-count
        %vk:p-map-entries
        %vk:data-size
        %vk:p-data)
       ,ptr
       (:struct %vk:specialization-info))
    (make-instance 'vk:specialization-info
                   :map-entries (loop for i from 0 below %vk:map-entry-count collect (cffi:mem-aref %vk:p-map-entries '(:struct %vk:specialization-map-entry) i))
                   :data-size %vk:data-size
                   :data %vk:p-data)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-shader-stage-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:stage
        %vk:module
        %vk:p-name
        %vk:p-specialization-info)
       ,ptr
       (:struct %vk:pipeline-shader-stage-create-info))
    (make-instance 'vk:pipeline-shader-stage-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :stage %vk:stage
                   :module (vk:make-shader-module-wrapper %vk:module)
                   :name %vk:p-name
                   :specialization-info %vk:p-specialization-info)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-compute-pipeline-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:stage
        %vk:layout
        %vk:base-pipeline-handle
        %vk:base-pipeline-index)
       ,ptr
       (:struct %vk:compute-pipeline-create-info))
    (make-instance 'vk:compute-pipeline-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :stage %vk:stage
                   :layout (vk:make-pipeline-layout-wrapper %vk:layout)
                   :base-pipeline-handle (vk:make-pipeline-wrapper %vk:base-pipeline-handle)
                   :base-pipeline-index %vk:base-pipeline-index)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-vertex-input-binding-description))
  `(cffi:with-foreign-slots
      ((%vk:binding
        %vk:stride
        %vk:input-rate)
       ,ptr
       (:struct %vk:vertex-input-binding-description))
    (make-instance 'vk:vertex-input-binding-description
                   :binding %vk:binding
                   :stride %vk:stride
                   :input-rate %vk:input-rate)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-vertex-input-attribute-description))
  `(cffi:with-foreign-slots
      ((%vk:location
        %vk:binding
        %vk:format
        %vk:offset)
       ,ptr
       (:struct %vk:vertex-input-attribute-description))
    (make-instance 'vk:vertex-input-attribute-description
                   :location %vk:location
                   :binding %vk:binding
                   :format %vk:format
                   :offset %vk:offset)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-vertex-input-state-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:vertex-binding-description-count
        %vk:p-vertex-binding-descriptions
        %vk:vertex-attribute-description-count
        %vk:p-vertex-attribute-descriptions)
       ,ptr
       (:struct %vk:pipeline-vertex-input-state-create-info))
    (make-instance 'vk:pipeline-vertex-input-state-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :vertex-binding-descriptions (loop for i from 0 below %vk:vertex-binding-description-count collect (cffi:mem-aref %vk:p-vertex-binding-descriptions '(:struct %vk:vertex-input-binding-description) i))
                   :vertex-attribute-descriptions (loop for i from 0 below %vk:vertex-attribute-description-count collect (cffi:mem-aref %vk:p-vertex-attribute-descriptions '(:struct %vk:vertex-input-attribute-description) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-input-assembly-state-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:topology
        %vk:primitive-restart-enable)
       ,ptr
       (:struct %vk:pipeline-input-assembly-state-create-info))
    (make-instance 'vk:pipeline-input-assembly-state-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :topology %vk:topology
                   :primitive-restart-enable %vk:primitive-restart-enable)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-tessellation-state-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:patch-control-points)
       ,ptr
       (:struct %vk:pipeline-tessellation-state-create-info))
    (make-instance 'vk:pipeline-tessellation-state-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :patch-control-points %vk:patch-control-points)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-viewport-state-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:viewport-count
        %vk:p-viewports
        %vk:scissor-count
        %vk:p-scissors)
       ,ptr
       (:struct %vk:pipeline-viewport-state-create-info))
    (make-instance 'vk:pipeline-viewport-state-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :viewports (loop for i from 0 below %vk:viewport-count collect (cffi:mem-aref %vk:p-viewports '(:struct %vk:viewport) i))
                   :scissors (loop for i from 0 below %vk:scissor-count collect (cffi:mem-aref %vk:p-scissors '(:struct %vk:rect-2d) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-rasterization-state-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:depth-clamp-enable
        %vk:rasterizer-discard-enable
        %vk:polygon-mode
        %vk:cull-mode
        %vk:front-face
        %vk:depth-bias-enable
        %vk:depth-bias-constant-factor
        %vk:depth-bias-clamp
        %vk:depth-bias-slope-factor
        %vk:line-width)
       ,ptr
       (:struct %vk:pipeline-rasterization-state-create-info))
    (make-instance 'vk:pipeline-rasterization-state-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :depth-clamp-enable %vk:depth-clamp-enable
                   :rasterizer-discard-enable %vk:rasterizer-discard-enable
                   :polygon-mode %vk:polygon-mode
                   :cull-mode %vk:cull-mode
                   :front-face %vk:front-face
                   :depth-bias-enable %vk:depth-bias-enable
                   :depth-bias-constant-factor %vk:depth-bias-constant-factor
                   :depth-bias-clamp %vk:depth-bias-clamp
                   :depth-bias-slope-factor %vk:depth-bias-slope-factor
                   :line-width %vk:line-width)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-multisample-state-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:rasterization-samples
        %vk:sample-shading-enable
        %vk:min-sample-shading
        %vk:p-sample-mask
        %vk:alpha-to-coverage-enable
        %vk:alpha-to-one-enable)
       ,ptr
       (:struct %vk:pipeline-multisample-state-create-info))
    (make-instance 'vk:pipeline-multisample-state-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :rasterization-samples %vk:rasterization-samples
                   :sample-shading-enable %vk:sample-shading-enable
                   :min-sample-shading %vk:min-sample-shading
                   :sample-mask %vk:p-sample-mask
                   :alpha-to-coverage-enable %vk:alpha-to-coverage-enable
                   :alpha-to-one-enable %vk:alpha-to-one-enable)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-color-blend-attachment-state))
  `(cffi:with-foreign-slots
      ((%vk:blend-enable
        %vk:src-color-blend-factor
        %vk:dst-color-blend-factor
        %vk:color-blend-op
        %vk:src-alpha-blend-factor
        %vk:dst-alpha-blend-factor
        %vk:alpha-blend-op
        %vk:color-write-mask)
       ,ptr
       (:struct %vk:pipeline-color-blend-attachment-state))
    (make-instance 'vk:pipeline-color-blend-attachment-state
                   :blend-enable %vk:blend-enable
                   :src-color-blend-factor %vk:src-color-blend-factor
                   :dst-color-blend-factor %vk:dst-color-blend-factor
                   :color-blend-op %vk:color-blend-op
                   :src-alpha-blend-factor %vk:src-alpha-blend-factor
                   :dst-alpha-blend-factor %vk:dst-alpha-blend-factor
                   :alpha-blend-op %vk:alpha-blend-op
                   :color-write-mask %vk:color-write-mask)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-color-blend-state-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:logic-op-enable
        %vk:logic-op
        %vk:attachment-count
        %vk:p-attachments
        %vk:blend-constants)
       ,ptr
       (:struct %vk:pipeline-color-blend-state-create-info))
    (make-instance 'vk:pipeline-color-blend-state-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :logic-op-enable %vk:logic-op-enable
                   :logic-op %vk:logic-op
                   :attachments (loop for i from 0 below %vk:attachment-count collect (cffi:mem-aref %vk:p-attachments '(:struct %vk:pipeline-color-blend-attachment-state) i))
                   :blend-constants (cl:coerce (loop for i from 0 below 4 collect (cffi:mem-aref %vk:blend-constants :float i)) 'vector))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-dynamic-state-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:dynamic-state-count
        %vk:p-dynamic-states)
       ,ptr
       (:struct %vk:pipeline-dynamic-state-create-info))
    (make-instance 'vk:pipeline-dynamic-state-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :dynamic-states (loop for i from 0 below %vk:dynamic-state-count collect (cffi:mem-aref %vk:p-dynamic-states '%vk:dynamic-state i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-stencil-op-state))
  `(cffi:with-foreign-slots
      ((%vk:fail-op
        %vk:pass-op
        %vk:depth-fail-op
        %vk:compare-op
        %vk:compare-mask
        %vk:write-mask
        %vk:reference)
       ,ptr
       (:struct %vk:stencil-op-state))
    (make-instance 'vk:stencil-op-state
                   :fail-op %vk:fail-op
                   :pass-op %vk:pass-op
                   :depth-fail-op %vk:depth-fail-op
                   :compare-op %vk:compare-op
                   :compare-mask %vk:compare-mask
                   :write-mask %vk:write-mask
                   :reference %vk:reference)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-depth-stencil-state-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:depth-test-enable
        %vk:depth-write-enable
        %vk:depth-compare-op
        %vk:depth-bounds-test-enable
        %vk:stencil-test-enable
        %vk:front
        %vk:back
        %vk:min-depth-bounds
        %vk:max-depth-bounds)
       ,ptr
       (:struct %vk:pipeline-depth-stencil-state-create-info))
    (make-instance 'vk:pipeline-depth-stencil-state-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :depth-test-enable %vk:depth-test-enable
                   :depth-write-enable %vk:depth-write-enable
                   :depth-compare-op %vk:depth-compare-op
                   :depth-bounds-test-enable %vk:depth-bounds-test-enable
                   :stencil-test-enable %vk:stencil-test-enable
                   :front %vk:front
                   :back %vk:back
                   :min-depth-bounds %vk:min-depth-bounds
                   :max-depth-bounds %vk:max-depth-bounds)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-graphics-pipeline-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:stage-count
        %vk:p-stages
        %vk:p-vertex-input-state
        %vk:p-input-assembly-state
        %vk:p-tessellation-state
        %vk:p-viewport-state
        %vk:p-rasterization-state
        %vk:p-multisample-state
        %vk:p-depth-stencil-state
        %vk:p-color-blend-state
        %vk:p-dynamic-state
        %vk:layout
        %vk:render-pass
        %vk:subpass
        %vk:base-pipeline-handle
        %vk:base-pipeline-index)
       ,ptr
       (:struct %vk:graphics-pipeline-create-info))
    (make-instance 'vk:graphics-pipeline-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :stages (loop for i from 0 below %vk:stage-count collect (cffi:mem-aref %vk:p-stages '(:struct %vk:pipeline-shader-stage-create-info) i))
                   :vertex-input-state %vk:p-vertex-input-state
                   :input-assembly-state %vk:p-input-assembly-state
                   :tessellation-state %vk:p-tessellation-state
                   :viewport-state %vk:p-viewport-state
                   :rasterization-state %vk:p-rasterization-state
                   :multisample-state %vk:p-multisample-state
                   :depth-stencil-state %vk:p-depth-stencil-state
                   :color-blend-state %vk:p-color-blend-state
                   :dynamic-state %vk:p-dynamic-state
                   :layout (vk:make-pipeline-layout-wrapper %vk:layout)
                   :render-pass (vk:make-render-pass-wrapper %vk:render-pass)
                   :subpass %vk:subpass
                   :base-pipeline-handle (vk:make-pipeline-wrapper %vk:base-pipeline-handle)
                   :base-pipeline-index %vk:base-pipeline-index)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-cache-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:initial-data-size
        %vk:p-initial-data)
       ,ptr
       (:struct %vk:pipeline-cache-create-info))
    (make-instance 'vk:pipeline-cache-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :initial-data-size %vk:initial-data-size
                   :initial-data %vk:p-initial-data)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-cache-header-version-one))
  `(cffi:with-foreign-slots
      ((%vk:header-size
        %vk:header-version
        %vk:vendor-id
        %vk:device-id
        %vk:pipeline-cache-uuid)
       ,ptr
       (:struct %vk:pipeline-cache-header-version-one))
    (make-instance 'vk:pipeline-cache-header-version-one
                   :header-size %vk:header-size
                   :header-version %vk:header-version
                   :vendor-id %vk:vendor-id
                   :device-id %vk:device-id
                   :pipeline-cache-uuid (cl:coerce (loop for i from 0 below 16 collect (cffi:mem-aref %vk:pipeline-cache-uuid :uint8 i)) 'vector))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-push-constant-range))
  `(cffi:with-foreign-slots
      ((%vk:stage-flags
        %vk:offset
        %vk:size)
       ,ptr
       (:struct %vk:push-constant-range))
    (make-instance 'vk:push-constant-range
                   :stage-flags %vk:stage-flags
                   :offset %vk:offset
                   :size %vk:size)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-layout-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:set-layout-count
        %vk:p-set-layouts
        %vk:push-constant-range-count
        %vk:p-push-constant-ranges)
       ,ptr
       (:struct %vk:pipeline-layout-create-info))
    (make-instance 'vk:pipeline-layout-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :set-layouts (loop for i from 0 below %vk:set-layout-count collect (vk:make-descriptor-set-layout-wrapper (cffi:mem-aref %vk:p-set-layouts '%vk:descriptor-set-layout i)))
                   :push-constant-ranges (loop for i from 0 below %vk:push-constant-range-count collect (cffi:mem-aref %vk:p-push-constant-ranges '(:struct %vk:push-constant-range) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-sampler-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:mag-filter
        %vk:min-filter
        %vk:mipmap-mode
        %vk:address-mode-u
        %vk:address-mode-v
        %vk:address-mode-w
        %vk:mip-lod-bias
        %vk:anisotropy-enable
        %vk:max-anisotropy
        %vk:compare-enable
        %vk:compare-op
        %vk:min-lod
        %vk:max-lod
        %vk:border-color
        %vk:unnormalized-coordinates)
       ,ptr
       (:struct %vk:sampler-create-info))
    (make-instance 'vk:sampler-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :mag-filter %vk:mag-filter
                   :min-filter %vk:min-filter
                   :mipmap-mode %vk:mipmap-mode
                   :address-mode-u %vk:address-mode-u
                   :address-mode-v %vk:address-mode-v
                   :address-mode-w %vk:address-mode-w
                   :mip-lod-bias %vk:mip-lod-bias
                   :anisotropy-enable %vk:anisotropy-enable
                   :max-anisotropy %vk:max-anisotropy
                   :compare-enable %vk:compare-enable
                   :compare-op %vk:compare-op
                   :min-lod %vk:min-lod
                   :max-lod %vk:max-lod
                   :border-color %vk:border-color
                   :unnormalized-coordinates %vk:unnormalized-coordinates)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-command-pool-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:queue-family-index)
       ,ptr
       (:struct %vk:command-pool-create-info))
    (make-instance 'vk:command-pool-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :queue-family-index %vk:queue-family-index)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-command-buffer-allocate-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:command-pool
        %vk:level
        %vk:command-buffer-count)
       ,ptr
       (:struct %vk:command-buffer-allocate-info))
    (make-instance 'vk:command-buffer-allocate-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :command-pool (vk:make-command-pool-wrapper %vk:command-pool)
                   :level %vk:level
                   :command-buffer-count %vk:command-buffer-count)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-command-buffer-inheritance-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:render-pass
        %vk:subpass
        %vk:framebuffer
        %vk:occlusion-query-enable
        %vk:query-flags
        %vk:pipeline-statistics)
       ,ptr
       (:struct %vk:command-buffer-inheritance-info))
    (make-instance 'vk:command-buffer-inheritance-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :render-pass (vk:make-render-pass-wrapper %vk:render-pass)
                   :subpass %vk:subpass
                   :framebuffer (vk:make-framebuffer-wrapper %vk:framebuffer)
                   :occlusion-query-enable %vk:occlusion-query-enable
                   :query-flags %vk:query-flags
                   :pipeline-statistics %vk:pipeline-statistics)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-command-buffer-begin-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:p-inheritance-info)
       ,ptr
       (:struct %vk:command-buffer-begin-info))
    (make-instance 'vk:command-buffer-begin-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :inheritance-info %vk:p-inheritance-info)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-render-pass-begin-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:render-pass
        %vk:framebuffer
        %vk:render-area
        %vk:clear-value-count
        %vk:p-clear-values)
       ,ptr
       (:struct %vk:render-pass-begin-info))
    (make-instance 'vk:render-pass-begin-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :render-pass (vk:make-render-pass-wrapper %vk:render-pass)
                   :framebuffer (vk:make-framebuffer-wrapper %vk:framebuffer)
                   :render-area %vk:render-area
                   :clear-values nil)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-clear-depth-stencil-value))
  `(cffi:with-foreign-slots
      ((%vk:depth
        %vk:stencil)
       ,ptr
       (:struct %vk:clear-depth-stencil-value))
    (make-instance 'vk:clear-depth-stencil-value
                   :depth %vk:depth
                   :stencil %vk:stencil)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-clear-attachment))
  `(cffi:with-foreign-slots
      ((%vk:aspect-mask
        %vk:color-attachment
        %vk:clear-value)
       ,ptr
       (:struct %vk:clear-attachment))
    (make-instance 'vk:clear-attachment
                   :aspect-mask %vk:aspect-mask
                   :color-attachment %vk:color-attachment
                   :clear-value nil)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-attachment-description))
  `(cffi:with-foreign-slots
      ((%vk:flags
        %vk:format
        %vk:samples
        %vk:load-op
        %vk:store-op
        %vk:stencil-load-op
        %vk:stencil-store-op
        %vk:initial-layout
        %vk:final-layout)
       ,ptr
       (:struct %vk:attachment-description))
    (make-instance 'vk:attachment-description
                   :flags %vk:flags
                   :format %vk:format
                   :samples %vk:samples
                   :load-op %vk:load-op
                   :store-op %vk:store-op
                   :stencil-load-op %vk:stencil-load-op
                   :stencil-store-op %vk:stencil-store-op
                   :initial-layout %vk:initial-layout
                   :final-layout %vk:final-layout)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-attachment-reference))
  `(cffi:with-foreign-slots
      ((%vk:attachment
        %vk:layout)
       ,ptr
       (:struct %vk:attachment-reference))
    (make-instance 'vk:attachment-reference
                   :attachment %vk:attachment
                   :layout %vk:layout)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-subpass-description))
  `(cffi:with-foreign-slots
      ((%vk:flags
        %vk:pipeline-bind-point
        %vk:input-attachment-count
        %vk:p-input-attachments
        %vk:color-attachment-count
        %vk:p-color-attachments
        %vk:p-resolve-attachments
        %vk:p-depth-stencil-attachment
        %vk:preserve-attachment-count
        %vk:p-preserve-attachments)
       ,ptr
       (:struct %vk:subpass-description))
    (make-instance 'vk:subpass-description
                   :flags %vk:flags
                   :pipeline-bind-point %vk:pipeline-bind-point
                   :input-attachments (loop for i from 0 below %vk:input-attachment-count collect (cffi:mem-aref %vk:p-input-attachments '(:struct %vk:attachment-reference) i))
                   :color-attachments (loop for i from 0 below %vk:color-attachment-count collect (cffi:mem-aref %vk:p-color-attachments '(:struct %vk:attachment-reference) i))
                   :resolve-attachments (loop for i from 0 below %vk:color-attachment-count collect (cffi:mem-aref %vk:p-resolve-attachments '(:struct %vk:attachment-reference) i))
                   :depth-stencil-attachment %vk:p-depth-stencil-attachment
                   :preserve-attachments (loop for i from 0 below %vk:preserve-attachment-count collect (cffi:mem-aref %vk:p-preserve-attachments :uint32 i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-subpass-dependency))
  `(cffi:with-foreign-slots
      ((%vk:src-subpass
        %vk:dst-subpass
        %vk:src-stage-mask
        %vk:dst-stage-mask
        %vk:src-access-mask
        %vk:dst-access-mask
        %vk:dependency-flags)
       ,ptr
       (:struct %vk:subpass-dependency))
    (make-instance 'vk:subpass-dependency
                   :src-subpass %vk:src-subpass
                   :dst-subpass %vk:dst-subpass
                   :src-stage-mask %vk:src-stage-mask
                   :dst-stage-mask %vk:dst-stage-mask
                   :src-access-mask %vk:src-access-mask
                   :dst-access-mask %vk:dst-access-mask
                   :dependency-flags %vk:dependency-flags)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-render-pass-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:attachment-count
        %vk:p-attachments
        %vk:subpass-count
        %vk:p-subpasses
        %vk:dependency-count
        %vk:p-dependencies)
       ,ptr
       (:struct %vk:render-pass-create-info))
    (make-instance 'vk:render-pass-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :attachments (loop for i from 0 below %vk:attachment-count collect (cffi:mem-aref %vk:p-attachments '(:struct %vk:attachment-description) i))
                   :subpasses (loop for i from 0 below %vk:subpass-count collect (cffi:mem-aref %vk:p-subpasses '(:struct %vk:subpass-description) i))
                   :dependencies (loop for i from 0 below %vk:dependency-count collect (cffi:mem-aref %vk:p-dependencies '(:struct %vk:subpass-dependency) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-event-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags)
       ,ptr
       (:struct %vk:event-create-info))
    (make-instance 'vk:event-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-fence-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags)
       ,ptr
       (:struct %vk:fence-create-info))
    (make-instance 'vk:fence-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-features))
  `(cffi:with-foreign-slots
      ((%vk:robust-buffer-access
        %vk:full-draw-index-uint-32
        %vk:image-cube-array
        %vk:independent-blend
        %vk:geometry-shader
        %vk:tessellation-shader
        %vk:sample-rate-shading
        %vk:dual-src-blend
        %vk:logic-op
        %vk:multi-draw-indirect
        %vk:draw-indirect-first-instance
        %vk:depth-clamp
        %vk:depth-bias-clamp
        %vk:fill-mode-non-solid
        %vk:depth-bounds
        %vk:wide-lines
        %vk:large-points
        %vk:alpha-to-one
        %vk:multi-viewport
        %vk:sampler-anisotropy
        %vk:texture-compression-etc2
        %vk:texture-compression-astc_-ldr
        %vk:texture-compression-bc
        %vk:occlusion-query-precise
        %vk:pipeline-statistics-query
        %vk:vertex-pipeline-stores-and-atomics
        %vk:fragment-stores-and-atomics
        %vk:shader-tessellation-and-geometry-point-size
        %vk:shader-image-gather-extended
        %vk:shader-storage-image-extended-formats
        %vk:shader-storage-image-multisample
        %vk:shader-storage-image-read-without-format
        %vk:shader-storage-image-write-without-format
        %vk:shader-uniform-buffer-array-dynamic-indexing
        %vk:shader-sampled-image-array-dynamic-indexing
        %vk:shader-storage-buffer-array-dynamic-indexing
        %vk:shader-storage-image-array-dynamic-indexing
        %vk:shader-clip-distance
        %vk:shader-cull-distance
        %vk:shader-float-64
        %vk:shader-int-64
        %vk:shader-int-16
        %vk:shader-resource-residency
        %vk:shader-resource-min-lod
        %vk:sparse-binding
        %vk:sparse-residency-buffer
        %vk:sparse-residency-image-2d
        %vk:sparse-residency-image-3d
        %vk:sparse-residency-2-samples
        %vk:sparse-residency-4-samples
        %vk:sparse-residency-8-samples
        %vk:sparse-residency-16-samples
        %vk:sparse-residency-aliased
        %vk:variable-multisample-rate
        %vk:inherited-queries)
       ,ptr
       (:struct %vk:physical-device-features))
    (make-instance 'vk:physical-device-features
                   :robust-buffer-access %vk:robust-buffer-access
                   :full-draw-index-uint-32 %vk:full-draw-index-uint-32
                   :image-cube-array %vk:image-cube-array
                   :independent-blend %vk:independent-blend
                   :geometry-shader %vk:geometry-shader
                   :tessellation-shader %vk:tessellation-shader
                   :sample-rate-shading %vk:sample-rate-shading
                   :dual-src-blend %vk:dual-src-blend
                   :logic-op %vk:logic-op
                   :multi-draw-indirect %vk:multi-draw-indirect
                   :draw-indirect-first-instance %vk:draw-indirect-first-instance
                   :depth-clamp %vk:depth-clamp
                   :depth-bias-clamp %vk:depth-bias-clamp
                   :fill-mode-non-solid %vk:fill-mode-non-solid
                   :depth-bounds %vk:depth-bounds
                   :wide-lines %vk:wide-lines
                   :large-points %vk:large-points
                   :alpha-to-one %vk:alpha-to-one
                   :multi-viewport %vk:multi-viewport
                   :sampler-anisotropy %vk:sampler-anisotropy
                   :texture-compression-etc2 %vk:texture-compression-etc2
                   :texture-compression-astc_-ldr %vk:texture-compression-astc_-ldr
                   :texture-compression-bc %vk:texture-compression-bc
                   :occlusion-query-precise %vk:occlusion-query-precise
                   :pipeline-statistics-query %vk:pipeline-statistics-query
                   :vertex-pipeline-stores-and-atomics %vk:vertex-pipeline-stores-and-atomics
                   :fragment-stores-and-atomics %vk:fragment-stores-and-atomics
                   :shader-tessellation-and-geometry-point-size %vk:shader-tessellation-and-geometry-point-size
                   :shader-image-gather-extended %vk:shader-image-gather-extended
                   :shader-storage-image-extended-formats %vk:shader-storage-image-extended-formats
                   :shader-storage-image-multisample %vk:shader-storage-image-multisample
                   :shader-storage-image-read-without-format %vk:shader-storage-image-read-without-format
                   :shader-storage-image-write-without-format %vk:shader-storage-image-write-without-format
                   :shader-uniform-buffer-array-dynamic-indexing %vk:shader-uniform-buffer-array-dynamic-indexing
                   :shader-sampled-image-array-dynamic-indexing %vk:shader-sampled-image-array-dynamic-indexing
                   :shader-storage-buffer-array-dynamic-indexing %vk:shader-storage-buffer-array-dynamic-indexing
                   :shader-storage-image-array-dynamic-indexing %vk:shader-storage-image-array-dynamic-indexing
                   :shader-clip-distance %vk:shader-clip-distance
                   :shader-cull-distance %vk:shader-cull-distance
                   :shader-float-64 %vk:shader-float-64
                   :shader-int-64 %vk:shader-int-64
                   :shader-int-16 %vk:shader-int-16
                   :shader-resource-residency %vk:shader-resource-residency
                   :shader-resource-min-lod %vk:shader-resource-min-lod
                   :sparse-binding %vk:sparse-binding
                   :sparse-residency-buffer %vk:sparse-residency-buffer
                   :sparse-residency-image-2d %vk:sparse-residency-image-2d
                   :sparse-residency-image-3d %vk:sparse-residency-image-3d
                   :sparse-residency-2-samples %vk:sparse-residency-2-samples
                   :sparse-residency-4-samples %vk:sparse-residency-4-samples
                   :sparse-residency-8-samples %vk:sparse-residency-8-samples
                   :sparse-residency-16-samples %vk:sparse-residency-16-samples
                   :sparse-residency-aliased %vk:sparse-residency-aliased
                   :variable-multisample-rate %vk:variable-multisample-rate
                   :inherited-queries %vk:inherited-queries)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-sparse-properties))
  `(cffi:with-foreign-slots
      ((%vk:residency-standard-2d-block-shape
        %vk:residency-standard-2d-multisample-block-shape
        %vk:residency-standard-3d-block-shape
        %vk:residency-aligned-mip-size
        %vk:residency-non-resident-strict)
       ,ptr
       (:struct %vk:physical-device-sparse-properties))
    (make-instance 'vk:physical-device-sparse-properties
                   :residency-standard-2d-block-shape %vk:residency-standard-2d-block-shape
                   :residency-standard-2d-multisample-block-shape %vk:residency-standard-2d-multisample-block-shape
                   :residency-standard-3d-block-shape %vk:residency-standard-3d-block-shape
                   :residency-aligned-mip-size %vk:residency-aligned-mip-size
                   :residency-non-resident-strict %vk:residency-non-resident-strict)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-limits))
  `(cffi:with-foreign-slots
      ((%vk:max-image-dimension-1d
        %vk:max-image-dimension-2d
        %vk:max-image-dimension-3d
        %vk:max-image-dimension-cube
        %vk:max-image-array-layers
        %vk:max-texel-buffer-elements
        %vk:max-uniform-buffer-range
        %vk:max-storage-buffer-range
        %vk:max-push-constants-size
        %vk:max-memory-allocation-count
        %vk:max-sampler-allocation-count
        %vk:buffer-image-granularity
        %vk:sparse-address-space-size
        %vk:max-bound-descriptor-sets
        %vk:max-per-stage-descriptor-samplers
        %vk:max-per-stage-descriptor-uniform-buffers
        %vk:max-per-stage-descriptor-storage-buffers
        %vk:max-per-stage-descriptor-sampled-images
        %vk:max-per-stage-descriptor-storage-images
        %vk:max-per-stage-descriptor-input-attachments
        %vk:max-per-stage-resources
        %vk:max-descriptor-set-samplers
        %vk:max-descriptor-set-uniform-buffers
        %vk:max-descriptor-set-uniform-buffers-dynamic
        %vk:max-descriptor-set-storage-buffers
        %vk:max-descriptor-set-storage-buffers-dynamic
        %vk:max-descriptor-set-sampled-images
        %vk:max-descriptor-set-storage-images
        %vk:max-descriptor-set-input-attachments
        %vk:max-vertex-input-attributes
        %vk:max-vertex-input-bindings
        %vk:max-vertex-input-attribute-offset
        %vk:max-vertex-input-binding-stride
        %vk:max-vertex-output-components
        %vk:max-tessellation-generation-level
        %vk:max-tessellation-patch-size
        %vk:max-tessellation-control-per-vertex-input-components
        %vk:max-tessellation-control-per-vertex-output-components
        %vk:max-tessellation-control-per-patch-output-components
        %vk:max-tessellation-control-total-output-components
        %vk:max-tessellation-evaluation-input-components
        %vk:max-tessellation-evaluation-output-components
        %vk:max-geometry-shader-invocations
        %vk:max-geometry-input-components
        %vk:max-geometry-output-components
        %vk:max-geometry-output-vertices
        %vk:max-geometry-total-output-components
        %vk:max-fragment-input-components
        %vk:max-fragment-output-attachments
        %vk:max-fragment-dual-src-attachments
        %vk:max-fragment-combined-output-resources
        %vk:max-compute-shared-memory-size
        %vk:max-compute-work-group-count
        %vk:max-compute-work-group-invocations
        %vk:max-compute-work-group-size
        %vk:sub-pixel-precision-bits
        %vk:sub-texel-precision-bits
        %vk:mipmap-precision-bits
        %vk:max-draw-indexed-index-value
        %vk:max-draw-indirect-count
        %vk:max-sampler-lod-bias
        %vk:max-sampler-anisotropy
        %vk:max-viewports
        %vk:max-viewport-dimensions
        %vk:viewport-bounds-range
        %vk:viewport-sub-pixel-bits
        %vk:min-memory-map-alignment
        %vk:min-texel-buffer-offset-alignment
        %vk:min-uniform-buffer-offset-alignment
        %vk:min-storage-buffer-offset-alignment
        %vk:min-texel-offset
        %vk:max-texel-offset
        %vk:min-texel-gather-offset
        %vk:max-texel-gather-offset
        %vk:min-interpolation-offset
        %vk:max-interpolation-offset
        %vk:sub-pixel-interpolation-offset-bits
        %vk:max-framebuffer-width
        %vk:max-framebuffer-height
        %vk:max-framebuffer-layers
        %vk:framebuffer-color-sample-counts
        %vk:framebuffer-depth-sample-counts
        %vk:framebuffer-stencil-sample-counts
        %vk:framebuffer-no-attachments-sample-counts
        %vk:max-color-attachments
        %vk:sampled-image-color-sample-counts
        %vk:sampled-image-integer-sample-counts
        %vk:sampled-image-depth-sample-counts
        %vk:sampled-image-stencil-sample-counts
        %vk:storage-image-sample-counts
        %vk:max-sample-mask-words
        %vk:timestamp-compute-and-graphics
        %vk:timestamp-period
        %vk:max-clip-distances
        %vk:max-cull-distances
        %vk:max-combined-clip-and-cull-distances
        %vk:discrete-queue-priorities
        %vk:point-size-range
        %vk:line-width-range
        %vk:point-size-granularity
        %vk:line-width-granularity
        %vk:strict-lines
        %vk:standard-sample-locations
        %vk:optimal-buffer-copy-offset-alignment
        %vk:optimal-buffer-copy-row-pitch-alignment
        %vk:non-coherent-atom-size)
       ,ptr
       (:struct %vk:physical-device-limits))
    (make-instance 'vk:physical-device-limits
                   :max-image-dimension-1d %vk:max-image-dimension-1d
                   :max-image-dimension-2d %vk:max-image-dimension-2d
                   :max-image-dimension-3d %vk:max-image-dimension-3d
                   :max-image-dimension-cube %vk:max-image-dimension-cube
                   :max-image-array-layers %vk:max-image-array-layers
                   :max-texel-buffer-elements %vk:max-texel-buffer-elements
                   :max-uniform-buffer-range %vk:max-uniform-buffer-range
                   :max-storage-buffer-range %vk:max-storage-buffer-range
                   :max-push-constants-size %vk:max-push-constants-size
                   :max-memory-allocation-count %vk:max-memory-allocation-count
                   :max-sampler-allocation-count %vk:max-sampler-allocation-count
                   :buffer-image-granularity %vk:buffer-image-granularity
                   :sparse-address-space-size %vk:sparse-address-space-size
                   :max-bound-descriptor-sets %vk:max-bound-descriptor-sets
                   :max-per-stage-descriptor-samplers %vk:max-per-stage-descriptor-samplers
                   :max-per-stage-descriptor-uniform-buffers %vk:max-per-stage-descriptor-uniform-buffers
                   :max-per-stage-descriptor-storage-buffers %vk:max-per-stage-descriptor-storage-buffers
                   :max-per-stage-descriptor-sampled-images %vk:max-per-stage-descriptor-sampled-images
                   :max-per-stage-descriptor-storage-images %vk:max-per-stage-descriptor-storage-images
                   :max-per-stage-descriptor-input-attachments %vk:max-per-stage-descriptor-input-attachments
                   :max-per-stage-resources %vk:max-per-stage-resources
                   :max-descriptor-set-samplers %vk:max-descriptor-set-samplers
                   :max-descriptor-set-uniform-buffers %vk:max-descriptor-set-uniform-buffers
                   :max-descriptor-set-uniform-buffers-dynamic %vk:max-descriptor-set-uniform-buffers-dynamic
                   :max-descriptor-set-storage-buffers %vk:max-descriptor-set-storage-buffers
                   :max-descriptor-set-storage-buffers-dynamic %vk:max-descriptor-set-storage-buffers-dynamic
                   :max-descriptor-set-sampled-images %vk:max-descriptor-set-sampled-images
                   :max-descriptor-set-storage-images %vk:max-descriptor-set-storage-images
                   :max-descriptor-set-input-attachments %vk:max-descriptor-set-input-attachments
                   :max-vertex-input-attributes %vk:max-vertex-input-attributes
                   :max-vertex-input-bindings %vk:max-vertex-input-bindings
                   :max-vertex-input-attribute-offset %vk:max-vertex-input-attribute-offset
                   :max-vertex-input-binding-stride %vk:max-vertex-input-binding-stride
                   :max-vertex-output-components %vk:max-vertex-output-components
                   :max-tessellation-generation-level %vk:max-tessellation-generation-level
                   :max-tessellation-patch-size %vk:max-tessellation-patch-size
                   :max-tessellation-control-per-vertex-input-components %vk:max-tessellation-control-per-vertex-input-components
                   :max-tessellation-control-per-vertex-output-components %vk:max-tessellation-control-per-vertex-output-components
                   :max-tessellation-control-per-patch-output-components %vk:max-tessellation-control-per-patch-output-components
                   :max-tessellation-control-total-output-components %vk:max-tessellation-control-total-output-components
                   :max-tessellation-evaluation-input-components %vk:max-tessellation-evaluation-input-components
                   :max-tessellation-evaluation-output-components %vk:max-tessellation-evaluation-output-components
                   :max-geometry-shader-invocations %vk:max-geometry-shader-invocations
                   :max-geometry-input-components %vk:max-geometry-input-components
                   :max-geometry-output-components %vk:max-geometry-output-components
                   :max-geometry-output-vertices %vk:max-geometry-output-vertices
                   :max-geometry-total-output-components %vk:max-geometry-total-output-components
                   :max-fragment-input-components %vk:max-fragment-input-components
                   :max-fragment-output-attachments %vk:max-fragment-output-attachments
                   :max-fragment-dual-src-attachments %vk:max-fragment-dual-src-attachments
                   :max-fragment-combined-output-resources %vk:max-fragment-combined-output-resources
                   :max-compute-shared-memory-size %vk:max-compute-shared-memory-size
                   :max-compute-work-group-count (cl:coerce (loop for i from 0 below 3 collect (cffi:mem-aref %vk:max-compute-work-group-count :uint32 i)) 'vector)
                   :max-compute-work-group-invocations %vk:max-compute-work-group-invocations
                   :max-compute-work-group-size (cl:coerce (loop for i from 0 below 3 collect (cffi:mem-aref %vk:max-compute-work-group-size :uint32 i)) 'vector)
                   :sub-pixel-precision-bits %vk:sub-pixel-precision-bits
                   :sub-texel-precision-bits %vk:sub-texel-precision-bits
                   :mipmap-precision-bits %vk:mipmap-precision-bits
                   :max-draw-indexed-index-value %vk:max-draw-indexed-index-value
                   :max-draw-indirect-count %vk:max-draw-indirect-count
                   :max-sampler-lod-bias %vk:max-sampler-lod-bias
                   :max-sampler-anisotropy %vk:max-sampler-anisotropy
                   :max-viewports %vk:max-viewports
                   :max-viewport-dimensions (cl:coerce (loop for i from 0 below 2 collect (cffi:mem-aref %vk:max-viewport-dimensions :uint32 i)) 'vector)
                   :viewport-bounds-range (cl:coerce (loop for i from 0 below 2 collect (cffi:mem-aref %vk:viewport-bounds-range :float i)) 'vector)
                   :viewport-sub-pixel-bits %vk:viewport-sub-pixel-bits
                   :min-memory-map-alignment %vk:min-memory-map-alignment
                   :min-texel-buffer-offset-alignment %vk:min-texel-buffer-offset-alignment
                   :min-uniform-buffer-offset-alignment %vk:min-uniform-buffer-offset-alignment
                   :min-storage-buffer-offset-alignment %vk:min-storage-buffer-offset-alignment
                   :min-texel-offset %vk:min-texel-offset
                   :max-texel-offset %vk:max-texel-offset
                   :min-texel-gather-offset %vk:min-texel-gather-offset
                   :max-texel-gather-offset %vk:max-texel-gather-offset
                   :min-interpolation-offset %vk:min-interpolation-offset
                   :max-interpolation-offset %vk:max-interpolation-offset
                   :sub-pixel-interpolation-offset-bits %vk:sub-pixel-interpolation-offset-bits
                   :max-framebuffer-width %vk:max-framebuffer-width
                   :max-framebuffer-height %vk:max-framebuffer-height
                   :max-framebuffer-layers %vk:max-framebuffer-layers
                   :framebuffer-color-sample-counts %vk:framebuffer-color-sample-counts
                   :framebuffer-depth-sample-counts %vk:framebuffer-depth-sample-counts
                   :framebuffer-stencil-sample-counts %vk:framebuffer-stencil-sample-counts
                   :framebuffer-no-attachments-sample-counts %vk:framebuffer-no-attachments-sample-counts
                   :max-color-attachments %vk:max-color-attachments
                   :sampled-image-color-sample-counts %vk:sampled-image-color-sample-counts
                   :sampled-image-integer-sample-counts %vk:sampled-image-integer-sample-counts
                   :sampled-image-depth-sample-counts %vk:sampled-image-depth-sample-counts
                   :sampled-image-stencil-sample-counts %vk:sampled-image-stencil-sample-counts
                   :storage-image-sample-counts %vk:storage-image-sample-counts
                   :max-sample-mask-words %vk:max-sample-mask-words
                   :timestamp-compute-and-graphics %vk:timestamp-compute-and-graphics
                   :timestamp-period %vk:timestamp-period
                   :max-clip-distances %vk:max-clip-distances
                   :max-cull-distances %vk:max-cull-distances
                   :max-combined-clip-and-cull-distances %vk:max-combined-clip-and-cull-distances
                   :discrete-queue-priorities %vk:discrete-queue-priorities
                   :point-size-range (cl:coerce (loop for i from 0 below 2 collect (cffi:mem-aref %vk:point-size-range :float i)) 'vector)
                   :line-width-range (cl:coerce (loop for i from 0 below 2 collect (cffi:mem-aref %vk:line-width-range :float i)) 'vector)
                   :point-size-granularity %vk:point-size-granularity
                   :line-width-granularity %vk:line-width-granularity
                   :strict-lines %vk:strict-lines
                   :standard-sample-locations %vk:standard-sample-locations
                   :optimal-buffer-copy-offset-alignment %vk:optimal-buffer-copy-offset-alignment
                   :optimal-buffer-copy-row-pitch-alignment %vk:optimal-buffer-copy-row-pitch-alignment
                   :non-coherent-atom-size %vk:non-coherent-atom-size)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-semaphore-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags)
       ,ptr
       (:struct %vk:semaphore-create-info))
    (make-instance 'vk:semaphore-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-query-pool-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:query-type
        %vk:query-count
        %vk:pipeline-statistics)
       ,ptr
       (:struct %vk:query-pool-create-info))
    (make-instance 'vk:query-pool-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :query-type %vk:query-type
                   :query-count %vk:query-count
                   :pipeline-statistics %vk:pipeline-statistics)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-framebuffer-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:render-pass
        %vk:attachment-count
        %vk:p-attachments
        %vk:width
        %vk:height
        %vk:layers)
       ,ptr
       (:struct %vk:framebuffer-create-info))
    (make-instance 'vk:framebuffer-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :render-pass (vk:make-render-pass-wrapper %vk:render-pass)
                   :attachments (loop for i from 0 below %vk:attachment-count collect (vk:make-image-view-wrapper (cffi:mem-aref %vk:p-attachments '%vk:image-view i)))
                   :width %vk:width
                   :height %vk:height
                   :layers %vk:layers)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-draw-indirect-command))
  `(cffi:with-foreign-slots
      ((%vk:vertex-count
        %vk:instance-count
        %vk:first-vertex
        %vk:first-instance)
       ,ptr
       (:struct %vk:draw-indirect-command))
    (make-instance 'vk:draw-indirect-command
                   :vertex-count %vk:vertex-count
                   :instance-count %vk:instance-count
                   :first-vertex %vk:first-vertex
                   :first-instance %vk:first-instance)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-draw-indexed-indirect-command))
  `(cffi:with-foreign-slots
      ((%vk:index-count
        %vk:instance-count
        %vk:first-index
        %vk:vertex-offset
        %vk:first-instance)
       ,ptr
       (:struct %vk:draw-indexed-indirect-command))
    (make-instance 'vk:draw-indexed-indirect-command
                   :index-count %vk:index-count
                   :instance-count %vk:instance-count
                   :first-index %vk:first-index
                   :vertex-offset %vk:vertex-offset
                   :first-instance %vk:first-instance)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-dispatch-indirect-command))
  `(cffi:with-foreign-slots
      ((%vk:x
        %vk:y
        %vk:z)
       ,ptr
       (:struct %vk:dispatch-indirect-command))
    (make-instance 'vk:dispatch-indirect-command
                   :x %vk:x
                   :y %vk:y
                   :z %vk:z)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-multi-draw-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:first-vertex
        %vk:vertex-count)
       ,ptr
       (:struct %vk:multi-draw-info-ext))
    (make-instance 'vk:multi-draw-info-ext
                   :first-vertex %vk:first-vertex
                   :vertex-count %vk:vertex-count)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-multi-draw-indexed-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:first-index
        %vk:index-count
        %vk:vertex-offset)
       ,ptr
       (:struct %vk:multi-draw-indexed-info-ext))
    (make-instance 'vk:multi-draw-indexed-info-ext
                   :first-index %vk:first-index
                   :index-count %vk:index-count
                   :vertex-offset %vk:vertex-offset)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-submit-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:wait-semaphore-count
        %vk:p-wait-semaphores
        %vk:p-wait-dst-stage-mask
        %vk:command-buffer-count
        %vk:p-command-buffers
        %vk:signal-semaphore-count
        %vk:p-signal-semaphores)
       ,ptr
       (:struct %vk:submit-info))
    (make-instance 'vk:submit-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :wait-semaphores (loop for i from 0 below %vk:wait-semaphore-count collect (vk:make-semaphore-wrapper (cffi:mem-aref %vk:p-wait-semaphores '%vk:semaphore i)))
                   :wait-dst-stage-mask (loop for i from 0 below %vk:wait-semaphore-count collect (cffi:mem-aref %vk:p-wait-dst-stage-mask '%vk:pipeline-stage-flags i))
                   :command-buffers (loop for i from 0 below %vk:command-buffer-count collect (vk:make-command-buffer-wrapper (cffi:mem-aref %vk:p-command-buffers '%vk:command-buffer i)))
                   :signal-semaphores (loop for i from 0 below %vk:signal-semaphore-count collect (vk:make-semaphore-wrapper (cffi:mem-aref %vk:p-signal-semaphores '%vk:semaphore i))))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-display-properties-khr))
  `(cffi:with-foreign-slots
      ((%vk:display
        %vk:display-name
        %vk:physical-dimensions
        %vk:physical-resolution
        %vk:supported-transforms
        %vk:plane-reorder-possible
        %vk:persistent-content)
       ,ptr
       (:struct %vk:display-properties-khr))
    (make-instance 'vk:display-properties-khr
                   :display (vk:make-display-khr-wrapper %vk:display)
                   :display-name %vk:display-name
                   :physical-dimensions %vk:physical-dimensions
                   :physical-resolution %vk:physical-resolution
                   :supported-transforms %vk:supported-transforms
                   :plane-reorder-possible %vk:plane-reorder-possible
                   :persistent-content %vk:persistent-content)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-display-plane-properties-khr))
  `(cffi:with-foreign-slots
      ((%vk:current-display
        %vk:current-stack-index)
       ,ptr
       (:struct %vk:display-plane-properties-khr))
    (make-instance 'vk:display-plane-properties-khr
                   :current-display (vk:make-display-khr-wrapper %vk:current-display)
                   :current-stack-index %vk:current-stack-index)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-display-mode-parameters-khr))
  `(cffi:with-foreign-slots
      ((%vk:visible-region
        %vk:refresh-rate)
       ,ptr
       (:struct %vk:display-mode-parameters-khr))
    (make-instance 'vk:display-mode-parameters-khr
                   :visible-region %vk:visible-region
                   :refresh-rate %vk:refresh-rate)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-display-mode-properties-khr))
  `(cffi:with-foreign-slots
      ((%vk:display-mode
        %vk:parameters)
       ,ptr
       (:struct %vk:display-mode-properties-khr))
    (make-instance 'vk:display-mode-properties-khr
                   :display-mode (vk:make-display-mode-khr-wrapper %vk:display-mode)
                   :parameters %vk:parameters)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-display-mode-create-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:parameters)
       ,ptr
       (:struct %vk:display-mode-create-info-khr))
    (make-instance 'vk:display-mode-create-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :parameters %vk:parameters)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-display-plane-capabilities-khr))
  `(cffi:with-foreign-slots
      ((%vk:supported-alpha
        %vk:min-src-position
        %vk:max-src-position
        %vk:min-src-extent
        %vk:max-src-extent
        %vk:min-dst-position
        %vk:max-dst-position
        %vk:min-dst-extent
        %vk:max-dst-extent)
       ,ptr
       (:struct %vk:display-plane-capabilities-khr))
    (make-instance 'vk:display-plane-capabilities-khr
                   :supported-alpha %vk:supported-alpha
                   :min-src-position %vk:min-src-position
                   :max-src-position %vk:max-src-position
                   :min-src-extent %vk:min-src-extent
                   :max-src-extent %vk:max-src-extent
                   :min-dst-position %vk:min-dst-position
                   :max-dst-position %vk:max-dst-position
                   :min-dst-extent %vk:min-dst-extent
                   :max-dst-extent %vk:max-dst-extent)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-display-surface-create-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:display-mode
        %vk:plane-index
        %vk:plane-stack-index
        %vk:transform
        %vk:global-alpha
        %vk:alpha-mode
        %vk:image-extent)
       ,ptr
       (:struct %vk:display-surface-create-info-khr))
    (make-instance 'vk:display-surface-create-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :display-mode (vk:make-display-mode-khr-wrapper %vk:display-mode)
                   :plane-index %vk:plane-index
                   :plane-stack-index %vk:plane-stack-index
                   :transform %vk:transform
                   :global-alpha %vk:global-alpha
                   :alpha-mode %vk:alpha-mode
                   :image-extent %vk:image-extent)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-display-present-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:src-rect
        %vk:dst-rect
        %vk:persistent)
       ,ptr
       (:struct %vk:display-present-info-khr))
    (make-instance 'vk:display-present-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :src-rect %vk:src-rect
                   :dst-rect %vk:dst-rect
                   :persistent %vk:persistent)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-surface-capabilities-khr))
  `(cffi:with-foreign-slots
      ((%vk:min-image-count
        %vk:max-image-count
        %vk:current-extent
        %vk:min-image-extent
        %vk:max-image-extent
        %vk:max-image-array-layers
        %vk:supported-transforms
        %vk:current-transform
        %vk:supported-composite-alpha
        %vk:supported-usage-flags)
       ,ptr
       (:struct %vk:surface-capabilities-khr))
     (make-instance 'vk:surface-capabilities-khr
                   :min-image-count %vk:min-image-count
                   :max-image-count %vk:max-image-count
                   :current-extent %vk:current-extent
                   :min-image-extent %vk:min-image-extent
                   :max-image-extent %vk:max-image-extent
                   :max-image-array-layers %vk:max-image-array-layers
                   :supported-transforms %vk:supported-transforms
                   :current-transform %vk:current-transform
                   :supported-composite-alpha %vk:supported-composite-alpha
                   :supported-usage-flags %vk:supported-usage-flags)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-android-surface-create-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:window)
       ,ptr
       (:struct %vk:android-surface-create-info-khr))
    (make-instance 'vk:android-surface-create-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :window %vk:window)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-vi-surface-create-info-nn))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:window)
       ,ptr
       (:struct %vk:vi-surface-create-info-nn))
    (make-instance 'vk:vi-surface-create-info-nn
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :window %vk:window)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-wayland-surface-create-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:display
        %vk:surface)
       ,ptr
       (:struct %vk:wayland-surface-create-info-khr))
    (make-instance 'vk:wayland-surface-create-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :display %vk:display
                   :surface %vk:surface)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-win32-surface-create-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:hinstance
        %vk:hwnd)
       ,ptr
       (:struct %vk:win32-surface-create-info-khr))
    (make-instance 'vk:win32-surface-create-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :hinstance %vk:hinstance
                   :hwnd %vk:hwnd)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-xlib-surface-create-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:dpy
        %vk:window)
       ,ptr
       (:struct %vk:xlib-surface-create-info-khr))
    (make-instance 'vk:xlib-surface-create-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :dpy %vk:dpy
                   :window %vk:window)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-xcb-surface-create-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:connection
        %vk:window)
       ,ptr
       (:struct %vk:xcb-surface-create-info-khr))
    (make-instance 'vk:xcb-surface-create-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :connection %vk:connection
                   :window %vk:window)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-direct-fb-surface-create-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:dfb
        %vk:surface)
       ,ptr
       (:struct %vk:direct-fb-surface-create-info-ext))
    (make-instance 'vk:direct-fb-surface-create-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :dfb %vk:dfb
                   :surface %vk:surface)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-image-pipe-surface-create-info-fuchsia))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:image-pipe-handle)
       ,ptr
       (:struct %vk:image-pipe-surface-create-info-fuchsia))
    (make-instance 'vk:image-pipe-surface-create-info-fuchsia
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :image-pipe-handle %vk:image-pipe-handle)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-stream-descriptor-surface-create-info-ggp))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:stream-descriptor)
       ,ptr
       (:struct %vk:stream-descriptor-surface-create-info-ggp))
    (make-instance 'vk:stream-descriptor-surface-create-info-ggp
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :stream-descriptor %vk:stream-descriptor)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-screen-surface-create-info-qnx))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:context
        %vk:window)
       ,ptr
       (:struct %vk:screen-surface-create-info-qnx))
    (make-instance 'vk:screen-surface-create-info-qnx
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :context %vk:context
                   :window %vk:window)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-surface-format-khr))
  `(cffi:with-foreign-slots
      ((%vk:format
        %vk:color-space)
       ,ptr
       (:struct %vk:surface-format-khr))
    (make-instance 'vk:surface-format-khr
                   :format %vk:format
                   :color-space %vk:color-space)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-swapchain-create-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:surface
        %vk:min-image-count
        %vk:image-format
        %vk:image-color-space
        %vk:image-extent
        %vk:image-array-layers
        %vk:image-usage
        %vk:image-sharing-mode
        %vk:queue-family-index-count
        %vk:p-queue-family-indices
        %vk:pre-transform
        %vk:composite-alpha
        %vk:present-mode
        %vk:clipped
        %vk:old-swapchain)
       ,ptr
       (:struct %vk:swapchain-create-info-khr))
    (make-instance 'vk:swapchain-create-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :surface (vk:make-surface-khr-wrapper %vk:surface)
                   :min-image-count %vk:min-image-count
                   :image-format %vk:image-format
                   :image-color-space %vk:image-color-space
                   :image-extent %vk:image-extent
                   :image-array-layers %vk:image-array-layers
                   :image-usage %vk:image-usage
                   :image-sharing-mode %vk:image-sharing-mode
                   :queue-family-indices (loop for i from 0 below %vk:queue-family-index-count collect (cffi:mem-aref %vk:p-queue-family-indices :uint32 i))
                   :pre-transform %vk:pre-transform
                   :composite-alpha %vk:composite-alpha
                   :present-mode %vk:present-mode
                   :clipped %vk:clipped
                   :old-swapchain (vk:make-swapchain-khr-wrapper %vk:old-swapchain))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-present-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:wait-semaphore-count
        %vk:p-wait-semaphores
        %vk:swapchain-count
        %vk:p-swapchains
        %vk:p-image-indices
        %vk:p-results)
       ,ptr
       (:struct %vk:present-info-khr))
    (make-instance 'vk:present-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :wait-semaphores (loop for i from 0 below %vk:wait-semaphore-count collect (vk:make-semaphore-wrapper (cffi:mem-aref %vk:p-wait-semaphores '%vk:semaphore i)))
                   :swapchains (loop for i from 0 below %vk:swapchain-count collect (vk:make-swapchain-khr-wrapper (cffi:mem-aref %vk:p-swapchains '%vk:swapchain-khr i)))
                   :image-indices (loop for i from 0 below %vk:swapchain-count collect (cffi:mem-aref %vk:p-image-indices :uint32 i))
                   :results (loop for i from 0 below %vk:swapchain-count collect (cffi:mem-aref %vk:p-results '%vk:result i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-debug-report-callback-create-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:pfn-callback
        %vk:p-user-data)
       ,ptr
       (:struct %vk:debug-report-callback-create-info-ext))
    (make-instance 'vk:debug-report-callback-create-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :pfn-callback %vk:pfn-callback
                   :user-data %vk:p-user-data)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-validation-flags-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:disabled-validation-check-count
        %vk:p-disabled-validation-checks)
       ,ptr
       (:struct %vk:validation-flags-ext))
    (make-instance 'vk:validation-flags-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :disabled-validation-checks (loop for i from 0 below %vk:disabled-validation-check-count collect (cffi:mem-aref %vk:p-disabled-validation-checks '%vk:validation-check-ext i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-validation-features-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:enabled-validation-feature-count
        %vk:p-enabled-validation-features
        %vk:disabled-validation-feature-count
        %vk:p-disabled-validation-features)
       ,ptr
       (:struct %vk:validation-features-ext))
    (make-instance 'vk:validation-features-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :enabled-validation-features (loop for i from 0 below %vk:enabled-validation-feature-count collect (cffi:mem-aref %vk:p-enabled-validation-features '%vk:validation-feature-enable-ext i))
                   :disabled-validation-features (loop for i from 0 below %vk:disabled-validation-feature-count collect (cffi:mem-aref %vk:p-disabled-validation-features '%vk:validation-feature-disable-ext i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-rasterization-state-rasterization-order-amd))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:rasterization-order)
       ,ptr
       (:struct %vk:pipeline-rasterization-state-rasterization-order-amd))
    (make-instance 'vk:pipeline-rasterization-state-rasterization-order-amd
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :rasterization-order %vk:rasterization-order)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-debug-marker-object-name-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:object-type
        %vk:object
        %vk:p-object-name)
       ,ptr
       (:struct %vk:debug-marker-object-name-info-ext))
    (make-instance 'vk:debug-marker-object-name-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :object-type %vk:object-type
                   :object %vk:object
                   :object-name %vk:p-object-name)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-debug-marker-object-tag-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:object-type
        %vk:object
        %vk:tag-name
        %vk:tag-size
        %vk:p-tag)
       ,ptr
       (:struct %vk:debug-marker-object-tag-info-ext))
    (make-instance 'vk:debug-marker-object-tag-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :object-type %vk:object-type
                   :object %vk:object
                   :tag-name %vk:tag-name
                   :tag-size %vk:tag-size
                   :tag %vk:p-tag)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-debug-marker-marker-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:p-marker-name
        %vk:color)
       ,ptr
       (:struct %vk:debug-marker-marker-info-ext))
    (make-instance 'vk:debug-marker-marker-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :marker-name %vk:p-marker-name
                   :color (cl:coerce (loop for i from 0 below 4 collect (cffi:mem-aref %vk:color :float i)) 'vector))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-dedicated-allocation-image-create-info-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:dedicated-allocation)
       ,ptr
       (:struct %vk:dedicated-allocation-image-create-info-nv))
    (make-instance 'vk:dedicated-allocation-image-create-info-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :dedicated-allocation %vk:dedicated-allocation)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-dedicated-allocation-buffer-create-info-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:dedicated-allocation)
       ,ptr
       (:struct %vk:dedicated-allocation-buffer-create-info-nv))
    (make-instance 'vk:dedicated-allocation-buffer-create-info-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :dedicated-allocation %vk:dedicated-allocation)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-dedicated-allocation-memory-allocate-info-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:image
        %vk:buffer)
       ,ptr
       (:struct %vk:dedicated-allocation-memory-allocate-info-nv))
    (make-instance 'vk:dedicated-allocation-memory-allocate-info-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :image (vk:make-image-wrapper %vk:image)
                   :buffer (vk:make-buffer-wrapper %vk:buffer))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-external-image-format-properties-nv))
  `(cffi:with-foreign-slots
      ((%vk:image-format-properties
        %vk:external-memory-features
        %vk:export-from-imported-handle-types
        %vk:compatible-handle-types)
       ,ptr
       (:struct %vk:external-image-format-properties-nv))
    (make-instance 'vk:external-image-format-properties-nv
                   :image-format-properties %vk:image-format-properties
                   :external-memory-features %vk:external-memory-features
                   :export-from-imported-handle-types %vk:export-from-imported-handle-types
                   :compatible-handle-types %vk:compatible-handle-types)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-external-memory-image-create-info-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:handle-types)
       ,ptr
       (:struct %vk:external-memory-image-create-info-nv))
    (make-instance 'vk:external-memory-image-create-info-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :handle-types %vk:handle-types)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-export-memory-allocate-info-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:handle-types)
       ,ptr
       (:struct %vk:export-memory-allocate-info-nv))
    (make-instance 'vk:export-memory-allocate-info-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :handle-types %vk:handle-types)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-import-memory-win32-handle-info-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:handle-type
        %vk:handle)
       ,ptr
       (:struct %vk:import-memory-win32-handle-info-nv))
    (make-instance 'vk:import-memory-win32-handle-info-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :handle-type %vk:handle-type
                   :handle %vk:handle)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-export-memory-win32-handle-info-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:p-attributes
        %vk:dw-access)
       ,ptr
       (:struct %vk:export-memory-win32-handle-info-nv))
    (make-instance 'vk:export-memory-win32-handle-info-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :attributes %vk:p-attributes
                   :dw-access %vk:dw-access)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-win32-keyed-mutex-acquire-release-info-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:acquire-count
        %vk:p-acquire-syncs
        %vk:p-acquire-keys
        %vk:p-acquire-timeout-milliseconds
        %vk:release-count
        %vk:p-release-syncs
        %vk:p-release-keys)
       ,ptr
       (:struct %vk:win32-keyed-mutex-acquire-release-info-nv))
    (make-instance 'vk:win32-keyed-mutex-acquire-release-info-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :acquire-syncs (loop for i from 0 below %vk:acquire-count collect (vk:make-device-memory-wrapper (cffi:mem-aref %vk:p-acquire-syncs '%vk:device-memory i)))
                   :acquire-keys (loop for i from 0 below %vk:acquire-count collect (cffi:mem-aref %vk:p-acquire-keys :uint64 i))
                   :acquire-timeout-milliseconds (loop for i from 0 below %vk:acquire-count collect (cffi:mem-aref %vk:p-acquire-timeout-milliseconds :uint32 i))
                   :release-syncs (loop for i from 0 below %vk:release-count collect (vk:make-device-memory-wrapper (cffi:mem-aref %vk:p-release-syncs '%vk:device-memory i)))
                   :release-keys (loop for i from 0 below %vk:release-count collect (cffi:mem-aref %vk:p-release-keys :uint64 i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-device-generated-commands-features-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:device-generated-commands)
       ,ptr
       (:struct %vk:physical-device-device-generated-commands-features-nv))
    (make-instance 'vk:physical-device-device-generated-commands-features-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :device-generated-commands %vk:device-generated-commands)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-device-private-data-create-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:private-data-slot-request-count)
       ,ptr
       (:struct %vk:device-private-data-create-info-ext))
    (make-instance 'vk:device-private-data-create-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :private-data-slot-request-count %vk:private-data-slot-request-count)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-private-data-slot-create-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags)
       ,ptr
       (:struct %vk:private-data-slot-create-info-ext))
    (make-instance 'vk:private-data-slot-create-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-private-data-features-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:private-data)
       ,ptr
       (:struct %vk:physical-device-private-data-features-ext))
    (make-instance 'vk:physical-device-private-data-features-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :private-data %vk:private-data)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-device-generated-commands-properties-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:max-graphics-shader-group-count
        %vk:max-indirect-sequence-count
        %vk:max-indirect-commands-token-count
        %vk:max-indirect-commands-stream-count
        %vk:max-indirect-commands-token-offset
        %vk:max-indirect-commands-stream-stride
        %vk:min-sequences-count-buffer-offset-alignment
        %vk:min-sequences-index-buffer-offset-alignment
        %vk:min-indirect-commands-buffer-offset-alignment)
       ,ptr
       (:struct %vk:physical-device-device-generated-commands-properties-nv))
    (make-instance 'vk:physical-device-device-generated-commands-properties-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :max-graphics-shader-group-count %vk:max-graphics-shader-group-count
                   :max-indirect-sequence-count %vk:max-indirect-sequence-count
                   :max-indirect-commands-token-count %vk:max-indirect-commands-token-count
                   :max-indirect-commands-stream-count %vk:max-indirect-commands-stream-count
                   :max-indirect-commands-token-offset %vk:max-indirect-commands-token-offset
                   :max-indirect-commands-stream-stride %vk:max-indirect-commands-stream-stride
                   :min-sequences-count-buffer-offset-alignment %vk:min-sequences-count-buffer-offset-alignment
                   :min-sequences-index-buffer-offset-alignment %vk:min-sequences-index-buffer-offset-alignment
                   :min-indirect-commands-buffer-offset-alignment %vk:min-indirect-commands-buffer-offset-alignment)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-multi-draw-properties-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:max-multi-draw-count)
       ,ptr
       (:struct %vk:physical-device-multi-draw-properties-ext))
    (make-instance 'vk:physical-device-multi-draw-properties-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :max-multi-draw-count %vk:max-multi-draw-count)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-graphics-shader-group-create-info-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:stage-count
        %vk:p-stages
        %vk:p-vertex-input-state
        %vk:p-tessellation-state)
       ,ptr
       (:struct %vk:graphics-shader-group-create-info-nv))
    (make-instance 'vk:graphics-shader-group-create-info-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :stages (loop for i from 0 below %vk:stage-count collect (cffi:mem-aref %vk:p-stages '(:struct %vk:pipeline-shader-stage-create-info) i))
                   :vertex-input-state %vk:p-vertex-input-state
                   :tessellation-state %vk:p-tessellation-state)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-graphics-pipeline-shader-groups-create-info-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:group-count
        %vk:p-groups
        %vk:pipeline-count
        %vk:p-pipelines)
       ,ptr
       (:struct %vk:graphics-pipeline-shader-groups-create-info-nv))
    (make-instance 'vk:graphics-pipeline-shader-groups-create-info-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :groups (loop for i from 0 below %vk:group-count collect (cffi:mem-aref %vk:p-groups '(:struct %vk:graphics-shader-group-create-info-nv) i))
                   :pipelines (loop for i from 0 below %vk:pipeline-count collect (vk:make-pipeline-wrapper (cffi:mem-aref %vk:p-pipelines '%vk:pipeline i))))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-bind-shader-group-indirect-command-nv))
  `(cffi:with-foreign-slots
      ((%vk:group-index)
       ,ptr
       (:struct %vk:bind-shader-group-indirect-command-nv))
    (make-instance 'vk:bind-shader-group-indirect-command-nv
                   :group-index %vk:group-index)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-bind-index-buffer-indirect-command-nv))
  `(cffi:with-foreign-slots
      ((%vk:buffer-address
        %vk:size
        %vk:index-type)
       ,ptr
       (:struct %vk:bind-index-buffer-indirect-command-nv))
    (make-instance 'vk:bind-index-buffer-indirect-command-nv
                   :buffer-address %vk:buffer-address
                   :size %vk:size
                   :index-type %vk:index-type)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-bind-vertex-buffer-indirect-command-nv))
  `(cffi:with-foreign-slots
      ((%vk:buffer-address
        %vk:size
        %vk:stride)
       ,ptr
       (:struct %vk:bind-vertex-buffer-indirect-command-nv))
    (make-instance 'vk:bind-vertex-buffer-indirect-command-nv
                   :buffer-address %vk:buffer-address
                   :size %vk:size
                   :stride %vk:stride)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-set-state-flags-indirect-command-nv))
  `(cffi:with-foreign-slots
      ((%vk:data)
       ,ptr
       (:struct %vk:set-state-flags-indirect-command-nv))
    (make-instance 'vk:set-state-flags-indirect-command-nv
                   :data %vk:data)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-indirect-commands-stream-nv))
  `(cffi:with-foreign-slots
      ((%vk:buffer
        %vk:offset)
       ,ptr
       (:struct %vk:indirect-commands-stream-nv))
    (make-instance 'vk:indirect-commands-stream-nv
                   :buffer (vk:make-buffer-wrapper %vk:buffer)
                   :offset %vk:offset)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-indirect-commands-layout-token-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:token-type
        %vk:stream
        %vk:offset
        %vk:vertex-binding-unit
        %vk:vertex-dynamic-stride
        %vk:pushconstant-pipeline-layout
        %vk:pushconstant-shader-stage-flags
        %vk:pushconstant-offset
        %vk:pushconstant-size
        %vk:indirect-state-flags
        %vk:index-type-count
        %vk:p-index-types
        %vk:p-index-type-values)
       ,ptr
       (:struct %vk:indirect-commands-layout-token-nv))
    (make-instance 'vk:indirect-commands-layout-token-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :token-type %vk:token-type
                   :stream %vk:stream
                   :offset %vk:offset
                   :vertex-binding-unit %vk:vertex-binding-unit
                   :vertex-dynamic-stride %vk:vertex-dynamic-stride
                   :pushconstant-pipeline-layout (vk:make-pipeline-layout-wrapper %vk:pushconstant-pipeline-layout)
                   :pushconstant-shader-stage-flags %vk:pushconstant-shader-stage-flags
                   :pushconstant-offset %vk:pushconstant-offset
                   :pushconstant-size %vk:pushconstant-size
                   :indirect-state-flags %vk:indirect-state-flags
                   :index-types (loop for i from 0 below %vk:index-type-count collect (cffi:mem-aref %vk:p-index-types '%vk:index-type i))
                   :index-type-values (loop for i from 0 below %vk:index-type-count collect (cffi:mem-aref %vk:p-index-type-values :uint32 i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-indirect-commands-layout-create-info-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:pipeline-bind-point
        %vk:token-count
        %vk:p-tokens
        %vk:stream-count
        %vk:p-stream-strides)
       ,ptr
       (:struct %vk:indirect-commands-layout-create-info-nv))
    (make-instance 'vk:indirect-commands-layout-create-info-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :pipeline-bind-point %vk:pipeline-bind-point
                   :tokens (loop for i from 0 below %vk:token-count collect (cffi:mem-aref %vk:p-tokens '(:struct %vk:indirect-commands-layout-token-nv) i))
                   :stream-strides (loop for i from 0 below %vk:stream-count collect (cffi:mem-aref %vk:p-stream-strides :uint32 i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-generated-commands-info-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:pipeline-bind-point
        %vk:pipeline
        %vk:indirect-commands-layout
        %vk:stream-count
        %vk:p-streams
        %vk:sequences-count
        %vk:preprocess-buffer
        %vk:preprocess-offset
        %vk:preprocess-size
        %vk:sequences-count-buffer
        %vk:sequences-count-offset
        %vk:sequences-index-buffer
        %vk:sequences-index-offset)
       ,ptr
       (:struct %vk:generated-commands-info-nv))
    (make-instance 'vk:generated-commands-info-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :pipeline-bind-point %vk:pipeline-bind-point
                   :pipeline (vk:make-pipeline-wrapper %vk:pipeline)
                   :indirect-commands-layout (vk:make-indirect-commands-layout-nv-wrapper %vk:indirect-commands-layout)
                   :streams (loop for i from 0 below %vk:stream-count collect (cffi:mem-aref %vk:p-streams '(:struct %vk:indirect-commands-stream-nv) i))
                   :sequences-count %vk:sequences-count
                   :preprocess-buffer (vk:make-buffer-wrapper %vk:preprocess-buffer)
                   :preprocess-offset %vk:preprocess-offset
                   :preprocess-size %vk:preprocess-size
                   :sequences-count-buffer (vk:make-buffer-wrapper %vk:sequences-count-buffer)
                   :sequences-count-offset %vk:sequences-count-offset
                   :sequences-index-buffer (vk:make-buffer-wrapper %vk:sequences-index-buffer)
                   :sequences-index-offset %vk:sequences-index-offset)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-generated-commands-memory-requirements-info-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:pipeline-bind-point
        %vk:pipeline
        %vk:indirect-commands-layout
        %vk:max-sequences-count)
       ,ptr
       (:struct %vk:generated-commands-memory-requirements-info-nv))
    (make-instance 'vk:generated-commands-memory-requirements-info-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :pipeline-bind-point %vk:pipeline-bind-point
                   :pipeline (vk:make-pipeline-wrapper %vk:pipeline)
                   :indirect-commands-layout (vk:make-indirect-commands-layout-nv-wrapper %vk:indirect-commands-layout)
                   :max-sequences-count %vk:max-sequences-count)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-features-2))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:features)
       ,ptr
       (:struct %vk:physical-device-features-2))
    (make-instance 'vk:physical-device-features-2
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :features %vk:features)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-properties-2))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:properties)
       ,ptr
       (:struct %vk:physical-device-properties-2))
    (make-instance 'vk:physical-device-properties-2
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :properties %vk:properties)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-format-properties-2))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:format-properties)
       ,ptr
       (:struct %vk:format-properties-2))
    (make-instance 'vk:format-properties-2
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :format-properties %vk:format-properties)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-image-format-properties-2))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:image-format-properties)
       ,ptr
       (:struct %vk:image-format-properties-2))
    (make-instance 'vk:image-format-properties-2
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :image-format-properties %vk:image-format-properties)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-image-format-info-2))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:format
        %vk:type
        %vk:tiling
        %vk:usage
        %vk:flags)
       ,ptr
       (:struct %vk:physical-device-image-format-info-2))
    (make-instance 'vk:physical-device-image-format-info-2
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :format %vk:format
                   :type %vk:type
                   :tiling %vk:tiling
                   :usage %vk:usage
                   :flags %vk:flags)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-queue-family-properties-2))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:queue-family-properties)
       ,ptr
       (:struct %vk:queue-family-properties-2))
    (make-instance 'vk:queue-family-properties-2
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :queue-family-properties %vk:queue-family-properties)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-memory-properties-2))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:memory-properties)
       ,ptr
       (:struct %vk:physical-device-memory-properties-2))
    (make-instance 'vk:physical-device-memory-properties-2
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :memory-properties %vk:memory-properties)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-sparse-image-format-properties-2))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:properties)
       ,ptr
       (:struct %vk:sparse-image-format-properties-2))
    (make-instance 'vk:sparse-image-format-properties-2
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :properties %vk:properties)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-sparse-image-format-info-2))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:format
        %vk:type
        %vk:samples
        %vk:usage
        %vk:tiling)
       ,ptr
       (:struct %vk:physical-device-sparse-image-format-info-2))
    (make-instance 'vk:physical-device-sparse-image-format-info-2
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :format %vk:format
                   :type %vk:type
                   :samples %vk:samples
                   :usage %vk:usage
                   :tiling %vk:tiling)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-push-descriptor-properties-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:max-push-descriptors)
       ,ptr
       (:struct %vk:physical-device-push-descriptor-properties-khr))
    (make-instance 'vk:physical-device-push-descriptor-properties-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :max-push-descriptors %vk:max-push-descriptors)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-conformance-version))
  `(cffi:with-foreign-slots
      ((%vk:major
        %vk:minor
        %vk:subminor
        %vk:patch)
       ,ptr
       (:struct %vk:conformance-version))
    (make-instance 'vk:conformance-version
                   :major %vk:major
                   :minor %vk:minor
                   :subminor %vk:subminor
                   :patch %vk:patch)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-driver-properties))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:driver-id
        %vk:driver-name
        %vk:driver-info
        %vk:conformance-version)
       ,ptr
       (:struct %vk:physical-device-driver-properties))
    (make-instance 'vk:physical-device-driver-properties
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :driver-id %vk:driver-id
                   :driver-name (cffi:foreign-string-to-lisp %vk:driver-name)
                   :driver-info (cffi:foreign-string-to-lisp %vk:driver-info)
                   :conformance-version %vk:conformance-version)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-present-regions-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:swapchain-count
        %vk:p-regions)
       ,ptr
       (:struct %vk:present-regions-khr))
    (make-instance 'vk:present-regions-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :swapchain-count %vk:swapchain-count
                   :regions %vk:p-regions)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-present-region-khr))
  `(cffi:with-foreign-slots
      ((%vk:rectangle-count
        %vk:p-rectangles)
       ,ptr
       (:struct %vk:present-region-khr))
    (make-instance 'vk:present-region-khr
                   :rectangles (loop for i from 0 below %vk:rectangle-count collect (cffi:mem-aref %vk:p-rectangles '(:struct %vk:rect-layer-khr) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-rect-layer-khr))
  `(cffi:with-foreign-slots
      ((%vk:offset
        %vk:extent
        %vk:layer)
       ,ptr
       (:struct %vk:rect-layer-khr))
    (make-instance 'vk:rect-layer-khr
                   :offset %vk:offset
                   :extent %vk:extent
                   :layer %vk:layer)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-variable-pointers-features))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:variable-pointers-storage-buffer
        %vk:variable-pointers)
       ,ptr
       (:struct %vk:physical-device-variable-pointers-features))
    (make-instance 'vk:physical-device-variable-pointers-features
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :variable-pointers-storage-buffer %vk:variable-pointers-storage-buffer
                   :variable-pointers %vk:variable-pointers)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-external-memory-properties))
  `(cffi:with-foreign-slots
      ((%vk:external-memory-features
        %vk:export-from-imported-handle-types
        %vk:compatible-handle-types)
       ,ptr
       (:struct %vk:external-memory-properties))
    (make-instance 'vk:external-memory-properties
                   :external-memory-features %vk:external-memory-features
                   :export-from-imported-handle-types %vk:export-from-imported-handle-types
                   :compatible-handle-types %vk:compatible-handle-types)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-external-image-format-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:handle-type)
       ,ptr
       (:struct %vk:physical-device-external-image-format-info))
    (make-instance 'vk:physical-device-external-image-format-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :handle-type %vk:handle-type)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-external-image-format-properties))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:external-memory-properties)
       ,ptr
       (:struct %vk:external-image-format-properties))
    (make-instance 'vk:external-image-format-properties
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :external-memory-properties %vk:external-memory-properties)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-external-buffer-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:usage
        %vk:handle-type)
       ,ptr
       (:struct %vk:physical-device-external-buffer-info))
    (make-instance 'vk:physical-device-external-buffer-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :usage %vk:usage
                   :handle-type %vk:handle-type)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-external-buffer-properties))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:external-memory-properties)
       ,ptr
       (:struct %vk:external-buffer-properties))
    (make-instance 'vk:external-buffer-properties
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :external-memory-properties %vk:external-memory-properties)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-id-properties))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:device-uuid
        %vk:driver-uuid
        %vk:device-luid
        %vk:device-node-mask
        %vk:device-luid-valid)
       ,ptr
       (:struct %vk:physical-device-id-properties))
    (make-instance 'vk:physical-device-id-properties
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :device-uuid (cl:coerce (loop for i from 0 below 16 collect (cffi:mem-aref %vk:device-uuid :uint8 i)) 'vector)
                   :driver-uuid (cl:coerce (loop for i from 0 below 16 collect (cffi:mem-aref %vk:driver-uuid :uint8 i)) 'vector)
                   :device-luid (cl:coerce (loop for i from 0 below 8 collect (cffi:mem-aref %vk:device-luid :uint8 i)) 'vector)
                   :device-node-mask %vk:device-node-mask
                   :device-luid-valid %vk:device-luid-valid)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-external-memory-image-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:handle-types)
       ,ptr
       (:struct %vk:external-memory-image-create-info))
    (make-instance 'vk:external-memory-image-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :handle-types %vk:handle-types)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-external-memory-buffer-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:handle-types)
       ,ptr
       (:struct %vk:external-memory-buffer-create-info))
    (make-instance 'vk:external-memory-buffer-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :handle-types %vk:handle-types)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-export-memory-allocate-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:handle-types)
       ,ptr
       (:struct %vk:export-memory-allocate-info))
    (make-instance 'vk:export-memory-allocate-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :handle-types %vk:handle-types)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-import-memory-win32-handle-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:handle-type
        %vk:handle
        %vk:name)
       ,ptr
       (:struct %vk:import-memory-win32-handle-info-khr))
    (make-instance 'vk:import-memory-win32-handle-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :handle-type %vk:handle-type
                   :handle %vk:handle
                   :name %vk:name)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-export-memory-win32-handle-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:p-attributes
        %vk:dw-access
        %vk:name)
       ,ptr
       (:struct %vk:export-memory-win32-handle-info-khr))
    (make-instance 'vk:export-memory-win32-handle-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :attributes %vk:p-attributes
                   :dw-access %vk:dw-access
                   :name %vk:name)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-import-memory-zircon-handle-info-fuchsia))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:handle-type
        %vk:handle)
       ,ptr
       (:struct %vk:import-memory-zircon-handle-info-fuchsia))
    (make-instance 'vk:import-memory-zircon-handle-info-fuchsia
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :handle-type %vk:handle-type
                   :handle %vk:handle)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-memory-zircon-handle-properties-fuchsia))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:memory-type-bits)
       ,ptr
       (:struct %vk:memory-zircon-handle-properties-fuchsia))
    (make-instance 'vk:memory-zircon-handle-properties-fuchsia
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :memory-type-bits %vk:memory-type-bits)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-memory-get-zircon-handle-info-fuchsia))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:memory
        %vk:handle-type)
       ,ptr
       (:struct %vk:memory-get-zircon-handle-info-fuchsia))
    (make-instance 'vk:memory-get-zircon-handle-info-fuchsia
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :memory (vk:make-device-memory-wrapper %vk:memory)
                   :handle-type %vk:handle-type)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-memory-win32-handle-properties-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:memory-type-bits)
       ,ptr
       (:struct %vk:memory-win32-handle-properties-khr))
    (make-instance 'vk:memory-win32-handle-properties-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :memory-type-bits %vk:memory-type-bits)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-memory-get-win32-handle-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:memory
        %vk:handle-type)
       ,ptr
       (:struct %vk:memory-get-win32-handle-info-khr))
    (make-instance 'vk:memory-get-win32-handle-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :memory (vk:make-device-memory-wrapper %vk:memory)
                   :handle-type %vk:handle-type)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-import-memory-fd-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:handle-type
        %vk:fd)
       ,ptr
       (:struct %vk:import-memory-fd-info-khr))
    (make-instance 'vk:import-memory-fd-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :handle-type %vk:handle-type
                   :fd %vk:fd)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-memory-fd-properties-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:memory-type-bits)
       ,ptr
       (:struct %vk:memory-fd-properties-khr))
    (make-instance 'vk:memory-fd-properties-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :memory-type-bits %vk:memory-type-bits)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-memory-get-fd-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:memory
        %vk:handle-type)
       ,ptr
       (:struct %vk:memory-get-fd-info-khr))
    (make-instance 'vk:memory-get-fd-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :memory (vk:make-device-memory-wrapper %vk:memory)
                   :handle-type %vk:handle-type)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-win32-keyed-mutex-acquire-release-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:acquire-count
        %vk:p-acquire-syncs
        %vk:p-acquire-keys
        %vk:p-acquire-timeouts
        %vk:release-count
        %vk:p-release-syncs
        %vk:p-release-keys)
       ,ptr
       (:struct %vk:win32-keyed-mutex-acquire-release-info-khr))
    (make-instance 'vk:win32-keyed-mutex-acquire-release-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :acquire-syncs (loop for i from 0 below %vk:acquire-count collect (vk:make-device-memory-wrapper (cffi:mem-aref %vk:p-acquire-syncs '%vk:device-memory i)))
                   :acquire-keys (loop for i from 0 below %vk:acquire-count collect (cffi:mem-aref %vk:p-acquire-keys :uint64 i))
                   :acquire-timeouts (loop for i from 0 below %vk:acquire-count collect (cffi:mem-aref %vk:p-acquire-timeouts :uint32 i))
                   :release-syncs (loop for i from 0 below %vk:release-count collect (vk:make-device-memory-wrapper (cffi:mem-aref %vk:p-release-syncs '%vk:device-memory i)))
                   :release-keys (loop for i from 0 below %vk:release-count collect (cffi:mem-aref %vk:p-release-keys :uint64 i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-external-semaphore-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:handle-type)
       ,ptr
       (:struct %vk:physical-device-external-semaphore-info))
    (make-instance 'vk:physical-device-external-semaphore-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :handle-type %vk:handle-type)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-external-semaphore-properties))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:export-from-imported-handle-types
        %vk:compatible-handle-types
        %vk:external-semaphore-features)
       ,ptr
       (:struct %vk:external-semaphore-properties))
    (make-instance 'vk:external-semaphore-properties
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :export-from-imported-handle-types %vk:export-from-imported-handle-types
                   :compatible-handle-types %vk:compatible-handle-types
                   :external-semaphore-features %vk:external-semaphore-features)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-export-semaphore-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:handle-types)
       ,ptr
       (:struct %vk:export-semaphore-create-info))
    (make-instance 'vk:export-semaphore-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :handle-types %vk:handle-types)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-import-semaphore-win32-handle-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:semaphore
        %vk:flags
        %vk:handle-type
        %vk:handle
        %vk:name)
       ,ptr
       (:struct %vk:import-semaphore-win32-handle-info-khr))
    (make-instance 'vk:import-semaphore-win32-handle-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :semaphore (vk:make-semaphore-wrapper %vk:semaphore)
                   :flags %vk:flags
                   :handle-type %vk:handle-type
                   :handle %vk:handle
                   :name %vk:name)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-export-semaphore-win32-handle-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:p-attributes
        %vk:dw-access
        %vk:name)
       ,ptr
       (:struct %vk:export-semaphore-win32-handle-info-khr))
    (make-instance 'vk:export-semaphore-win32-handle-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :attributes %vk:p-attributes
                   :dw-access %vk:dw-access
                   :name %vk:name)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-d-3d-1-2-fence-submit-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:wait-semaphore-values-count
        %vk:p-wait-semaphore-values
        %vk:signal-semaphore-values-count
        %vk:p-signal-semaphore-values)
       ,ptr
       (:struct %vk:d-3d-1-2-fence-submit-info-khr))
    (make-instance 'vk:d-3d-1-2-fence-submit-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :wait-semaphore-values (loop for i from 0 below %vk:wait-semaphore-values-count collect (cffi:mem-aref %vk:p-wait-semaphore-values :uint64 i))
                   :signal-semaphore-values (loop for i from 0 below %vk:signal-semaphore-values-count collect (cffi:mem-aref %vk:p-signal-semaphore-values :uint64 i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-semaphore-get-win32-handle-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:semaphore
        %vk:handle-type)
       ,ptr
       (:struct %vk:semaphore-get-win32-handle-info-khr))
    (make-instance 'vk:semaphore-get-win32-handle-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :semaphore (vk:make-semaphore-wrapper %vk:semaphore)
                   :handle-type %vk:handle-type)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-import-semaphore-fd-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:semaphore
        %vk:flags
        %vk:handle-type
        %vk:fd)
       ,ptr
       (:struct %vk:import-semaphore-fd-info-khr))
    (make-instance 'vk:import-semaphore-fd-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :semaphore (vk:make-semaphore-wrapper %vk:semaphore)
                   :flags %vk:flags
                   :handle-type %vk:handle-type
                   :fd %vk:fd)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-semaphore-get-fd-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:semaphore
        %vk:handle-type)
       ,ptr
       (:struct %vk:semaphore-get-fd-info-khr))
    (make-instance 'vk:semaphore-get-fd-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :semaphore (vk:make-semaphore-wrapper %vk:semaphore)
                   :handle-type %vk:handle-type)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-import-semaphore-zircon-handle-info-fuchsia))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:semaphore
        %vk:flags
        %vk:handle-type
        %vk:zircon-handle)
       ,ptr
       (:struct %vk:import-semaphore-zircon-handle-info-fuchsia))
    (make-instance 'vk:import-semaphore-zircon-handle-info-fuchsia
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :semaphore (vk:make-semaphore-wrapper %vk:semaphore)
                   :flags %vk:flags
                   :handle-type %vk:handle-type
                   :zircon-handle %vk:zircon-handle)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-semaphore-get-zircon-handle-info-fuchsia))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:semaphore
        %vk:handle-type)
       ,ptr
       (:struct %vk:semaphore-get-zircon-handle-info-fuchsia))
    (make-instance 'vk:semaphore-get-zircon-handle-info-fuchsia
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :semaphore (vk:make-semaphore-wrapper %vk:semaphore)
                   :handle-type %vk:handle-type)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-external-fence-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:handle-type)
       ,ptr
       (:struct %vk:physical-device-external-fence-info))
    (make-instance 'vk:physical-device-external-fence-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :handle-type %vk:handle-type)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-external-fence-properties))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:export-from-imported-handle-types
        %vk:compatible-handle-types
        %vk:external-fence-features)
       ,ptr
       (:struct %vk:external-fence-properties))
    (make-instance 'vk:external-fence-properties
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :export-from-imported-handle-types %vk:export-from-imported-handle-types
                   :compatible-handle-types %vk:compatible-handle-types
                   :external-fence-features %vk:external-fence-features)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-export-fence-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:handle-types)
       ,ptr
       (:struct %vk:export-fence-create-info))
    (make-instance 'vk:export-fence-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :handle-types %vk:handle-types)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-import-fence-win32-handle-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:fence
        %vk:flags
        %vk:handle-type
        %vk:handle
        %vk:name)
       ,ptr
       (:struct %vk:import-fence-win32-handle-info-khr))
    (make-instance 'vk:import-fence-win32-handle-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :fence (vk:make-fence-wrapper %vk:fence)
                   :flags %vk:flags
                   :handle-type %vk:handle-type
                   :handle %vk:handle
                   :name %vk:name)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-export-fence-win32-handle-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:p-attributes
        %vk:dw-access
        %vk:name)
       ,ptr
       (:struct %vk:export-fence-win32-handle-info-khr))
    (make-instance 'vk:export-fence-win32-handle-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :attributes %vk:p-attributes
                   :dw-access %vk:dw-access
                   :name %vk:name)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-fence-get-win32-handle-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:fence
        %vk:handle-type)
       ,ptr
       (:struct %vk:fence-get-win32-handle-info-khr))
    (make-instance 'vk:fence-get-win32-handle-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :fence (vk:make-fence-wrapper %vk:fence)
                   :handle-type %vk:handle-type)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-import-fence-fd-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:fence
        %vk:flags
        %vk:handle-type
        %vk:fd)
       ,ptr
       (:struct %vk:import-fence-fd-info-khr))
    (make-instance 'vk:import-fence-fd-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :fence (vk:make-fence-wrapper %vk:fence)
                   :flags %vk:flags
                   :handle-type %vk:handle-type
                   :fd %vk:fd)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-fence-get-fd-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:fence
        %vk:handle-type)
       ,ptr
       (:struct %vk:fence-get-fd-info-khr))
    (make-instance 'vk:fence-get-fd-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :fence (vk:make-fence-wrapper %vk:fence)
                   :handle-type %vk:handle-type)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-multiview-features))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:multiview
        %vk:multiview-geometry-shader
        %vk:multiview-tessellation-shader)
       ,ptr
       (:struct %vk:physical-device-multiview-features))
    (make-instance 'vk:physical-device-multiview-features
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :multiview %vk:multiview
                   :multiview-geometry-shader %vk:multiview-geometry-shader
                   :multiview-tessellation-shader %vk:multiview-tessellation-shader)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-multiview-properties))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:max-multiview-view-count
        %vk:max-multiview-instance-index)
       ,ptr
       (:struct %vk:physical-device-multiview-properties))
    (make-instance 'vk:physical-device-multiview-properties
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :max-multiview-view-count %vk:max-multiview-view-count
                   :max-multiview-instance-index %vk:max-multiview-instance-index)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-render-pass-multiview-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:subpass-count
        %vk:p-view-masks
        %vk:dependency-count
        %vk:p-view-offsets
        %vk:correlation-mask-count
        %vk:p-correlation-masks)
       ,ptr
       (:struct %vk:render-pass-multiview-create-info))
    (make-instance 'vk:render-pass-multiview-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :view-masks (loop for i from 0 below %vk:subpass-count collect (cffi:mem-aref %vk:p-view-masks :uint32 i))
                   :view-offsets (loop for i from 0 below %vk:dependency-count collect (cffi:mem-aref %vk:p-view-offsets :int32 i))
                   :correlation-masks (loop for i from 0 below %vk:correlation-mask-count collect (cffi:mem-aref %vk:p-correlation-masks :uint32 i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-surface-capabilities-2-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:min-image-count
        %vk:max-image-count
        %vk:current-extent
        %vk:min-image-extent
        %vk:max-image-extent
        %vk:max-image-array-layers
        %vk:supported-transforms
        %vk:current-transform
        %vk:supported-composite-alpha
        %vk:supported-usage-flags
        %vk:supported-surface-counters)
       ,ptr
       (:struct %vk:surface-capabilities-2-ext))
    (make-instance 'vk:surface-capabilities-2-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :min-image-count %vk:min-image-count
                   :max-image-count %vk:max-image-count
                   :current-extent %vk:current-extent
                   :min-image-extent %vk:min-image-extent
                   :max-image-extent %vk:max-image-extent
                   :max-image-array-layers %vk:max-image-array-layers
                   :supported-transforms %vk:supported-transforms
                   :current-transform %vk:current-transform
                   :supported-composite-alpha %vk:supported-composite-alpha
                   :supported-usage-flags %vk:supported-usage-flags
                   :supported-surface-counters %vk:supported-surface-counters)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-display-power-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:power-state)
       ,ptr
       (:struct %vk:display-power-info-ext))
    (make-instance 'vk:display-power-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :power-state %vk:power-state)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-device-event-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:device-event)
       ,ptr
       (:struct %vk:device-event-info-ext))
    (make-instance 'vk:device-event-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :device-event %vk:device-event)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-display-event-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:display-event)
       ,ptr
       (:struct %vk:display-event-info-ext))
    (make-instance 'vk:display-event-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :display-event %vk:display-event)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-swapchain-counter-create-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:surface-counters)
       ,ptr
       (:struct %vk:swapchain-counter-create-info-ext))
    (make-instance 'vk:swapchain-counter-create-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :surface-counters %vk:surface-counters)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-group-properties))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:physical-device-count
        %vk:physical-devices
        %vk:subset-allocation)
       ,ptr
       (:struct %vk:physical-device-group-properties))
    (make-instance 'vk:physical-device-group-properties
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :physical-device-count %vk:physical-device-count
                   :physical-devices (vk:make-physical-device-wrapper %vk:physical-devices)
                   :subset-allocation %vk:subset-allocation)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-memory-allocate-flags-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:device-mask)
       ,ptr
       (:struct %vk:memory-allocate-flags-info))
    (make-instance 'vk:memory-allocate-flags-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :device-mask %vk:device-mask)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-bind-buffer-memory-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:buffer
        %vk:memory
        %vk:memory-offset)
       ,ptr
       (:struct %vk:bind-buffer-memory-info))
    (make-instance 'vk:bind-buffer-memory-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :buffer (vk:make-buffer-wrapper %vk:buffer)
                   :memory (vk:make-device-memory-wrapper %vk:memory)
                   :memory-offset %vk:memory-offset)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-bind-buffer-memory-device-group-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:device-index-count
        %vk:p-device-indices)
       ,ptr
       (:struct %vk:bind-buffer-memory-device-group-info))
    (make-instance 'vk:bind-buffer-memory-device-group-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :device-indices (loop for i from 0 below %vk:device-index-count collect (cffi:mem-aref %vk:p-device-indices :uint32 i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-bind-image-memory-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:image
        %vk:memory
        %vk:memory-offset)
       ,ptr
       (:struct %vk:bind-image-memory-info))
    (make-instance 'vk:bind-image-memory-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :image (vk:make-image-wrapper %vk:image)
                   :memory (vk:make-device-memory-wrapper %vk:memory)
                   :memory-offset %vk:memory-offset)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-bind-image-memory-device-group-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:device-index-count
        %vk:p-device-indices
        %vk:split-instance-bind-region-count
        %vk:p-split-instance-bind-regions)
       ,ptr
       (:struct %vk:bind-image-memory-device-group-info))
    (make-instance 'vk:bind-image-memory-device-group-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :device-indices (loop for i from 0 below %vk:device-index-count collect (cffi:mem-aref %vk:p-device-indices :uint32 i))
                   :split-instance-bind-regions (loop for i from 0 below %vk:split-instance-bind-region-count collect (cffi:mem-aref %vk:p-split-instance-bind-regions '(:struct %vk:rect-2d) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-device-group-render-pass-begin-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:device-mask
        %vk:device-render-area-count
        %vk:p-device-render-areas)
       ,ptr
       (:struct %vk:device-group-render-pass-begin-info))
    (make-instance 'vk:device-group-render-pass-begin-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :device-mask %vk:device-mask
                   :device-render-areas (loop for i from 0 below %vk:device-render-area-count collect (cffi:mem-aref %vk:p-device-render-areas '(:struct %vk:rect-2d) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-device-group-command-buffer-begin-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:device-mask)
       ,ptr
       (:struct %vk:device-group-command-buffer-begin-info))
    (make-instance 'vk:device-group-command-buffer-begin-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :device-mask %vk:device-mask)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-device-group-submit-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:wait-semaphore-count
        %vk:p-wait-semaphore-device-indices
        %vk:command-buffer-count
        %vk:p-command-buffer-device-masks
        %vk:signal-semaphore-count
        %vk:p-signal-semaphore-device-indices)
       ,ptr
       (:struct %vk:device-group-submit-info))
    (make-instance 'vk:device-group-submit-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :wait-semaphore-device-indices (loop for i from 0 below %vk:wait-semaphore-count collect (cffi:mem-aref %vk:p-wait-semaphore-device-indices :uint32 i))
                   :command-buffer-device-masks (loop for i from 0 below %vk:command-buffer-count collect (cffi:mem-aref %vk:p-command-buffer-device-masks :uint32 i))
                   :signal-semaphore-device-indices (loop for i from 0 below %vk:signal-semaphore-count collect (cffi:mem-aref %vk:p-signal-semaphore-device-indices :uint32 i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-device-group-bind-sparse-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:resource-device-index
        %vk:memory-device-index)
       ,ptr
       (:struct %vk:device-group-bind-sparse-info))
    (make-instance 'vk:device-group-bind-sparse-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :resource-device-index %vk:resource-device-index
                   :memory-device-index %vk:memory-device-index)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-device-group-present-capabilities-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:present-mask
        %vk:modes)
       ,ptr
       (:struct %vk:device-group-present-capabilities-khr))
    (make-instance 'vk:device-group-present-capabilities-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :present-mask (cl:coerce (loop for i from 0 below 32 collect (cffi:mem-aref %vk:present-mask :uint32 i)) 'vector)
                   :modes %vk:modes)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-image-swapchain-create-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:swapchain)
       ,ptr
       (:struct %vk:image-swapchain-create-info-khr))
    (make-instance 'vk:image-swapchain-create-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :swapchain (vk:make-swapchain-khr-wrapper %vk:swapchain))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-bind-image-memory-swapchain-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:swapchain
        %vk:image-index)
       ,ptr
       (:struct %vk:bind-image-memory-swapchain-info-khr))
    (make-instance 'vk:bind-image-memory-swapchain-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :swapchain (vk:make-swapchain-khr-wrapper %vk:swapchain)
                   :image-index %vk:image-index)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-acquire-next-image-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:swapchain
        %vk:timeout
        %vk:semaphore
        %vk:fence
        %vk:device-mask)
       ,ptr
       (:struct %vk:acquire-next-image-info-khr))
    (make-instance 'vk:acquire-next-image-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :swapchain (vk:make-swapchain-khr-wrapper %vk:swapchain)
                   :timeout %vk:timeout
                   :semaphore (vk:make-semaphore-wrapper %vk:semaphore)
                   :fence (vk:make-fence-wrapper %vk:fence)
                   :device-mask %vk:device-mask)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-device-group-present-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:swapchain-count
        %vk:p-device-masks
        %vk:mode)
       ,ptr
       (:struct %vk:device-group-present-info-khr))
    (make-instance 'vk:device-group-present-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :device-masks (loop for i from 0 below %vk:swapchain-count collect (cffi:mem-aref %vk:p-device-masks :uint32 i))
                   :mode %vk:mode)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-device-group-device-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:physical-device-count
        %vk:p-physical-devices)
       ,ptr
       (:struct %vk:device-group-device-create-info))
    (make-instance 'vk:device-group-device-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :physical-devices (loop for i from 0 below %vk:physical-device-count collect (vk:make-physical-device-wrapper (cffi:mem-aref %vk:p-physical-devices '%vk:physical-device i))))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-device-group-swapchain-create-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:modes)
       ,ptr
       (:struct %vk:device-group-swapchain-create-info-khr))
    (make-instance 'vk:device-group-swapchain-create-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :modes %vk:modes)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-descriptor-update-template-entry))
  `(cffi:with-foreign-slots
      ((%vk:dst-binding
        %vk:dst-array-element
        %vk:descriptor-count
        %vk:descriptor-type
        %vk:offset
        %vk:stride)
       ,ptr
       (:struct %vk:descriptor-update-template-entry))
    (make-instance 'vk:descriptor-update-template-entry
                   :dst-binding %vk:dst-binding
                   :dst-array-element %vk:dst-array-element
                   :descriptor-count %vk:descriptor-count
                   :descriptor-type %vk:descriptor-type
                   :offset %vk:offset
                   :stride %vk:stride)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-descriptor-update-template-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:descriptor-update-entry-count
        %vk:p-descriptor-update-entries
        %vk:template-type
        %vk:descriptor-set-layout
        %vk:pipeline-bind-point
        %vk:pipeline-layout
        %vk:set)
       ,ptr
       (:struct %vk:descriptor-update-template-create-info))
    (make-instance 'vk:descriptor-update-template-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :descriptor-update-entries (loop for i from 0 below %vk:descriptor-update-entry-count collect (cffi:mem-aref %vk:p-descriptor-update-entries '(:struct %vk:descriptor-update-template-entry) i))
                   :template-type %vk:template-type
                   :descriptor-set-layout (vk:make-descriptor-set-layout-wrapper %vk:descriptor-set-layout)
                   :pipeline-bind-point %vk:pipeline-bind-point
                   :pipeline-layout (vk:make-pipeline-layout-wrapper %vk:pipeline-layout)
                   :set %vk:set)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-x-y-color-ext))
  `(cffi:with-foreign-slots
      ((%vk:x
        %vk:y)
       ,ptr
       (:struct %vk:x-y-color-ext))
    (make-instance 'vk:x-y-color-ext
                   :x %vk:x
                   :y %vk:y)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-present-id-features-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:present-id)
       ,ptr
       (:struct %vk:physical-device-present-id-features-khr))
    (make-instance 'vk:physical-device-present-id-features-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :present-id %vk:present-id)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-present-id-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:swapchain-count
        %vk:p-present-ids)
       ,ptr
       (:struct %vk:present-id-khr))
    (make-instance 'vk:present-id-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :present-ids (loop for i from 0 below %vk:swapchain-count collect (cffi:mem-aref %vk:p-present-ids :uint64 i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-present-wait-features-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:present-wait)
       ,ptr
       (:struct %vk:physical-device-present-wait-features-khr))
    (make-instance 'vk:physical-device-present-wait-features-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :present-wait %vk:present-wait)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-hdr-metadata-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:display-primary-red
        %vk:display-primary-green
        %vk:display-primary-blue
        %vk:white-point
        %vk:max-luminance
        %vk:min-luminance
        %vk:max-content-light-level
        %vk:max-frame-average-light-level)
       ,ptr
       (:struct %vk:hdr-metadata-ext))
    (make-instance 'vk:hdr-metadata-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :display-primary-red %vk:display-primary-red
                   :display-primary-green %vk:display-primary-green
                   :display-primary-blue %vk:display-primary-blue
                   :white-point %vk:white-point
                   :max-luminance %vk:max-luminance
                   :min-luminance %vk:min-luminance
                   :max-content-light-level %vk:max-content-light-level
                   :max-frame-average-light-level %vk:max-frame-average-light-level)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-display-native-hdr-surface-capabilities-amd))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:local-dimming-support)
       ,ptr
       (:struct %vk:display-native-hdr-surface-capabilities-amd))
    (make-instance 'vk:display-native-hdr-surface-capabilities-amd
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :local-dimming-support %vk:local-dimming-support)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-swapchain-display-native-hdr-create-info-amd))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:local-dimming-enable)
       ,ptr
       (:struct %vk:swapchain-display-native-hdr-create-info-amd))
    (make-instance 'vk:swapchain-display-native-hdr-create-info-amd
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :local-dimming-enable %vk:local-dimming-enable)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-refresh-cycle-duration-google))
  `(cffi:with-foreign-slots
      ((%vk:refresh-duration)
       ,ptr
       (:struct %vk:refresh-cycle-duration-google))
    (make-instance 'vk:refresh-cycle-duration-google
                   :refresh-duration %vk:refresh-duration)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-past-presentation-timing-google))
  `(cffi:with-foreign-slots
      ((%vk:present-id
        %vk:desired-present-time
        %vk:actual-present-time
        %vk:earliest-present-time
        %vk:present-margin)
       ,ptr
       (:struct %vk:past-presentation-timing-google))
    (make-instance 'vk:past-presentation-timing-google
                   :present-id %vk:present-id
                   :desired-present-time %vk:desired-present-time
                   :actual-present-time %vk:actual-present-time
                   :earliest-present-time %vk:earliest-present-time
                   :present-margin %vk:present-margin)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-present-times-info-google))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:swapchain-count
        %vk:p-times)
       ,ptr
       (:struct %vk:present-times-info-google))
    (make-instance 'vk:present-times-info-google
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :swapchain-count %vk:swapchain-count
                   :times %vk:p-times)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-present-time-google))
  `(cffi:with-foreign-slots
      ((%vk:present-id
        %vk:desired-present-time)
       ,ptr
       (:struct %vk:present-time-google))
    (make-instance 'vk:present-time-google
                   :present-id %vk:present-id
                   :desired-present-time %vk:desired-present-time)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-ios-surface-create-info-mvk))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:p-view)
       ,ptr
       (:struct %vk:ios-surface-create-info-mvk))
    (make-instance 'vk:ios-surface-create-info-mvk
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :view %vk:p-view)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-mac-os-surface-create-info-mvk))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:p-view)
       ,ptr
       (:struct %vk:mac-os-surface-create-info-mvk))
    (make-instance 'vk:mac-os-surface-create-info-mvk
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :view %vk:p-view)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-metal-surface-create-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:p-layer)
       ,ptr
       (:struct %vk:metal-surface-create-info-ext))
    (make-instance 'vk:metal-surface-create-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :layer %vk:p-layer)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-viewport-w-scaling-nv))
  `(cffi:with-foreign-slots
      ((%vk:xcoeff
        %vk:ycoeff)
       ,ptr
       (:struct %vk:viewport-w-scaling-nv))
    (make-instance 'vk:viewport-w-scaling-nv
                   :xcoeff %vk:xcoeff
                   :ycoeff %vk:ycoeff)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-viewport-w-scaling-state-create-info-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:viewport-w-scaling-enable
        %vk:viewport-count
        %vk:p-viewport-w-scalings)
       ,ptr
       (:struct %vk:pipeline-viewport-w-scaling-state-create-info-nv))
    (make-instance 'vk:pipeline-viewport-w-scaling-state-create-info-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :viewport-w-scaling-enable %vk:viewport-w-scaling-enable
                   :viewport-w-scalings (loop for i from 0 below %vk:viewport-count collect (cffi:mem-aref %vk:p-viewport-w-scalings '(:struct %vk:viewport-w-scaling-nv) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-viewport-swizzle-nv))
  `(cffi:with-foreign-slots
      ((%vk:x
        %vk:y
        %vk:z
        %vk:w)
       ,ptr
       (:struct %vk:viewport-swizzle-nv))
    (make-instance 'vk:viewport-swizzle-nv
                   :x %vk:x
                   :y %vk:y
                   :z %vk:z
                   :w %vk:w)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-viewport-swizzle-state-create-info-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:viewport-count
        %vk:p-viewport-swizzles)
       ,ptr
       (:struct %vk:pipeline-viewport-swizzle-state-create-info-nv))
    (make-instance 'vk:pipeline-viewport-swizzle-state-create-info-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :viewport-swizzles (loop for i from 0 below %vk:viewport-count collect (cffi:mem-aref %vk:p-viewport-swizzles '(:struct %vk:viewport-swizzle-nv) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-discard-rectangle-properties-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:max-discard-rectangles)
       ,ptr
       (:struct %vk:physical-device-discard-rectangle-properties-ext))
    (make-instance 'vk:physical-device-discard-rectangle-properties-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :max-discard-rectangles %vk:max-discard-rectangles)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-discard-rectangle-state-create-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:discard-rectangle-mode
        %vk:discard-rectangle-count
        %vk:p-discard-rectangles)
       ,ptr
       (:struct %vk:pipeline-discard-rectangle-state-create-info-ext))
    (make-instance 'vk:pipeline-discard-rectangle-state-create-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :discard-rectangle-mode %vk:discard-rectangle-mode
                   :discard-rectangles (loop for i from 0 below %vk:discard-rectangle-count collect (cffi:mem-aref %vk:p-discard-rectangles '(:struct %vk:rect-2d) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-multiview-per-view-attributes-properties-nvx))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:per-view-position-all-components)
       ,ptr
       (:struct %vk:physical-device-multiview-per-view-attributes-properties-nvx))
    (make-instance 'vk:physical-device-multiview-per-view-attributes-properties-nvx
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :per-view-position-all-components %vk:per-view-position-all-components)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-input-attachment-aspect-reference))
  `(cffi:with-foreign-slots
      ((%vk:subpass
        %vk:input-attachment-index
        %vk:aspect-mask)
       ,ptr
       (:struct %vk:input-attachment-aspect-reference))
    (make-instance 'vk:input-attachment-aspect-reference
                   :subpass %vk:subpass
                   :input-attachment-index %vk:input-attachment-index
                   :aspect-mask %vk:aspect-mask)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-render-pass-input-attachment-aspect-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:aspect-reference-count
        %vk:p-aspect-references)
       ,ptr
       (:struct %vk:render-pass-input-attachment-aspect-create-info))
    (make-instance 'vk:render-pass-input-attachment-aspect-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :aspect-references (loop for i from 0 below %vk:aspect-reference-count collect (cffi:mem-aref %vk:p-aspect-references '(:struct %vk:input-attachment-aspect-reference) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-surface-info-2-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:surface)
       ,ptr
       (:struct %vk:physical-device-surface-info-2-khr))
    (make-instance 'vk:physical-device-surface-info-2-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :surface (vk:make-surface-khr-wrapper %vk:surface))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-surface-capabilities-2-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:surface-capabilities)
       ,ptr
       (:struct %vk:surface-capabilities-2-khr))
    (make-instance 'vk:surface-capabilities-2-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :surface-capabilities %vk:surface-capabilities)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-surface-format-2-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:surface-format)
       ,ptr
       (:struct %vk:surface-format-2-khr))
    (make-instance 'vk:surface-format-2-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :surface-format %vk:surface-format)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-display-properties-2-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:display-properties)
       ,ptr
       (:struct %vk:display-properties-2-khr))
    (make-instance 'vk:display-properties-2-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :display-properties %vk:display-properties)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-display-plane-properties-2-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:display-plane-properties)
       ,ptr
       (:struct %vk:display-plane-properties-2-khr))
    (make-instance 'vk:display-plane-properties-2-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :display-plane-properties %vk:display-plane-properties)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-display-mode-properties-2-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:display-mode-properties)
       ,ptr
       (:struct %vk:display-mode-properties-2-khr))
    (make-instance 'vk:display-mode-properties-2-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :display-mode-properties %vk:display-mode-properties)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-display-plane-info-2-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:mode
        %vk:plane-index)
       ,ptr
       (:struct %vk:display-plane-info-2-khr))
    (make-instance 'vk:display-plane-info-2-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :mode (vk:make-display-mode-khr-wrapper %vk:mode)
                   :plane-index %vk:plane-index)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-display-plane-capabilities-2-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:capabilities)
       ,ptr
       (:struct %vk:display-plane-capabilities-2-khr))
    (make-instance 'vk:display-plane-capabilities-2-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :capabilities %vk:capabilities)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-shared-present-surface-capabilities-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:shared-present-supported-usage-flags)
       ,ptr
       (:struct %vk:shared-present-surface-capabilities-khr))
    (make-instance 'vk:shared-present-surface-capabilities-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :shared-present-supported-usage-flags %vk:shared-present-supported-usage-flags)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-16-bit-storage-features))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:storage-buffer-16-bit-access
        %vk:uniform-and-storage-buffer-16-bit-access
        %vk:storage-push-constant-16
        %vk:storage-input-output-16)
       ,ptr
       (:struct %vk:physical-device-16-bit-storage-features))
    (make-instance 'vk:physical-device-16-bit-storage-features
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :storage-buffer-16-bit-access %vk:storage-buffer-16-bit-access
                   :uniform-and-storage-buffer-16-bit-access %vk:uniform-and-storage-buffer-16-bit-access
                   :storage-push-constant-16 %vk:storage-push-constant-16
                   :storage-input-output-16 %vk:storage-input-output-16)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-subgroup-properties))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:subgroup-size
        %vk:supported-stages
        %vk:supported-operations
        %vk:quad-operations-in-all-stages)
       ,ptr
       (:struct %vk:physical-device-subgroup-properties))
    (make-instance 'vk:physical-device-subgroup-properties
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :subgroup-size %vk:subgroup-size
                   :supported-stages %vk:supported-stages
                   :supported-operations %vk:supported-operations
                   :quad-operations-in-all-stages %vk:quad-operations-in-all-stages)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-shader-subgroup-extended-types-features))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:shader-subgroup-extended-types)
       ,ptr
       (:struct %vk:physical-device-shader-subgroup-extended-types-features))
    (make-instance 'vk:physical-device-shader-subgroup-extended-types-features
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :shader-subgroup-extended-types %vk:shader-subgroup-extended-types)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-buffer-memory-requirements-info-2))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:buffer)
       ,ptr
       (:struct %vk:buffer-memory-requirements-info-2))
    (make-instance 'vk:buffer-memory-requirements-info-2
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :buffer (vk:make-buffer-wrapper %vk:buffer))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-device-buffer-memory-requirements-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:p-create-info)
       ,ptr
       (:struct %vk:device-buffer-memory-requirements-khr))
    (make-instance 'vk:device-buffer-memory-requirements-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :create-info %vk:p-create-info)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-image-memory-requirements-info-2))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:image)
       ,ptr
       (:struct %vk:image-memory-requirements-info-2))
    (make-instance 'vk:image-memory-requirements-info-2
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :image (vk:make-image-wrapper %vk:image))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-image-sparse-memory-requirements-info-2))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:image)
       ,ptr
       (:struct %vk:image-sparse-memory-requirements-info-2))
    (make-instance 'vk:image-sparse-memory-requirements-info-2
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :image (vk:make-image-wrapper %vk:image))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-device-image-memory-requirements-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:p-create-info
        %vk:plane-aspect)
       ,ptr
       (:struct %vk:device-image-memory-requirements-khr))
    (make-instance 'vk:device-image-memory-requirements-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :create-info %vk:p-create-info
                   :plane-aspect %vk:plane-aspect)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-memory-requirements-2))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:memory-requirements)
       ,ptr
       (:struct %vk:memory-requirements-2))
    (make-instance 'vk:memory-requirements-2
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :memory-requirements %vk:memory-requirements)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-sparse-image-memory-requirements-2))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:memory-requirements)
       ,ptr
       (:struct %vk:sparse-image-memory-requirements-2))
    (make-instance 'vk:sparse-image-memory-requirements-2
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :memory-requirements %vk:memory-requirements)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-point-clipping-properties))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:point-clipping-behavior)
       ,ptr
       (:struct %vk:physical-device-point-clipping-properties))
    (make-instance 'vk:physical-device-point-clipping-properties
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :point-clipping-behavior %vk:point-clipping-behavior)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-memory-dedicated-requirements))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:prefers-dedicated-allocation
        %vk:requires-dedicated-allocation)
       ,ptr
       (:struct %vk:memory-dedicated-requirements))
    (make-instance 'vk:memory-dedicated-requirements
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :prefers-dedicated-allocation %vk:prefers-dedicated-allocation
                   :requires-dedicated-allocation %vk:requires-dedicated-allocation)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-memory-dedicated-allocate-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:image
        %vk:buffer)
       ,ptr
       (:struct %vk:memory-dedicated-allocate-info))
    (make-instance 'vk:memory-dedicated-allocate-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :image (vk:make-image-wrapper %vk:image)
                   :buffer (vk:make-buffer-wrapper %vk:buffer))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-image-view-usage-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:usage)
       ,ptr
       (:struct %vk:image-view-usage-create-info))
    (make-instance 'vk:image-view-usage-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :usage %vk:usage)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-tessellation-domain-origin-state-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:domain-origin)
       ,ptr
       (:struct %vk:pipeline-tessellation-domain-origin-state-create-info))
    (make-instance 'vk:pipeline-tessellation-domain-origin-state-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :domain-origin %vk:domain-origin)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-sampler-ycbcr-conversion-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:conversion)
       ,ptr
       (:struct %vk:sampler-ycbcr-conversion-info))
    (make-instance 'vk:sampler-ycbcr-conversion-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :conversion (vk:make-sampler-ycbcr-conversion-wrapper %vk:conversion))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-sampler-ycbcr-conversion-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:format
        %vk:ycbcr-model
        %vk:ycbcr-range
        %vk:components
        %vk:x-chroma-offset
        %vk:y-chroma-offset
        %vk:chroma-filter
        %vk:force-explicit-reconstruction)
       ,ptr
       (:struct %vk:sampler-ycbcr-conversion-create-info))
    (make-instance 'vk:sampler-ycbcr-conversion-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :format %vk:format
                   :ycbcr-model %vk:ycbcr-model
                   :ycbcr-range %vk:ycbcr-range
                   :components %vk:components
                   :x-chroma-offset %vk:x-chroma-offset
                   :y-chroma-offset %vk:y-chroma-offset
                   :chroma-filter %vk:chroma-filter
                   :force-explicit-reconstruction %vk:force-explicit-reconstruction)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-bind-image-plane-memory-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:plane-aspect)
       ,ptr
       (:struct %vk:bind-image-plane-memory-info))
    (make-instance 'vk:bind-image-plane-memory-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :plane-aspect %vk:plane-aspect)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-image-plane-memory-requirements-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:plane-aspect)
       ,ptr
       (:struct %vk:image-plane-memory-requirements-info))
    (make-instance 'vk:image-plane-memory-requirements-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :plane-aspect %vk:plane-aspect)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-sampler-ycbcr-conversion-features))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:sampler-ycbcr-conversion)
       ,ptr
       (:struct %vk:physical-device-sampler-ycbcr-conversion-features))
    (make-instance 'vk:physical-device-sampler-ycbcr-conversion-features
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :sampler-ycbcr-conversion %vk:sampler-ycbcr-conversion)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-sampler-ycbcr-conversion-image-format-properties))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:combined-image-sampler-descriptor-count)
       ,ptr
       (:struct %vk:sampler-ycbcr-conversion-image-format-properties))
    (make-instance 'vk:sampler-ycbcr-conversion-image-format-properties
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :combined-image-sampler-descriptor-count %vk:combined-image-sampler-descriptor-count)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-texture-l-o-d-gather-format-properties-amd))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:supports-texture-gather-l-o-d-bias-amd)
       ,ptr
       (:struct %vk:texture-l-o-d-gather-format-properties-amd))
    (make-instance 'vk:texture-l-o-d-gather-format-properties-amd
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :supports-texture-gather-l-o-d-bias-amd %vk:supports-texture-gather-l-o-d-bias-amd)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-conditional-rendering-begin-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:buffer
        %vk:offset
        %vk:flags)
       ,ptr
       (:struct %vk:conditional-rendering-begin-info-ext))
    (make-instance 'vk:conditional-rendering-begin-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :buffer (vk:make-buffer-wrapper %vk:buffer)
                   :offset %vk:offset
                   :flags %vk:flags)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-protected-submit-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:protected-submit)
       ,ptr
       (:struct %vk:protected-submit-info))
    (make-instance 'vk:protected-submit-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :protected-submit %vk:protected-submit)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-protected-memory-features))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:protected-memory)
       ,ptr
       (:struct %vk:physical-device-protected-memory-features))
    (make-instance 'vk:physical-device-protected-memory-features
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :protected-memory %vk:protected-memory)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-protected-memory-properties))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:protected-no-fault)
       ,ptr
       (:struct %vk:physical-device-protected-memory-properties))
    (make-instance 'vk:physical-device-protected-memory-properties
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :protected-no-fault %vk:protected-no-fault)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-device-queue-info-2))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:queue-family-index
        %vk:queue-index)
       ,ptr
       (:struct %vk:device-queue-info-2))
    (make-instance 'vk:device-queue-info-2
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :queue-family-index %vk:queue-family-index
                   :queue-index %vk:queue-index)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-coverage-to-color-state-create-info-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:coverage-to-color-enable
        %vk:coverage-to-color-location)
       ,ptr
       (:struct %vk:pipeline-coverage-to-color-state-create-info-nv))
    (make-instance 'vk:pipeline-coverage-to-color-state-create-info-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :coverage-to-color-enable %vk:coverage-to-color-enable
                   :coverage-to-color-location %vk:coverage-to-color-location)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-sampler-filter-minmax-properties))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:filter-minmax-single-component-formats
        %vk:filter-minmax-image-component-mapping)
       ,ptr
       (:struct %vk:physical-device-sampler-filter-minmax-properties))
    (make-instance 'vk:physical-device-sampler-filter-minmax-properties
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :filter-minmax-single-component-formats %vk:filter-minmax-single-component-formats
                   :filter-minmax-image-component-mapping %vk:filter-minmax-image-component-mapping)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-sample-location-ext))
  `(cffi:with-foreign-slots
      ((%vk:x
        %vk:y)
       ,ptr
       (:struct %vk:sample-location-ext))
    (make-instance 'vk:sample-location-ext
                   :x %vk:x
                   :y %vk:y)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-sample-locations-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:sample-locations-per-pixel
        %vk:sample-location-grid-size
        %vk:sample-locations-count
        %vk:p-sample-locations)
       ,ptr
       (:struct %vk:sample-locations-info-ext))
    (make-instance 'vk:sample-locations-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :sample-locations-per-pixel %vk:sample-locations-per-pixel
                   :sample-location-grid-size %vk:sample-location-grid-size
                   :sample-locations (loop for i from 0 below %vk:sample-locations-count collect (cffi:mem-aref %vk:p-sample-locations '(:struct %vk:sample-location-ext) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-attachment-sample-locations-ext))
  `(cffi:with-foreign-slots
      ((%vk:attachment-index
        %vk:sample-locations-info)
       ,ptr
       (:struct %vk:attachment-sample-locations-ext))
    (make-instance 'vk:attachment-sample-locations-ext
                   :attachment-index %vk:attachment-index
                   :sample-locations-info %vk:sample-locations-info)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-subpass-sample-locations-ext))
  `(cffi:with-foreign-slots
      ((%vk:subpass-index
        %vk:sample-locations-info)
       ,ptr
       (:struct %vk:subpass-sample-locations-ext))
    (make-instance 'vk:subpass-sample-locations-ext
                   :subpass-index %vk:subpass-index
                   :sample-locations-info %vk:sample-locations-info)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-render-pass-sample-locations-begin-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:attachment-initial-sample-locations-count
        %vk:p-attachment-initial-sample-locations
        %vk:post-subpass-sample-locations-count
        %vk:p-post-subpass-sample-locations)
       ,ptr
       (:struct %vk:render-pass-sample-locations-begin-info-ext))
    (make-instance 'vk:render-pass-sample-locations-begin-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :attachment-initial-sample-locations (loop for i from 0 below %vk:attachment-initial-sample-locations-count collect (cffi:mem-aref %vk:p-attachment-initial-sample-locations '(:struct %vk:attachment-sample-locations-ext) i))
                   :post-subpass-sample-locations (loop for i from 0 below %vk:post-subpass-sample-locations-count collect (cffi:mem-aref %vk:p-post-subpass-sample-locations '(:struct %vk:subpass-sample-locations-ext) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-sample-locations-state-create-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:sample-locations-enable
        %vk:sample-locations-info)
       ,ptr
       (:struct %vk:pipeline-sample-locations-state-create-info-ext))
    (make-instance 'vk:pipeline-sample-locations-state-create-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :sample-locations-enable %vk:sample-locations-enable
                   :sample-locations-info %vk:sample-locations-info)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-sample-locations-properties-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:sample-location-sample-counts
        %vk:max-sample-location-grid-size
        %vk:sample-location-coordinate-range
        %vk:sample-location-sub-pixel-bits
        %vk:variable-sample-locations)
       ,ptr
       (:struct %vk:physical-device-sample-locations-properties-ext))
    (make-instance 'vk:physical-device-sample-locations-properties-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :sample-location-sample-counts %vk:sample-location-sample-counts
                   :max-sample-location-grid-size %vk:max-sample-location-grid-size
                   :sample-location-coordinate-range (cl:coerce (loop for i from 0 below 2 collect (cffi:mem-aref %vk:sample-location-coordinate-range :float i)) 'vector)
                   :sample-location-sub-pixel-bits %vk:sample-location-sub-pixel-bits
                   :variable-sample-locations %vk:variable-sample-locations)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-multisample-properties-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:max-sample-location-grid-size)
       ,ptr
       (:struct %vk:multisample-properties-ext))
    (make-instance 'vk:multisample-properties-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :max-sample-location-grid-size %vk:max-sample-location-grid-size)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-sampler-reduction-mode-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:reduction-mode)
       ,ptr
       (:struct %vk:sampler-reduction-mode-create-info))
    (make-instance 'vk:sampler-reduction-mode-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :reduction-mode %vk:reduction-mode)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-blend-operation-advanced-features-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:advanced-blend-coherent-operations)
       ,ptr
       (:struct %vk:physical-device-blend-operation-advanced-features-ext))
    (make-instance 'vk:physical-device-blend-operation-advanced-features-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :advanced-blend-coherent-operations %vk:advanced-blend-coherent-operations)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-multi-draw-features-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:multi-draw)
       ,ptr
       (:struct %vk:physical-device-multi-draw-features-ext))
    (make-instance 'vk:physical-device-multi-draw-features-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :multi-draw %vk:multi-draw)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-blend-operation-advanced-properties-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:advanced-blend-max-color-attachments
        %vk:advanced-blend-independent-blend
        %vk:advanced-blend-non-premultiplied-src-color
        %vk:advanced-blend-non-premultiplied-dst-color
        %vk:advanced-blend-correlated-overlap
        %vk:advanced-blend-all-operations)
       ,ptr
       (:struct %vk:physical-device-blend-operation-advanced-properties-ext))
    (make-instance 'vk:physical-device-blend-operation-advanced-properties-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :advanced-blend-max-color-attachments %vk:advanced-blend-max-color-attachments
                   :advanced-blend-independent-blend %vk:advanced-blend-independent-blend
                   :advanced-blend-non-premultiplied-src-color %vk:advanced-blend-non-premultiplied-src-color
                   :advanced-blend-non-premultiplied-dst-color %vk:advanced-blend-non-premultiplied-dst-color
                   :advanced-blend-correlated-overlap %vk:advanced-blend-correlated-overlap
                   :advanced-blend-all-operations %vk:advanced-blend-all-operations)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-color-blend-advanced-state-create-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:src-premultiplied
        %vk:dst-premultiplied
        %vk:blend-overlap)
       ,ptr
       (:struct %vk:pipeline-color-blend-advanced-state-create-info-ext))
    (make-instance 'vk:pipeline-color-blend-advanced-state-create-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :src-premultiplied %vk:src-premultiplied
                   :dst-premultiplied %vk:dst-premultiplied
                   :blend-overlap %vk:blend-overlap)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-inline-uniform-block-features-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:inline-uniform-block
        %vk:descriptor-binding-inline-uniform-block-update-after-bind)
       ,ptr
       (:struct %vk:physical-device-inline-uniform-block-features-ext))
    (make-instance 'vk:physical-device-inline-uniform-block-features-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :inline-uniform-block %vk:inline-uniform-block
                   :descriptor-binding-inline-uniform-block-update-after-bind %vk:descriptor-binding-inline-uniform-block-update-after-bind)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-inline-uniform-block-properties-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:max-inline-uniform-block-size
        %vk:max-per-stage-descriptor-inline-uniform-blocks
        %vk:max-per-stage-descriptor-update-after-bind-inline-uniform-blocks
        %vk:max-descriptor-set-inline-uniform-blocks
        %vk:max-descriptor-set-update-after-bind-inline-uniform-blocks)
       ,ptr
       (:struct %vk:physical-device-inline-uniform-block-properties-ext))
    (make-instance 'vk:physical-device-inline-uniform-block-properties-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :max-inline-uniform-block-size %vk:max-inline-uniform-block-size
                   :max-per-stage-descriptor-inline-uniform-blocks %vk:max-per-stage-descriptor-inline-uniform-blocks
                   :max-per-stage-descriptor-update-after-bind-inline-uniform-blocks %vk:max-per-stage-descriptor-update-after-bind-inline-uniform-blocks
                   :max-descriptor-set-inline-uniform-blocks %vk:max-descriptor-set-inline-uniform-blocks
                   :max-descriptor-set-update-after-bind-inline-uniform-blocks %vk:max-descriptor-set-update-after-bind-inline-uniform-blocks)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-write-descriptor-set-inline-uniform-block-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:data-size
        %vk:p-data)
       ,ptr
       (:struct %vk:write-descriptor-set-inline-uniform-block-ext))
    (make-instance 'vk:write-descriptor-set-inline-uniform-block-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :data-size %vk:data-size
                   :data %vk:p-data)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-descriptor-pool-inline-uniform-block-create-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:max-inline-uniform-block-bindings)
       ,ptr
       (:struct %vk:descriptor-pool-inline-uniform-block-create-info-ext))
    (make-instance 'vk:descriptor-pool-inline-uniform-block-create-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :max-inline-uniform-block-bindings %vk:max-inline-uniform-block-bindings)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-coverage-modulation-state-create-info-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:coverage-modulation-mode
        %vk:coverage-modulation-table-enable
        %vk:coverage-modulation-table-count
        %vk:p-coverage-modulation-table)
       ,ptr
       (:struct %vk:pipeline-coverage-modulation-state-create-info-nv))
    (make-instance 'vk:pipeline-coverage-modulation-state-create-info-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :coverage-modulation-mode %vk:coverage-modulation-mode
                   :coverage-modulation-table-enable %vk:coverage-modulation-table-enable
                   :coverage-modulation-table (loop for i from 0 below %vk:coverage-modulation-table-count collect (cffi:mem-aref %vk:p-coverage-modulation-table :float i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-image-format-list-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:view-format-count
        %vk:p-view-formats)
       ,ptr
       (:struct %vk:image-format-list-create-info))
    (make-instance 'vk:image-format-list-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :view-formats (loop for i from 0 below %vk:view-format-count collect (cffi:mem-aref %vk:p-view-formats '%vk:format i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-validation-cache-create-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:initial-data-size
        %vk:p-initial-data)
       ,ptr
       (:struct %vk:validation-cache-create-info-ext))
    (make-instance 'vk:validation-cache-create-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :initial-data-size %vk:initial-data-size
                   :initial-data %vk:p-initial-data)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-shader-module-validation-cache-create-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:validation-cache)
       ,ptr
       (:struct %vk:shader-module-validation-cache-create-info-ext))
    (make-instance 'vk:shader-module-validation-cache-create-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :validation-cache (vk:make-validation-cache-ext-wrapper %vk:validation-cache))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-maintenance-3-properties))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:max-per-set-descriptors
        %vk:max-memory-allocation-size)
       ,ptr
       (:struct %vk:physical-device-maintenance-3-properties))
    (make-instance 'vk:physical-device-maintenance-3-properties
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :max-per-set-descriptors %vk:max-per-set-descriptors
                   :max-memory-allocation-size %vk:max-memory-allocation-size)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-maintenance-4-features-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:maintenance-4)
       ,ptr
       (:struct %vk:physical-device-maintenance-4-features-khr))
    (make-instance 'vk:physical-device-maintenance-4-features-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :maintenance-4 %vk:maintenance-4)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-maintenance-4-properties-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:max-buffer-size)
       ,ptr
       (:struct %vk:physical-device-maintenance-4-properties-khr))
    (make-instance 'vk:physical-device-maintenance-4-properties-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :max-buffer-size %vk:max-buffer-size)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-descriptor-set-layout-support))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:supported)
       ,ptr
       (:struct %vk:descriptor-set-layout-support))
    (make-instance 'vk:descriptor-set-layout-support
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :supported %vk:supported)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-shader-draw-parameters-features))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:shader-draw-parameters)
       ,ptr
       (:struct %vk:physical-device-shader-draw-parameters-features))
    (make-instance 'vk:physical-device-shader-draw-parameters-features
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :shader-draw-parameters %vk:shader-draw-parameters)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-shader-float-16-int-8-features))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:shader-float-16
        %vk:shader-int-8)
       ,ptr
       (:struct %vk:physical-device-shader-float-16-int-8-features))
    (make-instance 'vk:physical-device-shader-float-16-int-8-features
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :shader-float-16 %vk:shader-float-16
                   :shader-int-8 %vk:shader-int-8)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-float-controls-properties))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:denorm-behavior-independence
        %vk:rounding-mode-independence
        %vk:shader-signed-zero-inf-nan-preserve-float-16
        %vk:shader-signed-zero-inf-nan-preserve-float-32
        %vk:shader-signed-zero-inf-nan-preserve-float-64
        %vk:shader-denorm-preserve-float-16
        %vk:shader-denorm-preserve-float-32
        %vk:shader-denorm-preserve-float-64
        %vk:shader-denorm-flush-to-zero-float-16
        %vk:shader-denorm-flush-to-zero-float-32
        %vk:shader-denorm-flush-to-zero-float-64
        %vk:shader-rounding-mode-rte-float-16
        %vk:shader-rounding-mode-rte-float-32
        %vk:shader-rounding-mode-rte-float-64
        %vk:shader-rounding-mode-rtz-float-16
        %vk:shader-rounding-mode-rtz-float-32
        %vk:shader-rounding-mode-rtz-float-64)
       ,ptr
       (:struct %vk:physical-device-float-controls-properties))
    (make-instance 'vk:physical-device-float-controls-properties
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :denorm-behavior-independence %vk:denorm-behavior-independence
                   :rounding-mode-independence %vk:rounding-mode-independence
                   :shader-signed-zero-inf-nan-preserve-float-16 %vk:shader-signed-zero-inf-nan-preserve-float-16
                   :shader-signed-zero-inf-nan-preserve-float-32 %vk:shader-signed-zero-inf-nan-preserve-float-32
                   :shader-signed-zero-inf-nan-preserve-float-64 %vk:shader-signed-zero-inf-nan-preserve-float-64
                   :shader-denorm-preserve-float-16 %vk:shader-denorm-preserve-float-16
                   :shader-denorm-preserve-float-32 %vk:shader-denorm-preserve-float-32
                   :shader-denorm-preserve-float-64 %vk:shader-denorm-preserve-float-64
                   :shader-denorm-flush-to-zero-float-16 %vk:shader-denorm-flush-to-zero-float-16
                   :shader-denorm-flush-to-zero-float-32 %vk:shader-denorm-flush-to-zero-float-32
                   :shader-denorm-flush-to-zero-float-64 %vk:shader-denorm-flush-to-zero-float-64
                   :shader-rounding-mode-rte-float-16 %vk:shader-rounding-mode-rte-float-16
                   :shader-rounding-mode-rte-float-32 %vk:shader-rounding-mode-rte-float-32
                   :shader-rounding-mode-rte-float-64 %vk:shader-rounding-mode-rte-float-64
                   :shader-rounding-mode-rtz-float-16 %vk:shader-rounding-mode-rtz-float-16
                   :shader-rounding-mode-rtz-float-32 %vk:shader-rounding-mode-rtz-float-32
                   :shader-rounding-mode-rtz-float-64 %vk:shader-rounding-mode-rtz-float-64)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-host-query-reset-features))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:host-query-reset)
       ,ptr
       (:struct %vk:physical-device-host-query-reset-features))
    (make-instance 'vk:physical-device-host-query-reset-features
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :host-query-reset %vk:host-query-reset)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-shader-resource-usage-amd))
  `(cffi:with-foreign-slots
      ((%vk:num-used-vgprs
        %vk:num-used-sgprs
        %vk:lds-size-per-local-work-group
        %vk:lds-usage-size-in-bytes
        %vk:scratch-mem-usage-in-bytes)
       ,ptr
       (:struct %vk:shader-resource-usage-amd))
    (make-instance 'vk:shader-resource-usage-amd
                   :num-used-vgprs %vk:num-used-vgprs
                   :num-used-sgprs %vk:num-used-sgprs
                   :lds-size-per-local-work-group %vk:lds-size-per-local-work-group
                   :lds-usage-size-in-bytes %vk:lds-usage-size-in-bytes
                   :scratch-mem-usage-in-bytes %vk:scratch-mem-usage-in-bytes)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-shader-statistics-info-amd))
  `(cffi:with-foreign-slots
      ((%vk:shader-stage-mask
        %vk:resource-usage
        %vk:num-physical-vgprs
        %vk:num-physical-sgprs
        %vk:num-available-vgprs
        %vk:num-available-sgprs
        %vk:compute-work-group-size)
       ,ptr
       (:struct %vk:shader-statistics-info-amd))
    (make-instance 'vk:shader-statistics-info-amd
                   :shader-stage-mask %vk:shader-stage-mask
                   :resource-usage %vk:resource-usage
                   :num-physical-vgprs %vk:num-physical-vgprs
                   :num-physical-sgprs %vk:num-physical-sgprs
                   :num-available-vgprs %vk:num-available-vgprs
                   :num-available-sgprs %vk:num-available-sgprs
                   :compute-work-group-size (cl:coerce (loop for i from 0 below 3 collect (cffi:mem-aref %vk:compute-work-group-size :uint32 i)) 'vector))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-device-queue-global-priority-create-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:global-priority)
       ,ptr
       (:struct %vk:device-queue-global-priority-create-info-ext))
    (make-instance 'vk:device-queue-global-priority-create-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :global-priority %vk:global-priority)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-global-priority-query-features-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:global-priority-query)
       ,ptr
       (:struct %vk:physical-device-global-priority-query-features-ext))
    (make-instance 'vk:physical-device-global-priority-query-features-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :global-priority-query %vk:global-priority-query)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-queue-family-global-priority-properties-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:priority-count
        %vk:priorities)
       ,ptr
       (:struct %vk:queue-family-global-priority-properties-ext))
    (make-instance 'vk:queue-family-global-priority-properties-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :priority-count %vk:priority-count
                   :priorities (loop for i from 0 below 16 collect (cffi:mem-aref %vk:priorities '%vk:queue-global-priority-ext i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-debug-utils-object-name-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:object-type
        %vk:object-handle
        %vk:p-object-name)
       ,ptr
       (:struct %vk:debug-utils-object-name-info-ext))
    (make-instance 'vk:debug-utils-object-name-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :object-type %vk:object-type
                   :object-handle %vk:object-handle
                   :object-name %vk:p-object-name)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-debug-utils-object-tag-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:object-type
        %vk:object-handle
        %vk:tag-name
        %vk:tag-size
        %vk:p-tag)
       ,ptr
       (:struct %vk:debug-utils-object-tag-info-ext))
    (make-instance 'vk:debug-utils-object-tag-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :object-type %vk:object-type
                   :object-handle %vk:object-handle
                   :tag-name %vk:tag-name
                   :tag-size %vk:tag-size
                   :tag %vk:p-tag)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-debug-utils-label-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:p-label-name
        %vk:color)
       ,ptr
       (:struct %vk:debug-utils-label-ext))
    (make-instance 'vk:debug-utils-label-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :label-name %vk:p-label-name
                   :color (cl:coerce (loop for i from 0 below 4 collect (cffi:mem-aref %vk:color :float i)) 'vector))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-debug-utils-messenger-create-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:message-severity
        %vk:message-type
        %vk:pfn-user-callback
        %vk:p-user-data)
       ,ptr
       (:struct %vk:debug-utils-messenger-create-info-ext))
    (make-instance 'vk:debug-utils-messenger-create-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :message-severity %vk:message-severity
                   :message-type %vk:message-type
                   :pfn-user-callback %vk:pfn-user-callback
                   :user-data %vk:p-user-data)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-debug-utils-messenger-callback-data-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:p-message-id-name
        %vk:message-id-number
        %vk:p-message
        %vk:queue-label-count
        %vk:p-queue-labels
        %vk:cmd-buf-label-count
        %vk:p-cmd-buf-labels
        %vk:object-count
        %vk:p-objects)
       ,ptr
       (:struct %vk:debug-utils-messenger-callback-data-ext))
    (make-instance 'vk:debug-utils-messenger-callback-data-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :message-id-name %vk:p-message-id-name
                   :message-id-number %vk:message-id-number
                   :message %vk:p-message
                   :queue-labels (loop for i from 0 below %vk:queue-label-count collect (cffi:mem-aref %vk:p-queue-labels '(:struct %vk:debug-utils-label-ext) i))
                   :cmd-buf-labels (loop for i from 0 below %vk:cmd-buf-label-count collect (cffi:mem-aref %vk:p-cmd-buf-labels '(:struct %vk:debug-utils-label-ext) i))
                   :objects (loop for i from 0 below %vk:object-count collect (cffi:mem-aref %vk:p-objects '(:struct %vk:debug-utils-object-name-info-ext) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-device-memory-report-features-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:device-memory-report)
       ,ptr
       (:struct %vk:physical-device-device-memory-report-features-ext))
    (make-instance 'vk:physical-device-device-memory-report-features-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :device-memory-report %vk:device-memory-report)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-device-device-memory-report-create-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:pfn-user-callback
        %vk:p-user-data)
       ,ptr
       (:struct %vk:device-device-memory-report-create-info-ext))
    (make-instance 'vk:device-device-memory-report-create-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :pfn-user-callback %vk:pfn-user-callback
                   :user-data %vk:p-user-data)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-device-memory-report-callback-data-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:type
        %vk:memory-object-id
        %vk:size
        %vk:object-type
        %vk:object-handle
        %vk:heap-index)
       ,ptr
       (:struct %vk:device-memory-report-callback-data-ext))
    (make-instance 'vk:device-memory-report-callback-data-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :type %vk:type
                   :memory-object-id %vk:memory-object-id
                   :size %vk:size
                   :object-type %vk:object-type
                   :object-handle %vk:object-handle
                   :heap-index %vk:heap-index)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-import-memory-host-pointer-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:handle-type
        %vk:p-host-pointer)
       ,ptr
       (:struct %vk:import-memory-host-pointer-info-ext))
    (make-instance 'vk:import-memory-host-pointer-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :handle-type %vk:handle-type
                   :host-pointer %vk:p-host-pointer)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-memory-host-pointer-properties-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:memory-type-bits)
       ,ptr
       (:struct %vk:memory-host-pointer-properties-ext))
    (make-instance 'vk:memory-host-pointer-properties-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :memory-type-bits %vk:memory-type-bits)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-external-memory-host-properties-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:min-imported-host-pointer-alignment)
       ,ptr
       (:struct %vk:physical-device-external-memory-host-properties-ext))
    (make-instance 'vk:physical-device-external-memory-host-properties-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :min-imported-host-pointer-alignment %vk:min-imported-host-pointer-alignment)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-conservative-rasterization-properties-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:primitive-overestimation-size
        %vk:max-extra-primitive-overestimation-size
        %vk:extra-primitive-overestimation-size-granularity
        %vk:primitive-underestimation
        %vk:conservative-point-and-line-rasterization
        %vk:degenerate-triangles-rasterized
        %vk:degenerate-lines-rasterized
        %vk:fully-covered-fragment-shader-input-variable
        %vk:conservative-rasterization-post-depth-coverage)
       ,ptr
       (:struct %vk:physical-device-conservative-rasterization-properties-ext))
    (make-instance 'vk:physical-device-conservative-rasterization-properties-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :primitive-overestimation-size %vk:primitive-overestimation-size
                   :max-extra-primitive-overestimation-size %vk:max-extra-primitive-overestimation-size
                   :extra-primitive-overestimation-size-granularity %vk:extra-primitive-overestimation-size-granularity
                   :primitive-underestimation %vk:primitive-underestimation
                   :conservative-point-and-line-rasterization %vk:conservative-point-and-line-rasterization
                   :degenerate-triangles-rasterized %vk:degenerate-triangles-rasterized
                   :degenerate-lines-rasterized %vk:degenerate-lines-rasterized
                   :fully-covered-fragment-shader-input-variable %vk:fully-covered-fragment-shader-input-variable
                   :conservative-rasterization-post-depth-coverage %vk:conservative-rasterization-post-depth-coverage)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-calibrated-timestamp-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:time-domain)
       ,ptr
       (:struct %vk:calibrated-timestamp-info-ext))
    (make-instance 'vk:calibrated-timestamp-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :time-domain %vk:time-domain)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-shader-core-properties-amd))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:shader-engine-count
        %vk:shader-arrays-per-engine-count
        %vk:compute-units-per-shader-array
        %vk:simd-per-compute-unit
        %vk:wavefronts-per-simd
        %vk:wavefront-size
        %vk:sgprs-per-simd
        %vk:min-sgpr-allocation
        %vk:max-sgpr-allocation
        %vk:sgpr-allocation-granularity
        %vk:vgprs-per-simd
        %vk:min-vgpr-allocation
        %vk:max-vgpr-allocation
        %vk:vgpr-allocation-granularity)
       ,ptr
       (:struct %vk:physical-device-shader-core-properties-amd))
    (make-instance 'vk:physical-device-shader-core-properties-amd
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :shader-engine-count %vk:shader-engine-count
                   :shader-arrays-per-engine-count %vk:shader-arrays-per-engine-count
                   :compute-units-per-shader-array %vk:compute-units-per-shader-array
                   :simd-per-compute-unit %vk:simd-per-compute-unit
                   :wavefronts-per-simd %vk:wavefronts-per-simd
                   :wavefront-size %vk:wavefront-size
                   :sgprs-per-simd %vk:sgprs-per-simd
                   :min-sgpr-allocation %vk:min-sgpr-allocation
                   :max-sgpr-allocation %vk:max-sgpr-allocation
                   :sgpr-allocation-granularity %vk:sgpr-allocation-granularity
                   :vgprs-per-simd %vk:vgprs-per-simd
                   :min-vgpr-allocation %vk:min-vgpr-allocation
                   :max-vgpr-allocation %vk:max-vgpr-allocation
                   :vgpr-allocation-granularity %vk:vgpr-allocation-granularity)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-shader-core-properties-2-amd))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:shader-core-features
        %vk:active-compute-unit-count)
       ,ptr
       (:struct %vk:physical-device-shader-core-properties-2-amd))
    (make-instance 'vk:physical-device-shader-core-properties-2-amd
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :shader-core-features %vk:shader-core-features
                   :active-compute-unit-count %vk:active-compute-unit-count)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-rasterization-conservative-state-create-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:conservative-rasterization-mode
        %vk:extra-primitive-overestimation-size)
       ,ptr
       (:struct %vk:pipeline-rasterization-conservative-state-create-info-ext))
    (make-instance 'vk:pipeline-rasterization-conservative-state-create-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :conservative-rasterization-mode %vk:conservative-rasterization-mode
                   :extra-primitive-overestimation-size %vk:extra-primitive-overestimation-size)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-descriptor-indexing-features))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:shader-input-attachment-array-dynamic-indexing
        %vk:shader-uniform-texel-buffer-array-dynamic-indexing
        %vk:shader-storage-texel-buffer-array-dynamic-indexing
        %vk:shader-uniform-buffer-array-non-uniform-indexing
        %vk:shader-sampled-image-array-non-uniform-indexing
        %vk:shader-storage-buffer-array-non-uniform-indexing
        %vk:shader-storage-image-array-non-uniform-indexing
        %vk:shader-input-attachment-array-non-uniform-indexing
        %vk:shader-uniform-texel-buffer-array-non-uniform-indexing
        %vk:shader-storage-texel-buffer-array-non-uniform-indexing
        %vk:descriptor-binding-uniform-buffer-update-after-bind
        %vk:descriptor-binding-sampled-image-update-after-bind
        %vk:descriptor-binding-storage-image-update-after-bind
        %vk:descriptor-binding-storage-buffer-update-after-bind
        %vk:descriptor-binding-uniform-texel-buffer-update-after-bind
        %vk:descriptor-binding-storage-texel-buffer-update-after-bind
        %vk:descriptor-binding-update-unused-while-pending
        %vk:descriptor-binding-partially-bound
        %vk:descriptor-binding-variable-descriptor-count
        %vk:runtime-descriptor-array)
       ,ptr
       (:struct %vk:physical-device-descriptor-indexing-features))
    (make-instance 'vk:physical-device-descriptor-indexing-features
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :shader-input-attachment-array-dynamic-indexing %vk:shader-input-attachment-array-dynamic-indexing
                   :shader-uniform-texel-buffer-array-dynamic-indexing %vk:shader-uniform-texel-buffer-array-dynamic-indexing
                   :shader-storage-texel-buffer-array-dynamic-indexing %vk:shader-storage-texel-buffer-array-dynamic-indexing
                   :shader-uniform-buffer-array-non-uniform-indexing %vk:shader-uniform-buffer-array-non-uniform-indexing
                   :shader-sampled-image-array-non-uniform-indexing %vk:shader-sampled-image-array-non-uniform-indexing
                   :shader-storage-buffer-array-non-uniform-indexing %vk:shader-storage-buffer-array-non-uniform-indexing
                   :shader-storage-image-array-non-uniform-indexing %vk:shader-storage-image-array-non-uniform-indexing
                   :shader-input-attachment-array-non-uniform-indexing %vk:shader-input-attachment-array-non-uniform-indexing
                   :shader-uniform-texel-buffer-array-non-uniform-indexing %vk:shader-uniform-texel-buffer-array-non-uniform-indexing
                   :shader-storage-texel-buffer-array-non-uniform-indexing %vk:shader-storage-texel-buffer-array-non-uniform-indexing
                   :descriptor-binding-uniform-buffer-update-after-bind %vk:descriptor-binding-uniform-buffer-update-after-bind
                   :descriptor-binding-sampled-image-update-after-bind %vk:descriptor-binding-sampled-image-update-after-bind
                   :descriptor-binding-storage-image-update-after-bind %vk:descriptor-binding-storage-image-update-after-bind
                   :descriptor-binding-storage-buffer-update-after-bind %vk:descriptor-binding-storage-buffer-update-after-bind
                   :descriptor-binding-uniform-texel-buffer-update-after-bind %vk:descriptor-binding-uniform-texel-buffer-update-after-bind
                   :descriptor-binding-storage-texel-buffer-update-after-bind %vk:descriptor-binding-storage-texel-buffer-update-after-bind
                   :descriptor-binding-update-unused-while-pending %vk:descriptor-binding-update-unused-while-pending
                   :descriptor-binding-partially-bound %vk:descriptor-binding-partially-bound
                   :descriptor-binding-variable-descriptor-count %vk:descriptor-binding-variable-descriptor-count
                   :runtime-descriptor-array %vk:runtime-descriptor-array)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-descriptor-indexing-properties))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:max-update-after-bind-descriptors-in-all-pools
        %vk:shader-uniform-buffer-array-non-uniform-indexing-native
        %vk:shader-sampled-image-array-non-uniform-indexing-native
        %vk:shader-storage-buffer-array-non-uniform-indexing-native
        %vk:shader-storage-image-array-non-uniform-indexing-native
        %vk:shader-input-attachment-array-non-uniform-indexing-native
        %vk:robust-buffer-access-update-after-bind
        %vk:quad-divergent-implicit-lod
        %vk:max-per-stage-descriptor-update-after-bind-samplers
        %vk:max-per-stage-descriptor-update-after-bind-uniform-buffers
        %vk:max-per-stage-descriptor-update-after-bind-storage-buffers
        %vk:max-per-stage-descriptor-update-after-bind-sampled-images
        %vk:max-per-stage-descriptor-update-after-bind-storage-images
        %vk:max-per-stage-descriptor-update-after-bind-input-attachments
        %vk:max-per-stage-update-after-bind-resources
        %vk:max-descriptor-set-update-after-bind-samplers
        %vk:max-descriptor-set-update-after-bind-uniform-buffers
        %vk:max-descriptor-set-update-after-bind-uniform-buffers-dynamic
        %vk:max-descriptor-set-update-after-bind-storage-buffers
        %vk:max-descriptor-set-update-after-bind-storage-buffers-dynamic
        %vk:max-descriptor-set-update-after-bind-sampled-images
        %vk:max-descriptor-set-update-after-bind-storage-images
        %vk:max-descriptor-set-update-after-bind-input-attachments)
       ,ptr
       (:struct %vk:physical-device-descriptor-indexing-properties))
    (make-instance 'vk:physical-device-descriptor-indexing-properties
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :max-update-after-bind-descriptors-in-all-pools %vk:max-update-after-bind-descriptors-in-all-pools
                   :shader-uniform-buffer-array-non-uniform-indexing-native %vk:shader-uniform-buffer-array-non-uniform-indexing-native
                   :shader-sampled-image-array-non-uniform-indexing-native %vk:shader-sampled-image-array-non-uniform-indexing-native
                   :shader-storage-buffer-array-non-uniform-indexing-native %vk:shader-storage-buffer-array-non-uniform-indexing-native
                   :shader-storage-image-array-non-uniform-indexing-native %vk:shader-storage-image-array-non-uniform-indexing-native
                   :shader-input-attachment-array-non-uniform-indexing-native %vk:shader-input-attachment-array-non-uniform-indexing-native
                   :robust-buffer-access-update-after-bind %vk:robust-buffer-access-update-after-bind
                   :quad-divergent-implicit-lod %vk:quad-divergent-implicit-lod
                   :max-per-stage-descriptor-update-after-bind-samplers %vk:max-per-stage-descriptor-update-after-bind-samplers
                   :max-per-stage-descriptor-update-after-bind-uniform-buffers %vk:max-per-stage-descriptor-update-after-bind-uniform-buffers
                   :max-per-stage-descriptor-update-after-bind-storage-buffers %vk:max-per-stage-descriptor-update-after-bind-storage-buffers
                   :max-per-stage-descriptor-update-after-bind-sampled-images %vk:max-per-stage-descriptor-update-after-bind-sampled-images
                   :max-per-stage-descriptor-update-after-bind-storage-images %vk:max-per-stage-descriptor-update-after-bind-storage-images
                   :max-per-stage-descriptor-update-after-bind-input-attachments %vk:max-per-stage-descriptor-update-after-bind-input-attachments
                   :max-per-stage-update-after-bind-resources %vk:max-per-stage-update-after-bind-resources
                   :max-descriptor-set-update-after-bind-samplers %vk:max-descriptor-set-update-after-bind-samplers
                   :max-descriptor-set-update-after-bind-uniform-buffers %vk:max-descriptor-set-update-after-bind-uniform-buffers
                   :max-descriptor-set-update-after-bind-uniform-buffers-dynamic %vk:max-descriptor-set-update-after-bind-uniform-buffers-dynamic
                   :max-descriptor-set-update-after-bind-storage-buffers %vk:max-descriptor-set-update-after-bind-storage-buffers
                   :max-descriptor-set-update-after-bind-storage-buffers-dynamic %vk:max-descriptor-set-update-after-bind-storage-buffers-dynamic
                   :max-descriptor-set-update-after-bind-sampled-images %vk:max-descriptor-set-update-after-bind-sampled-images
                   :max-descriptor-set-update-after-bind-storage-images %vk:max-descriptor-set-update-after-bind-storage-images
                   :max-descriptor-set-update-after-bind-input-attachments %vk:max-descriptor-set-update-after-bind-input-attachments)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-descriptor-set-layout-binding-flags-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:binding-count
        %vk:p-binding-flags)
       ,ptr
       (:struct %vk:descriptor-set-layout-binding-flags-create-info))
    (make-instance 'vk:descriptor-set-layout-binding-flags-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :binding-flags (loop for i from 0 below %vk:binding-count collect (cffi:mem-aref %vk:p-binding-flags '%vk:descriptor-binding-flags i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-descriptor-set-variable-descriptor-count-allocate-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:descriptor-set-count
        %vk:p-descriptor-counts)
       ,ptr
       (:struct %vk:descriptor-set-variable-descriptor-count-allocate-info))
    (make-instance 'vk:descriptor-set-variable-descriptor-count-allocate-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :descriptor-counts (loop for i from 0 below %vk:descriptor-set-count collect (cffi:mem-aref %vk:p-descriptor-counts :uint32 i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-descriptor-set-variable-descriptor-count-layout-support))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:max-variable-descriptor-count)
       ,ptr
       (:struct %vk:descriptor-set-variable-descriptor-count-layout-support))
    (make-instance 'vk:descriptor-set-variable-descriptor-count-layout-support
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :max-variable-descriptor-count %vk:max-variable-descriptor-count)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-attachment-description-2))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:format
        %vk:samples
        %vk:load-op
        %vk:store-op
        %vk:stencil-load-op
        %vk:stencil-store-op
        %vk:initial-layout
        %vk:final-layout)
       ,ptr
       (:struct %vk:attachment-description-2))
    (make-instance 'vk:attachment-description-2
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :format %vk:format
                   :samples %vk:samples
                   :load-op %vk:load-op
                   :store-op %vk:store-op
                   :stencil-load-op %vk:stencil-load-op
                   :stencil-store-op %vk:stencil-store-op
                   :initial-layout %vk:initial-layout
                   :final-layout %vk:final-layout)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-attachment-reference-2))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:attachment
        %vk:layout
        %vk:aspect-mask)
       ,ptr
       (:struct %vk:attachment-reference-2))
    (make-instance 'vk:attachment-reference-2
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :attachment %vk:attachment
                   :layout %vk:layout
                   :aspect-mask %vk:aspect-mask)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-subpass-description-2))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:pipeline-bind-point
        %vk:view-mask
        %vk:input-attachment-count
        %vk:p-input-attachments
        %vk:color-attachment-count
        %vk:p-color-attachments
        %vk:p-resolve-attachments
        %vk:p-depth-stencil-attachment
        %vk:preserve-attachment-count
        %vk:p-preserve-attachments)
       ,ptr
       (:struct %vk:subpass-description-2))
    (make-instance 'vk:subpass-description-2
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :pipeline-bind-point %vk:pipeline-bind-point
                   :view-mask %vk:view-mask
                   :input-attachments (loop for i from 0 below %vk:input-attachment-count collect (cffi:mem-aref %vk:p-input-attachments '(:struct %vk:attachment-reference-2) i))
                   :color-attachments (loop for i from 0 below %vk:color-attachment-count collect (cffi:mem-aref %vk:p-color-attachments '(:struct %vk:attachment-reference-2) i))
                   :resolve-attachments (loop for i from 0 below %vk:color-attachment-count collect (cffi:mem-aref %vk:p-resolve-attachments '(:struct %vk:attachment-reference-2) i))
                   :depth-stencil-attachment %vk:p-depth-stencil-attachment
                   :preserve-attachments (loop for i from 0 below %vk:preserve-attachment-count collect (cffi:mem-aref %vk:p-preserve-attachments :uint32 i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-subpass-dependency-2))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:src-subpass
        %vk:dst-subpass
        %vk:src-stage-mask
        %vk:dst-stage-mask
        %vk:src-access-mask
        %vk:dst-access-mask
        %vk:dependency-flags
        %vk:view-offset)
       ,ptr
       (:struct %vk:subpass-dependency-2))
    (make-instance 'vk:subpass-dependency-2
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :src-subpass %vk:src-subpass
                   :dst-subpass %vk:dst-subpass
                   :src-stage-mask %vk:src-stage-mask
                   :dst-stage-mask %vk:dst-stage-mask
                   :src-access-mask %vk:src-access-mask
                   :dst-access-mask %vk:dst-access-mask
                   :dependency-flags %vk:dependency-flags
                   :view-offset %vk:view-offset)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-render-pass-create-info-2))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:attachment-count
        %vk:p-attachments
        %vk:subpass-count
        %vk:p-subpasses
        %vk:dependency-count
        %vk:p-dependencies
        %vk:correlated-view-mask-count
        %vk:p-correlated-view-masks)
       ,ptr
       (:struct %vk:render-pass-create-info-2))
    (make-instance 'vk:render-pass-create-info-2
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :attachments (loop for i from 0 below %vk:attachment-count collect (cffi:mem-aref %vk:p-attachments '(:struct %vk:attachment-description-2) i))
                   :subpasses (loop for i from 0 below %vk:subpass-count collect (cffi:mem-aref %vk:p-subpasses '(:struct %vk:subpass-description-2) i))
                   :dependencies (loop for i from 0 below %vk:dependency-count collect (cffi:mem-aref %vk:p-dependencies '(:struct %vk:subpass-dependency-2) i))
                   :correlated-view-masks (loop for i from 0 below %vk:correlated-view-mask-count collect (cffi:mem-aref %vk:p-correlated-view-masks :uint32 i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-subpass-begin-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:contents)
       ,ptr
       (:struct %vk:subpass-begin-info))
    (make-instance 'vk:subpass-begin-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :contents %vk:contents)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-subpass-end-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next)
       ,ptr
       (:struct %vk:subpass-end-info))
    (make-instance 'vk:subpass-end-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk))))))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-timeline-semaphore-features))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:timeline-semaphore)
       ,ptr
       (:struct %vk:physical-device-timeline-semaphore-features))
    (make-instance 'vk:physical-device-timeline-semaphore-features
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :timeline-semaphore %vk:timeline-semaphore)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-timeline-semaphore-properties))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:max-timeline-semaphore-value-difference)
       ,ptr
       (:struct %vk:physical-device-timeline-semaphore-properties))
    (make-instance 'vk:physical-device-timeline-semaphore-properties
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :max-timeline-semaphore-value-difference %vk:max-timeline-semaphore-value-difference)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-semaphore-type-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:semaphore-type
        %vk:initial-value)
       ,ptr
       (:struct %vk:semaphore-type-create-info))
    (make-instance 'vk:semaphore-type-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :semaphore-type %vk:semaphore-type
                   :initial-value %vk:initial-value)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-timeline-semaphore-submit-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:wait-semaphore-value-count
        %vk:p-wait-semaphore-values
        %vk:signal-semaphore-value-count
        %vk:p-signal-semaphore-values)
       ,ptr
       (:struct %vk:timeline-semaphore-submit-info))
    (make-instance 'vk:timeline-semaphore-submit-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :wait-semaphore-values (loop for i from 0 below %vk:wait-semaphore-value-count collect (cffi:mem-aref %vk:p-wait-semaphore-values :uint64 i))
                   :signal-semaphore-values (loop for i from 0 below %vk:signal-semaphore-value-count collect (cffi:mem-aref %vk:p-signal-semaphore-values :uint64 i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-semaphore-wait-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:semaphore-count
        %vk:p-semaphores
        %vk:p-values)
       ,ptr
       (:struct %vk:semaphore-wait-info))
    (make-instance 'vk:semaphore-wait-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :semaphores (loop for i from 0 below %vk:semaphore-count collect (vk:make-semaphore-wrapper (cffi:mem-aref %vk:p-semaphores '%vk:semaphore i)))
                   :values (loop for i from 0 below %vk:semaphore-count collect (cffi:mem-aref %vk:p-values :uint64 i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-semaphore-signal-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:semaphore
        %vk:value)
       ,ptr
       (:struct %vk:semaphore-signal-info))
    (make-instance 'vk:semaphore-signal-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :semaphore (vk:make-semaphore-wrapper %vk:semaphore)
                   :value %vk:value)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-vertex-input-binding-divisor-description-ext))
  `(cffi:with-foreign-slots
      ((%vk:binding
        %vk:divisor)
       ,ptr
       (:struct %vk:vertex-input-binding-divisor-description-ext))
    (make-instance 'vk:vertex-input-binding-divisor-description-ext
                   :binding %vk:binding
                   :divisor %vk:divisor)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-vertex-input-divisor-state-create-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:vertex-binding-divisor-count
        %vk:p-vertex-binding-divisors)
       ,ptr
       (:struct %vk:pipeline-vertex-input-divisor-state-create-info-ext))
    (make-instance 'vk:pipeline-vertex-input-divisor-state-create-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :vertex-binding-divisors (loop for i from 0 below %vk:vertex-binding-divisor-count collect (cffi:mem-aref %vk:p-vertex-binding-divisors '(:struct %vk:vertex-input-binding-divisor-description-ext) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-vertex-attribute-divisor-properties-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:max-vertex-attrib-divisor)
       ,ptr
       (:struct %vk:physical-device-vertex-attribute-divisor-properties-ext))
    (make-instance 'vk:physical-device-vertex-attribute-divisor-properties-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :max-vertex-attrib-divisor %vk:max-vertex-attrib-divisor)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-p-c-i-bus-info-properties-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:pci-domain
        %vk:pci-bus
        %vk:pci-device
        %vk:pci-function)
       ,ptr
       (:struct %vk:physical-device-p-c-i-bus-info-properties-ext))
    (make-instance 'vk:physical-device-p-c-i-bus-info-properties-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :pci-domain %vk:pci-domain
                   :pci-bus %vk:pci-bus
                   :pci-device %vk:pci-device
                   :pci-function %vk:pci-function)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-import-android-hardware-buffer-info-android))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:buffer)
       ,ptr
       (:struct %vk:import-android-hardware-buffer-info-android))
    (make-instance 'vk:import-android-hardware-buffer-info-android
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :buffer %vk:buffer)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-android-hardware-buffer-usage-android))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:android-hardware-buffer-usage)
       ,ptr
       (:struct %vk:android-hardware-buffer-usage-android))
    (make-instance 'vk:android-hardware-buffer-usage-android
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :android-hardware-buffer-usage %vk:android-hardware-buffer-usage)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-android-hardware-buffer-properties-android))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:allocation-size
        %vk:memory-type-bits)
       ,ptr
       (:struct %vk:android-hardware-buffer-properties-android))
    (make-instance 'vk:android-hardware-buffer-properties-android
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :allocation-size %vk:allocation-size
                   :memory-type-bits %vk:memory-type-bits)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-memory-get-android-hardware-buffer-info-android))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:memory)
       ,ptr
       (:struct %vk:memory-get-android-hardware-buffer-info-android))
    (make-instance 'vk:memory-get-android-hardware-buffer-info-android
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :memory (vk:make-device-memory-wrapper %vk:memory))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-android-hardware-buffer-format-properties-android))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:format
        %vk:external-format
        %vk:format-features
        %vk:sampler-ycbcr-conversion-components
        %vk:suggested-ycbcr-model
        %vk:suggested-ycbcr-range
        %vk:suggested-x-chroma-offset
        %vk:suggested-y-chroma-offset)
       ,ptr
       (:struct %vk:android-hardware-buffer-format-properties-android))
    (make-instance 'vk:android-hardware-buffer-format-properties-android
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :format %vk:format
                   :external-format %vk:external-format
                   :format-features %vk:format-features
                   :sampler-ycbcr-conversion-components %vk:sampler-ycbcr-conversion-components
                   :suggested-ycbcr-model %vk:suggested-ycbcr-model
                   :suggested-ycbcr-range %vk:suggested-ycbcr-range
                   :suggested-x-chroma-offset %vk:suggested-x-chroma-offset
                   :suggested-y-chroma-offset %vk:suggested-y-chroma-offset)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-command-buffer-inheritance-conditional-rendering-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:conditional-rendering-enable)
       ,ptr
       (:struct %vk:command-buffer-inheritance-conditional-rendering-info-ext))
    (make-instance 'vk:command-buffer-inheritance-conditional-rendering-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :conditional-rendering-enable %vk:conditional-rendering-enable)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-external-format-android))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:external-format)
       ,ptr
       (:struct %vk:external-format-android))
    (make-instance 'vk:external-format-android
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :external-format %vk:external-format)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-8-bit-storage-features))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:storage-buffer-8-bit-access
        %vk:uniform-and-storage-buffer-8-bit-access
        %vk:storage-push-constant-8)
       ,ptr
       (:struct %vk:physical-device-8-bit-storage-features))
    (make-instance 'vk:physical-device-8-bit-storage-features
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :storage-buffer-8-bit-access %vk:storage-buffer-8-bit-access
                   :uniform-and-storage-buffer-8-bit-access %vk:uniform-and-storage-buffer-8-bit-access
                   :storage-push-constant-8 %vk:storage-push-constant-8)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-conditional-rendering-features-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:conditional-rendering
        %vk:inherited-conditional-rendering)
       ,ptr
       (:struct %vk:physical-device-conditional-rendering-features-ext))
    (make-instance 'vk:physical-device-conditional-rendering-features-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :conditional-rendering %vk:conditional-rendering
                   :inherited-conditional-rendering %vk:inherited-conditional-rendering)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-vulkan-memory-model-features))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:vulkan-memory-model
        %vk:vulkan-memory-model-device-scope
        %vk:vulkan-memory-model-availability-visibility-chains)
       ,ptr
       (:struct %vk:physical-device-vulkan-memory-model-features))
    (make-instance 'vk:physical-device-vulkan-memory-model-features
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :vulkan-memory-model %vk:vulkan-memory-model
                   :vulkan-memory-model-device-scope %vk:vulkan-memory-model-device-scope
                   :vulkan-memory-model-availability-visibility-chains %vk:vulkan-memory-model-availability-visibility-chains)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-shader-atomic-int-64-features))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:shader-buffer-int-64-atomics
        %vk:shader-shared-int-64-atomics)
       ,ptr
       (:struct %vk:physical-device-shader-atomic-int-64-features))
    (make-instance 'vk:physical-device-shader-atomic-int-64-features
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :shader-buffer-int-64-atomics %vk:shader-buffer-int-64-atomics
                   :shader-shared-int-64-atomics %vk:shader-shared-int-64-atomics)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-shader-atomic-float-features-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:shader-buffer-float-32-atomics
        %vk:shader-buffer-float-32-atomic-add
        %vk:shader-buffer-float-64-atomics
        %vk:shader-buffer-float-64-atomic-add
        %vk:shader-shared-float-32-atomics
        %vk:shader-shared-float-32-atomic-add
        %vk:shader-shared-float-64-atomics
        %vk:shader-shared-float-64-atomic-add
        %vk:shader-image-float-32-atomics
        %vk:shader-image-float-32-atomic-add
        %vk:sparse-image-float-32-atomics
        %vk:sparse-image-float-32-atomic-add)
       ,ptr
       (:struct %vk:physical-device-shader-atomic-float-features-ext))
    (make-instance 'vk:physical-device-shader-atomic-float-features-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :shader-buffer-float-32-atomics %vk:shader-buffer-float-32-atomics
                   :shader-buffer-float-32-atomic-add %vk:shader-buffer-float-32-atomic-add
                   :shader-buffer-float-64-atomics %vk:shader-buffer-float-64-atomics
                   :shader-buffer-float-64-atomic-add %vk:shader-buffer-float-64-atomic-add
                   :shader-shared-float-32-atomics %vk:shader-shared-float-32-atomics
                   :shader-shared-float-32-atomic-add %vk:shader-shared-float-32-atomic-add
                   :shader-shared-float-64-atomics %vk:shader-shared-float-64-atomics
                   :shader-shared-float-64-atomic-add %vk:shader-shared-float-64-atomic-add
                   :shader-image-float-32-atomics %vk:shader-image-float-32-atomics
                   :shader-image-float-32-atomic-add %vk:shader-image-float-32-atomic-add
                   :sparse-image-float-32-atomics %vk:sparse-image-float-32-atomics
                   :sparse-image-float-32-atomic-add %vk:sparse-image-float-32-atomic-add)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-shader-atomic-float-2-features-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:shader-buffer-float-16-atomics
        %vk:shader-buffer-float-16-atomic-add
        %vk:shader-buffer-float-16-atomic-min-max
        %vk:shader-buffer-float-32-atomic-min-max
        %vk:shader-buffer-float-64-atomic-min-max
        %vk:shader-shared-float-16-atomics
        %vk:shader-shared-float-16-atomic-add
        %vk:shader-shared-float-16-atomic-min-max
        %vk:shader-shared-float-32-atomic-min-max
        %vk:shader-shared-float-64-atomic-min-max
        %vk:shader-image-float-32-atomic-min-max
        %vk:sparse-image-float-32-atomic-min-max)
       ,ptr
       (:struct %vk:physical-device-shader-atomic-float-2-features-ext))
    (make-instance 'vk:physical-device-shader-atomic-float-2-features-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :shader-buffer-float-16-atomics %vk:shader-buffer-float-16-atomics
                   :shader-buffer-float-16-atomic-add %vk:shader-buffer-float-16-atomic-add
                   :shader-buffer-float-16-atomic-min-max %vk:shader-buffer-float-16-atomic-min-max
                   :shader-buffer-float-32-atomic-min-max %vk:shader-buffer-float-32-atomic-min-max
                   :shader-buffer-float-64-atomic-min-max %vk:shader-buffer-float-64-atomic-min-max
                   :shader-shared-float-16-atomics %vk:shader-shared-float-16-atomics
                   :shader-shared-float-16-atomic-add %vk:shader-shared-float-16-atomic-add
                   :shader-shared-float-16-atomic-min-max %vk:shader-shared-float-16-atomic-min-max
                   :shader-shared-float-32-atomic-min-max %vk:shader-shared-float-32-atomic-min-max
                   :shader-shared-float-64-atomic-min-max %vk:shader-shared-float-64-atomic-min-max
                   :shader-image-float-32-atomic-min-max %vk:shader-image-float-32-atomic-min-max
                   :sparse-image-float-32-atomic-min-max %vk:sparse-image-float-32-atomic-min-max)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-vertex-attribute-divisor-features-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:vertex-attribute-instance-rate-divisor
        %vk:vertex-attribute-instance-rate-zero-divisor)
       ,ptr
       (:struct %vk:physical-device-vertex-attribute-divisor-features-ext))
    (make-instance 'vk:physical-device-vertex-attribute-divisor-features-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :vertex-attribute-instance-rate-divisor %vk:vertex-attribute-instance-rate-divisor
                   :vertex-attribute-instance-rate-zero-divisor %vk:vertex-attribute-instance-rate-zero-divisor)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-queue-family-checkpoint-properties-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:checkpoint-execution-stage-mask)
       ,ptr
       (:struct %vk:queue-family-checkpoint-properties-nv))
    (make-instance 'vk:queue-family-checkpoint-properties-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :checkpoint-execution-stage-mask %vk:checkpoint-execution-stage-mask)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-checkpoint-data-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:stage
        %vk:p-checkpoint-marker)
       ,ptr
       (:struct %vk:checkpoint-data-nv))
    (make-instance 'vk:checkpoint-data-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :stage %vk:stage
                   :checkpoint-marker %vk:p-checkpoint-marker)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-depth-stencil-resolve-properties))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:supported-depth-resolve-modes
        %vk:supported-stencil-resolve-modes
        %vk:independent-resolve-none
        %vk:independent-resolve)
       ,ptr
       (:struct %vk:physical-device-depth-stencil-resolve-properties))
    (make-instance 'vk:physical-device-depth-stencil-resolve-properties
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :supported-depth-resolve-modes %vk:supported-depth-resolve-modes
                   :supported-stencil-resolve-modes %vk:supported-stencil-resolve-modes
                   :independent-resolve-none %vk:independent-resolve-none
                   :independent-resolve %vk:independent-resolve)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-subpass-description-depth-stencil-resolve))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:depth-resolve-mode
        %vk:stencil-resolve-mode
        %vk:p-depth-stencil-resolve-attachment)
       ,ptr
       (:struct %vk:subpass-description-depth-stencil-resolve))
    (make-instance 'vk:subpass-description-depth-stencil-resolve
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :depth-resolve-mode %vk:depth-resolve-mode
                   :stencil-resolve-mode %vk:stencil-resolve-mode
                   :depth-stencil-resolve-attachment %vk:p-depth-stencil-resolve-attachment)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-image-view-astc-decode-mode-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:decode-mode)
       ,ptr
       (:struct %vk:image-view-astc-decode-mode-ext))
    (make-instance 'vk:image-view-astc-decode-mode-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :decode-mode %vk:decode-mode)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-astc-decode-features-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:decode-mode-shared-exponent)
       ,ptr
       (:struct %vk:physical-device-astc-decode-features-ext))
    (make-instance 'vk:physical-device-astc-decode-features-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :decode-mode-shared-exponent %vk:decode-mode-shared-exponent)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-transform-feedback-features-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:transform-feedback
        %vk:geometry-streams)
       ,ptr
       (:struct %vk:physical-device-transform-feedback-features-ext))
    (make-instance 'vk:physical-device-transform-feedback-features-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :transform-feedback %vk:transform-feedback
                   :geometry-streams %vk:geometry-streams)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-transform-feedback-properties-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:max-transform-feedback-streams
        %vk:max-transform-feedback-buffers
        %vk:max-transform-feedback-buffer-size
        %vk:max-transform-feedback-stream-data-size
        %vk:max-transform-feedback-buffer-data-size
        %vk:max-transform-feedback-buffer-data-stride
        %vk:transform-feedback-queries
        %vk:transform-feedback-streams-lines-triangles
        %vk:transform-feedback-rasterization-stream-select
        %vk:transform-feedback-draw)
       ,ptr
       (:struct %vk:physical-device-transform-feedback-properties-ext))
    (make-instance 'vk:physical-device-transform-feedback-properties-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :max-transform-feedback-streams %vk:max-transform-feedback-streams
                   :max-transform-feedback-buffers %vk:max-transform-feedback-buffers
                   :max-transform-feedback-buffer-size %vk:max-transform-feedback-buffer-size
                   :max-transform-feedback-stream-data-size %vk:max-transform-feedback-stream-data-size
                   :max-transform-feedback-buffer-data-size %vk:max-transform-feedback-buffer-data-size
                   :max-transform-feedback-buffer-data-stride %vk:max-transform-feedback-buffer-data-stride
                   :transform-feedback-queries %vk:transform-feedback-queries
                   :transform-feedback-streams-lines-triangles %vk:transform-feedback-streams-lines-triangles
                   :transform-feedback-rasterization-stream-select %vk:transform-feedback-rasterization-stream-select
                   :transform-feedback-draw %vk:transform-feedback-draw)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-rasterization-state-stream-create-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:rasterization-stream)
       ,ptr
       (:struct %vk:pipeline-rasterization-state-stream-create-info-ext))
    (make-instance 'vk:pipeline-rasterization-state-stream-create-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :rasterization-stream %vk:rasterization-stream)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-representative-fragment-test-features-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:representative-fragment-test)
       ,ptr
       (:struct %vk:physical-device-representative-fragment-test-features-nv))
    (make-instance 'vk:physical-device-representative-fragment-test-features-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :representative-fragment-test %vk:representative-fragment-test)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-representative-fragment-test-state-create-info-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:representative-fragment-test-enable)
       ,ptr
       (:struct %vk:pipeline-representative-fragment-test-state-create-info-nv))
    (make-instance 'vk:pipeline-representative-fragment-test-state-create-info-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :representative-fragment-test-enable %vk:representative-fragment-test-enable)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-exclusive-scissor-features-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:exclusive-scissor)
       ,ptr
       (:struct %vk:physical-device-exclusive-scissor-features-nv))
    (make-instance 'vk:physical-device-exclusive-scissor-features-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :exclusive-scissor %vk:exclusive-scissor)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-viewport-exclusive-scissor-state-create-info-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:exclusive-scissor-count
        %vk:p-exclusive-scissors)
       ,ptr
       (:struct %vk:pipeline-viewport-exclusive-scissor-state-create-info-nv))
    (make-instance 'vk:pipeline-viewport-exclusive-scissor-state-create-info-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :exclusive-scissors (loop for i from 0 below %vk:exclusive-scissor-count collect (cffi:mem-aref %vk:p-exclusive-scissors '(:struct %vk:rect-2d) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-corner-sampled-image-features-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:corner-sampled-image)
       ,ptr
       (:struct %vk:physical-device-corner-sampled-image-features-nv))
    (make-instance 'vk:physical-device-corner-sampled-image-features-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :corner-sampled-image %vk:corner-sampled-image)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-compute-shader-derivatives-features-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:compute-derivative-group-quads
        %vk:compute-derivative-group-linear)
       ,ptr
       (:struct %vk:physical-device-compute-shader-derivatives-features-nv))
    (make-instance 'vk:physical-device-compute-shader-derivatives-features-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :compute-derivative-group-quads %vk:compute-derivative-group-quads
                   :compute-derivative-group-linear %vk:compute-derivative-group-linear)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-fragment-shader-barycentric-features-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:fragment-shader-barycentric)
       ,ptr
       (:struct %vk:physical-device-fragment-shader-barycentric-features-nv))
    (make-instance 'vk:physical-device-fragment-shader-barycentric-features-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :fragment-shader-barycentric %vk:fragment-shader-barycentric)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-shader-image-footprint-features-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:image-footprint)
       ,ptr
       (:struct %vk:physical-device-shader-image-footprint-features-nv))
    (make-instance 'vk:physical-device-shader-image-footprint-features-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :image-footprint %vk:image-footprint)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-dedicated-allocation-image-aliasing-features-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:dedicated-allocation-image-aliasing)
       ,ptr
       (:struct %vk:physical-device-dedicated-allocation-image-aliasing-features-nv))
    (make-instance 'vk:physical-device-dedicated-allocation-image-aliasing-features-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :dedicated-allocation-image-aliasing %vk:dedicated-allocation-image-aliasing)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-shading-rate-palette-nv))
  `(cffi:with-foreign-slots
      ((%vk:shading-rate-palette-entry-count
        %vk:p-shading-rate-palette-entries)
       ,ptr
       (:struct %vk:shading-rate-palette-nv))
    (make-instance 'vk:shading-rate-palette-nv
                   :shading-rate-palette-entries (loop for i from 0 below %vk:shading-rate-palette-entry-count collect (cffi:mem-aref %vk:p-shading-rate-palette-entries '%vk:shading-rate-palette-entry-nv i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-viewport-shading-rate-image-state-create-info-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:shading-rate-image-enable
        %vk:viewport-count
        %vk:p-shading-rate-palettes)
       ,ptr
       (:struct %vk:pipeline-viewport-shading-rate-image-state-create-info-nv))
    (make-instance 'vk:pipeline-viewport-shading-rate-image-state-create-info-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :shading-rate-image-enable %vk:shading-rate-image-enable
                   :shading-rate-palettes (loop for i from 0 below %vk:viewport-count collect (cffi:mem-aref %vk:p-shading-rate-palettes '(:struct %vk:shading-rate-palette-nv) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-shading-rate-image-features-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:shading-rate-image
        %vk:shading-rate-coarse-sample-order)
       ,ptr
       (:struct %vk:physical-device-shading-rate-image-features-nv))
    (make-instance 'vk:physical-device-shading-rate-image-features-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :shading-rate-image %vk:shading-rate-image
                   :shading-rate-coarse-sample-order %vk:shading-rate-coarse-sample-order)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-shading-rate-image-properties-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:shading-rate-texel-size
        %vk:shading-rate-palette-size
        %vk:shading-rate-max-coarse-samples)
       ,ptr
       (:struct %vk:physical-device-shading-rate-image-properties-nv))
    (make-instance 'vk:physical-device-shading-rate-image-properties-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :shading-rate-texel-size %vk:shading-rate-texel-size
                   :shading-rate-palette-size %vk:shading-rate-palette-size
                   :shading-rate-max-coarse-samples %vk:shading-rate-max-coarse-samples)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-invocation-mask-features-huawei))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:invocation-mask)
       ,ptr
       (:struct %vk:physical-device-invocation-mask-features-huawei))
    (make-instance 'vk:physical-device-invocation-mask-features-huawei
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :invocation-mask %vk:invocation-mask)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-coarse-sample-location-nv))
  `(cffi:with-foreign-slots
      ((%vk:pixel-x
        %vk:pixel-y
        %vk:sample)
       ,ptr
       (:struct %vk:coarse-sample-location-nv))
    (make-instance 'vk:coarse-sample-location-nv
                   :pixel-x %vk:pixel-x
                   :pixel-y %vk:pixel-y
                   :sample %vk:sample)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-coarse-sample-order-custom-nv))
  `(cffi:with-foreign-slots
      ((%vk:shading-rate
        %vk:sample-count
        %vk:sample-location-count
        %vk:p-sample-locations)
       ,ptr
       (:struct %vk:coarse-sample-order-custom-nv))
    (make-instance 'vk:coarse-sample-order-custom-nv
                   :shading-rate %vk:shading-rate
                   :sample-count %vk:sample-count
                   :sample-locations (loop for i from 0 below %vk:sample-location-count collect (cffi:mem-aref %vk:p-sample-locations '(:struct %vk:coarse-sample-location-nv) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-viewport-coarse-sample-order-state-create-info-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:sample-order-type
        %vk:custom-sample-order-count
        %vk:p-custom-sample-orders)
       ,ptr
       (:struct %vk:pipeline-viewport-coarse-sample-order-state-create-info-nv))
    (make-instance 'vk:pipeline-viewport-coarse-sample-order-state-create-info-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :sample-order-type %vk:sample-order-type
                   :custom-sample-orders (loop for i from 0 below %vk:custom-sample-order-count collect (cffi:mem-aref %vk:p-custom-sample-orders '(:struct %vk:coarse-sample-order-custom-nv) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-mesh-shader-features-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:task-shader
        %vk:mesh-shader)
       ,ptr
       (:struct %vk:physical-device-mesh-shader-features-nv))
    (make-instance 'vk:physical-device-mesh-shader-features-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :task-shader %vk:task-shader
                   :mesh-shader %vk:mesh-shader)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-mesh-shader-properties-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:max-draw-mesh-tasks-count
        %vk:max-task-work-group-invocations
        %vk:max-task-work-group-size
        %vk:max-task-total-memory-size
        %vk:max-task-output-count
        %vk:max-mesh-work-group-invocations
        %vk:max-mesh-work-group-size
        %vk:max-mesh-total-memory-size
        %vk:max-mesh-output-vertices
        %vk:max-mesh-output-primitives
        %vk:max-mesh-multiview-view-count
        %vk:mesh-output-per-vertex-granularity
        %vk:mesh-output-per-primitive-granularity)
       ,ptr
       (:struct %vk:physical-device-mesh-shader-properties-nv))
    (make-instance 'vk:physical-device-mesh-shader-properties-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :max-draw-mesh-tasks-count %vk:max-draw-mesh-tasks-count
                   :max-task-work-group-invocations %vk:max-task-work-group-invocations
                   :max-task-work-group-size (cl:coerce (loop for i from 0 below 3 collect (cffi:mem-aref %vk:max-task-work-group-size :uint32 i)) 'vector)
                   :max-task-total-memory-size %vk:max-task-total-memory-size
                   :max-task-output-count %vk:max-task-output-count
                   :max-mesh-work-group-invocations %vk:max-mesh-work-group-invocations
                   :max-mesh-work-group-size (cl:coerce (loop for i from 0 below 3 collect (cffi:mem-aref %vk:max-mesh-work-group-size :uint32 i)) 'vector)
                   :max-mesh-total-memory-size %vk:max-mesh-total-memory-size
                   :max-mesh-output-vertices %vk:max-mesh-output-vertices
                   :max-mesh-output-primitives %vk:max-mesh-output-primitives
                   :max-mesh-multiview-view-count %vk:max-mesh-multiview-view-count
                   :mesh-output-per-vertex-granularity %vk:mesh-output-per-vertex-granularity
                   :mesh-output-per-primitive-granularity %vk:mesh-output-per-primitive-granularity)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-draw-mesh-tasks-indirect-command-nv))
  `(cffi:with-foreign-slots
      ((%vk:task-count
        %vk:first-task)
       ,ptr
       (:struct %vk:draw-mesh-tasks-indirect-command-nv))
    (make-instance 'vk:draw-mesh-tasks-indirect-command-nv
                   :task-count %vk:task-count
                   :first-task %vk:first-task)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-ray-tracing-shader-group-create-info-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:type
        %vk:general-shader
        %vk:closest-hit-shader
        %vk:any-hit-shader
        %vk:intersection-shader)
       ,ptr
       (:struct %vk:ray-tracing-shader-group-create-info-nv))
    (make-instance 'vk:ray-tracing-shader-group-create-info-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :type %vk:type
                   :general-shader %vk:general-shader
                   :closest-hit-shader %vk:closest-hit-shader
                   :any-hit-shader %vk:any-hit-shader
                   :intersection-shader %vk:intersection-shader)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-ray-tracing-shader-group-create-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:type
        %vk:general-shader
        %vk:closest-hit-shader
        %vk:any-hit-shader
        %vk:intersection-shader
        %vk:p-shader-group-capture-replay-handle)
       ,ptr
       (:struct %vk:ray-tracing-shader-group-create-info-khr))
    (make-instance 'vk:ray-tracing-shader-group-create-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :type %vk:type
                   :general-shader %vk:general-shader
                   :closest-hit-shader %vk:closest-hit-shader
                   :any-hit-shader %vk:any-hit-shader
                   :intersection-shader %vk:intersection-shader
                   :shader-group-capture-replay-handle %vk:p-shader-group-capture-replay-handle)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-ray-tracing-pipeline-create-info-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:stage-count
        %vk:p-stages
        %vk:group-count
        %vk:p-groups
        %vk:max-recursion-depth
        %vk:layout
        %vk:base-pipeline-handle
        %vk:base-pipeline-index)
       ,ptr
       (:struct %vk:ray-tracing-pipeline-create-info-nv))
    (make-instance 'vk:ray-tracing-pipeline-create-info-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :stages (loop for i from 0 below %vk:stage-count collect (cffi:mem-aref %vk:p-stages '(:struct %vk:pipeline-shader-stage-create-info) i))
                   :groups (loop for i from 0 below %vk:group-count collect (cffi:mem-aref %vk:p-groups '(:struct %vk:ray-tracing-shader-group-create-info-nv) i))
                   :max-recursion-depth %vk:max-recursion-depth
                   :layout (vk:make-pipeline-layout-wrapper %vk:layout)
                   :base-pipeline-handle (vk:make-pipeline-wrapper %vk:base-pipeline-handle)
                   :base-pipeline-index %vk:base-pipeline-index)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-ray-tracing-pipeline-create-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:stage-count
        %vk:p-stages
        %vk:group-count
        %vk:p-groups
        %vk:max-pipeline-ray-recursion-depth
        %vk:p-library-info
        %vk:p-library-interface
        %vk:p-dynamic-state
        %vk:layout
        %vk:base-pipeline-handle
        %vk:base-pipeline-index)
       ,ptr
       (:struct %vk:ray-tracing-pipeline-create-info-khr))
    (make-instance 'vk:ray-tracing-pipeline-create-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :stages (loop for i from 0 below %vk:stage-count collect (cffi:mem-aref %vk:p-stages '(:struct %vk:pipeline-shader-stage-create-info) i))
                   :groups (loop for i from 0 below %vk:group-count collect (cffi:mem-aref %vk:p-groups '(:struct %vk:ray-tracing-shader-group-create-info-khr) i))
                   :max-pipeline-ray-recursion-depth %vk:max-pipeline-ray-recursion-depth
                   :library-info %vk:p-library-info
                   :library-interface %vk:p-library-interface
                   :dynamic-state %vk:p-dynamic-state
                   :layout (vk:make-pipeline-layout-wrapper %vk:layout)
                   :base-pipeline-handle (vk:make-pipeline-wrapper %vk:base-pipeline-handle)
                   :base-pipeline-index %vk:base-pipeline-index)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-geometry-triangles-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:vertex-data
        %vk:vertex-offset
        %vk:vertex-count
        %vk:vertex-stride
        %vk:vertex-format
        %vk:index-data
        %vk:index-offset
        %vk:index-count
        %vk:index-type
        %vk:transform-data
        %vk:transform-offset)
       ,ptr
       (:struct %vk:geometry-triangles-nv))
    (make-instance 'vk:geometry-triangles-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :vertex-data (vk:make-buffer-wrapper %vk:vertex-data)
                   :vertex-offset %vk:vertex-offset
                   :vertex-count %vk:vertex-count
                   :vertex-stride %vk:vertex-stride
                   :vertex-format %vk:vertex-format
                   :index-data (vk:make-buffer-wrapper %vk:index-data)
                   :index-offset %vk:index-offset
                   :index-count %vk:index-count
                   :index-type %vk:index-type
                   :transform-data (vk:make-buffer-wrapper %vk:transform-data)
                   :transform-offset %vk:transform-offset)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-geometry-aabb-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:aabb-data
        %vk:num-aabbs
        %vk:stride
        %vk:offset)
       ,ptr
       (:struct %vk:geometry-aabb-nv))
    (make-instance 'vk:geometry-aabb-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :aabb-data (vk:make-buffer-wrapper %vk:aabb-data)
                   :num-aabbs %vk:num-aabbs
                   :stride %vk:stride
                   :offset %vk:offset)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-geometry-data-nv))
  `(cffi:with-foreign-slots
      ((%vk:triangles
        %vk:aabbs)
       ,ptr
       (:struct %vk:geometry-data-nv))
    (make-instance 'vk:geometry-data-nv
                   :triangles %vk:triangles
                   :aabbs %vk:aabbs)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-geometry-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:geometry-type
        %vk:geometry
        %vk:flags)
       ,ptr
       (:struct %vk:geometry-nv))
    (make-instance 'vk:geometry-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :geometry-type %vk:geometry-type
                   :geometry %vk:geometry
                   :flags %vk:flags)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-acceleration-structure-info-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:type
        %vk:flags
        %vk:instance-count
        %vk:geometry-count
        %vk:p-geometries)
       ,ptr
       (:struct %vk:acceleration-structure-info-nv))
    (make-instance 'vk:acceleration-structure-info-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :type %vk:type
                   :flags %vk:flags
                   :instance-count %vk:instance-count
                   :geometries (loop for i from 0 below %vk:geometry-count collect (cffi:mem-aref %vk:p-geometries '(:struct %vk:geometry-nv) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-acceleration-structure-create-info-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:compacted-size
        %vk:info)
       ,ptr
       (:struct %vk:acceleration-structure-create-info-nv))
    (make-instance 'vk:acceleration-structure-create-info-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :compacted-size %vk:compacted-size
                   :info %vk:info)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-bind-acceleration-structure-memory-info-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:acceleration-structure
        %vk:memory
        %vk:memory-offset
        %vk:device-index-count
        %vk:p-device-indices)
       ,ptr
       (:struct %vk:bind-acceleration-structure-memory-info-nv))
    (make-instance 'vk:bind-acceleration-structure-memory-info-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :acceleration-structure (vk:make-acceleration-structure-nv-wrapper %vk:acceleration-structure)
                   :memory (vk:make-device-memory-wrapper %vk:memory)
                   :memory-offset %vk:memory-offset
                   :device-indices (loop for i from 0 below %vk:device-index-count collect (cffi:mem-aref %vk:p-device-indices :uint32 i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-write-descriptor-set-acceleration-structure-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:acceleration-structure-count
        %vk:p-acceleration-structures)
       ,ptr
       (:struct %vk:write-descriptor-set-acceleration-structure-khr))
    (make-instance 'vk:write-descriptor-set-acceleration-structure-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :acceleration-structures (loop for i from 0 below %vk:acceleration-structure-count collect (vk:make-acceleration-structure-khr-wrapper (cffi:mem-aref %vk:p-acceleration-structures '%vk:acceleration-structure-khr i))))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-write-descriptor-set-acceleration-structure-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:acceleration-structure-count
        %vk:p-acceleration-structures)
       ,ptr
       (:struct %vk:write-descriptor-set-acceleration-structure-nv))
    (make-instance 'vk:write-descriptor-set-acceleration-structure-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :acceleration-structures (loop for i from 0 below %vk:acceleration-structure-count collect (vk:make-acceleration-structure-nv-wrapper (cffi:mem-aref %vk:p-acceleration-structures '%vk:acceleration-structure-nv i))))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-acceleration-structure-memory-requirements-info-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:type
        %vk:acceleration-structure)
       ,ptr
       (:struct %vk:acceleration-structure-memory-requirements-info-nv))
    (make-instance 'vk:acceleration-structure-memory-requirements-info-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :type %vk:type
                   :acceleration-structure (vk:make-acceleration-structure-nv-wrapper %vk:acceleration-structure))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-acceleration-structure-features-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:acceleration-structure
        %vk:acceleration-structure-capture-replay
        %vk:acceleration-structure-indirect-build
        %vk:acceleration-structure-host-commands
        %vk:descriptor-binding-acceleration-structure-update-after-bind)
       ,ptr
       (:struct %vk:physical-device-acceleration-structure-features-khr))
    (make-instance 'vk:physical-device-acceleration-structure-features-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :acceleration-structure %vk:acceleration-structure
                   :acceleration-structure-capture-replay %vk:acceleration-structure-capture-replay
                   :acceleration-structure-indirect-build %vk:acceleration-structure-indirect-build
                   :acceleration-structure-host-commands %vk:acceleration-structure-host-commands
                   :descriptor-binding-acceleration-structure-update-after-bind %vk:descriptor-binding-acceleration-structure-update-after-bind)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-ray-tracing-pipeline-features-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:ray-tracing-pipeline
        %vk:ray-tracing-pipeline-shader-group-handle-capture-replay
        %vk:ray-tracing-pipeline-shader-group-handle-capture-replay-mixed
        %vk:ray-tracing-pipeline-trace-rays-indirect
        %vk:ray-traversal-primitive-culling)
       ,ptr
       (:struct %vk:physical-device-ray-tracing-pipeline-features-khr))
    (make-instance 'vk:physical-device-ray-tracing-pipeline-features-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :ray-tracing-pipeline %vk:ray-tracing-pipeline
                   :ray-tracing-pipeline-shader-group-handle-capture-replay %vk:ray-tracing-pipeline-shader-group-handle-capture-replay
                   :ray-tracing-pipeline-shader-group-handle-capture-replay-mixed %vk:ray-tracing-pipeline-shader-group-handle-capture-replay-mixed
                   :ray-tracing-pipeline-trace-rays-indirect %vk:ray-tracing-pipeline-trace-rays-indirect
                   :ray-traversal-primitive-culling %vk:ray-traversal-primitive-culling)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-ray-query-features-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:ray-query)
       ,ptr
       (:struct %vk:physical-device-ray-query-features-khr))
    (make-instance 'vk:physical-device-ray-query-features-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :ray-query %vk:ray-query)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-acceleration-structure-properties-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:max-geometry-count
        %vk:max-instance-count
        %vk:max-primitive-count
        %vk:max-per-stage-descriptor-acceleration-structures
        %vk:max-per-stage-descriptor-update-after-bind-acceleration-structures
        %vk:max-descriptor-set-acceleration-structures
        %vk:max-descriptor-set-update-after-bind-acceleration-structures
        %vk:min-acceleration-structure-scratch-offset-alignment)
       ,ptr
       (:struct %vk:physical-device-acceleration-structure-properties-khr))
    (make-instance 'vk:physical-device-acceleration-structure-properties-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :max-geometry-count %vk:max-geometry-count
                   :max-instance-count %vk:max-instance-count
                   :max-primitive-count %vk:max-primitive-count
                   :max-per-stage-descriptor-acceleration-structures %vk:max-per-stage-descriptor-acceleration-structures
                   :max-per-stage-descriptor-update-after-bind-acceleration-structures %vk:max-per-stage-descriptor-update-after-bind-acceleration-structures
                   :max-descriptor-set-acceleration-structures %vk:max-descriptor-set-acceleration-structures
                   :max-descriptor-set-update-after-bind-acceleration-structures %vk:max-descriptor-set-update-after-bind-acceleration-structures
                   :min-acceleration-structure-scratch-offset-alignment %vk:min-acceleration-structure-scratch-offset-alignment)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-ray-tracing-pipeline-properties-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:shader-group-handle-size
        %vk:max-ray-recursion-depth
        %vk:max-shader-group-stride
        %vk:shader-group-base-alignment
        %vk:shader-group-handle-capture-replay-size
        %vk:max-ray-dispatch-invocation-count
        %vk:shader-group-handle-alignment
        %vk:max-ray-hit-attribute-size)
       ,ptr
       (:struct %vk:physical-device-ray-tracing-pipeline-properties-khr))
    (make-instance 'vk:physical-device-ray-tracing-pipeline-properties-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :shader-group-handle-size %vk:shader-group-handle-size
                   :max-ray-recursion-depth %vk:max-ray-recursion-depth
                   :max-shader-group-stride %vk:max-shader-group-stride
                   :shader-group-base-alignment %vk:shader-group-base-alignment
                   :shader-group-handle-capture-replay-size %vk:shader-group-handle-capture-replay-size
                   :max-ray-dispatch-invocation-count %vk:max-ray-dispatch-invocation-count
                   :shader-group-handle-alignment %vk:shader-group-handle-alignment
                   :max-ray-hit-attribute-size %vk:max-ray-hit-attribute-size)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-ray-tracing-properties-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:shader-group-handle-size
        %vk:max-recursion-depth
        %vk:max-shader-group-stride
        %vk:shader-group-base-alignment
        %vk:max-geometry-count
        %vk:max-instance-count
        %vk:max-triangle-count
        %vk:max-descriptor-set-acceleration-structures)
       ,ptr
       (:struct %vk:physical-device-ray-tracing-properties-nv))
    (make-instance 'vk:physical-device-ray-tracing-properties-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :shader-group-handle-size %vk:shader-group-handle-size
                   :max-recursion-depth %vk:max-recursion-depth
                   :max-shader-group-stride %vk:max-shader-group-stride
                   :shader-group-base-alignment %vk:shader-group-base-alignment
                   :max-geometry-count %vk:max-geometry-count
                   :max-instance-count %vk:max-instance-count
                   :max-triangle-count %vk:max-triangle-count
                   :max-descriptor-set-acceleration-structures %vk:max-descriptor-set-acceleration-structures)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-strided-device-address-region-khr))
  `(cffi:with-foreign-slots
      ((%vk:device-address
        %vk:stride
        %vk:size)
       ,ptr
       (:struct %vk:strided-device-address-region-khr))
    (make-instance 'vk:strided-device-address-region-khr
                   :device-address %vk:device-address
                   :stride %vk:stride
                   :size %vk:size)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-trace-rays-indirect-command-khr))
  `(cffi:with-foreign-slots
      ((%vk:width
        %vk:height
        %vk:depth)
       ,ptr
       (:struct %vk:trace-rays-indirect-command-khr))
    (make-instance 'vk:trace-rays-indirect-command-khr
                   :width %vk:width
                   :height %vk:height
                   :depth %vk:depth)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-drm-format-modifier-properties-list-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:drm-format-modifier-count
        %vk:p-drm-format-modifier-properties)
       ,ptr
       (:struct %vk:drm-format-modifier-properties-list-ext))
    (make-instance 'vk:drm-format-modifier-properties-list-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :drm-format-modifier-properties (loop for i from 0 below %vk:drm-format-modifier-count collect (cffi:mem-aref %vk:p-drm-format-modifier-properties '(:struct %vk:drm-format-modifier-properties-ext) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-drm-format-modifier-properties-ext))
  `(cffi:with-foreign-slots
      ((%vk:drm-format-modifier
        %vk:drm-format-modifier-plane-count
        %vk:drm-format-modifier-tiling-features)
       ,ptr
       (:struct %vk:drm-format-modifier-properties-ext))
    (make-instance 'vk:drm-format-modifier-properties-ext
                   :drm-format-modifier %vk:drm-format-modifier
                   :drm-format-modifier-plane-count %vk:drm-format-modifier-plane-count
                   :drm-format-modifier-tiling-features %vk:drm-format-modifier-tiling-features)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-image-drm-format-modifier-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:drm-format-modifier
        %vk:sharing-mode
        %vk:queue-family-index-count
        %vk:p-queue-family-indices)
       ,ptr
       (:struct %vk:physical-device-image-drm-format-modifier-info-ext))
    (make-instance 'vk:physical-device-image-drm-format-modifier-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :drm-format-modifier %vk:drm-format-modifier
                   :sharing-mode %vk:sharing-mode
                   :queue-family-indices (loop for i from 0 below %vk:queue-family-index-count collect (cffi:mem-aref %vk:p-queue-family-indices :uint32 i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-image-drm-format-modifier-list-create-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:drm-format-modifier-count
        %vk:p-drm-format-modifiers)
       ,ptr
       (:struct %vk:image-drm-format-modifier-list-create-info-ext))
    (make-instance 'vk:image-drm-format-modifier-list-create-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :drm-format-modifiers (loop for i from 0 below %vk:drm-format-modifier-count collect (cffi:mem-aref %vk:p-drm-format-modifiers :uint64 i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-image-drm-format-modifier-explicit-create-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:drm-format-modifier
        %vk:drm-format-modifier-plane-count
        %vk:p-plane-layouts)
       ,ptr
       (:struct %vk:image-drm-format-modifier-explicit-create-info-ext))
    (make-instance 'vk:image-drm-format-modifier-explicit-create-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :drm-format-modifier %vk:drm-format-modifier
                   :plane-layouts (loop for i from 0 below %vk:drm-format-modifier-plane-count collect (cffi:mem-aref %vk:p-plane-layouts '(:struct %vk:subresource-layout) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-image-drm-format-modifier-properties-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:drm-format-modifier)
       ,ptr
       (:struct %vk:image-drm-format-modifier-properties-ext))
    (make-instance 'vk:image-drm-format-modifier-properties-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :drm-format-modifier %vk:drm-format-modifier)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-image-stencil-usage-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:stencil-usage)
       ,ptr
       (:struct %vk:image-stencil-usage-create-info))
    (make-instance 'vk:image-stencil-usage-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :stencil-usage %vk:stencil-usage)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-device-memory-overallocation-create-info-amd))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:overallocation-behavior)
       ,ptr
       (:struct %vk:device-memory-overallocation-create-info-amd))
    (make-instance 'vk:device-memory-overallocation-create-info-amd
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :overallocation-behavior %vk:overallocation-behavior)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-fragment-density-map-features-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:fragment-density-map
        %vk:fragment-density-map-dynamic
        %vk:fragment-density-map-non-subsampled-images)
       ,ptr
       (:struct %vk:physical-device-fragment-density-map-features-ext))
    (make-instance 'vk:physical-device-fragment-density-map-features-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :fragment-density-map %vk:fragment-density-map
                   :fragment-density-map-dynamic %vk:fragment-density-map-dynamic
                   :fragment-density-map-non-subsampled-images %vk:fragment-density-map-non-subsampled-images)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-fragment-density-map-2-features-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:fragment-density-map-deferred)
       ,ptr
       (:struct %vk:physical-device-fragment-density-map-2-features-ext))
    (make-instance 'vk:physical-device-fragment-density-map-2-features-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :fragment-density-map-deferred %vk:fragment-density-map-deferred)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-fragment-density-map-properties-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:min-fragment-density-texel-size
        %vk:max-fragment-density-texel-size
        %vk:fragment-density-invocations)
       ,ptr
       (:struct %vk:physical-device-fragment-density-map-properties-ext))
    (make-instance 'vk:physical-device-fragment-density-map-properties-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :min-fragment-density-texel-size %vk:min-fragment-density-texel-size
                   :max-fragment-density-texel-size %vk:max-fragment-density-texel-size
                   :fragment-density-invocations %vk:fragment-density-invocations)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-fragment-density-map-2-properties-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:subsampled-loads
        %vk:subsampled-coarse-reconstruction-early-access
        %vk:max-subsampled-array-layers
        %vk:max-descriptor-set-subsampled-samplers)
       ,ptr
       (:struct %vk:physical-device-fragment-density-map-2-properties-ext))
    (make-instance 'vk:physical-device-fragment-density-map-2-properties-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :subsampled-loads %vk:subsampled-loads
                   :subsampled-coarse-reconstruction-early-access %vk:subsampled-coarse-reconstruction-early-access
                   :max-subsampled-array-layers %vk:max-subsampled-array-layers
                   :max-descriptor-set-subsampled-samplers %vk:max-descriptor-set-subsampled-samplers)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-render-pass-fragment-density-map-create-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:fragment-density-map-attachment)
       ,ptr
       (:struct %vk:render-pass-fragment-density-map-create-info-ext))
    (make-instance 'vk:render-pass-fragment-density-map-create-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :fragment-density-map-attachment %vk:fragment-density-map-attachment)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-scalar-block-layout-features))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:scalar-block-layout)
       ,ptr
       (:struct %vk:physical-device-scalar-block-layout-features))
    (make-instance 'vk:physical-device-scalar-block-layout-features
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :scalar-block-layout %vk:scalar-block-layout)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-surface-protected-capabilities-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:supports-protected)
       ,ptr
       (:struct %vk:surface-protected-capabilities-khr))
    (make-instance 'vk:surface-protected-capabilities-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :supports-protected %vk:supports-protected)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-uniform-buffer-standard-layout-features))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:uniform-buffer-standard-layout)
       ,ptr
       (:struct %vk:physical-device-uniform-buffer-standard-layout-features))
    (make-instance 'vk:physical-device-uniform-buffer-standard-layout-features
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :uniform-buffer-standard-layout %vk:uniform-buffer-standard-layout)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-depth-clip-enable-features-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:depth-clip-enable)
       ,ptr
       (:struct %vk:physical-device-depth-clip-enable-features-ext))
    (make-instance 'vk:physical-device-depth-clip-enable-features-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :depth-clip-enable %vk:depth-clip-enable)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-rasterization-depth-clip-state-create-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:depth-clip-enable)
       ,ptr
       (:struct %vk:pipeline-rasterization-depth-clip-state-create-info-ext))
    (make-instance 'vk:pipeline-rasterization-depth-clip-state-create-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :depth-clip-enable %vk:depth-clip-enable)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-memory-budget-properties-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:heap-budget
        %vk:heap-usage)
       ,ptr
       (:struct %vk:physical-device-memory-budget-properties-ext))
    (make-instance 'vk:physical-device-memory-budget-properties-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :heap-budget (loop for i from 0 below 16 collect (cffi:mem-aref %vk:heap-budget '%vk:device-size i))
                   :heap-usage (loop for i from 0 below 16 collect (cffi:mem-aref %vk:heap-usage '%vk:device-size i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-memory-priority-features-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:memory-priority)
       ,ptr
       (:struct %vk:physical-device-memory-priority-features-ext))
    (make-instance 'vk:physical-device-memory-priority-features-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :memory-priority %vk:memory-priority)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-memory-priority-allocate-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:priority)
       ,ptr
       (:struct %vk:memory-priority-allocate-info-ext))
    (make-instance 'vk:memory-priority-allocate-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :priority %vk:priority)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-pageable-device-local-memory-features-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:pageable-device-local-memory)
       ,ptr
       (:struct %vk:physical-device-pageable-device-local-memory-features-ext))
    (make-instance 'vk:physical-device-pageable-device-local-memory-features-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :pageable-device-local-memory %vk:pageable-device-local-memory)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-buffer-device-address-features))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:buffer-device-address
        %vk:buffer-device-address-capture-replay
        %vk:buffer-device-address-multi-device)
       ,ptr
       (:struct %vk:physical-device-buffer-device-address-features))
    (make-instance 'vk:physical-device-buffer-device-address-features
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :buffer-device-address %vk:buffer-device-address
                   :buffer-device-address-capture-replay %vk:buffer-device-address-capture-replay
                   :buffer-device-address-multi-device %vk:buffer-device-address-multi-device)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-buffer-device-address-features-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:buffer-device-address
        %vk:buffer-device-address-capture-replay
        %vk:buffer-device-address-multi-device)
       ,ptr
       (:struct %vk:physical-device-buffer-device-address-features-ext))
    (make-instance 'vk:physical-device-buffer-device-address-features-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :buffer-device-address %vk:buffer-device-address
                   :buffer-device-address-capture-replay %vk:buffer-device-address-capture-replay
                   :buffer-device-address-multi-device %vk:buffer-device-address-multi-device)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-buffer-device-address-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:buffer)
       ,ptr
       (:struct %vk:buffer-device-address-info))
    (make-instance 'vk:buffer-device-address-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :buffer (vk:make-buffer-wrapper %vk:buffer))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-buffer-opaque-capture-address-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:opaque-capture-address)
       ,ptr
       (:struct %vk:buffer-opaque-capture-address-create-info))
    (make-instance 'vk:buffer-opaque-capture-address-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :opaque-capture-address %vk:opaque-capture-address)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-buffer-device-address-create-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:device-address)
       ,ptr
       (:struct %vk:buffer-device-address-create-info-ext))
    (make-instance 'vk:buffer-device-address-create-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :device-address %vk:device-address)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-image-view-image-format-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:image-view-type)
       ,ptr
       (:struct %vk:physical-device-image-view-image-format-info-ext))
    (make-instance 'vk:physical-device-image-view-image-format-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :image-view-type %vk:image-view-type)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-filter-cubic-image-view-image-format-properties-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:filter-cubic
        %vk:filter-cubic-minmax)
       ,ptr
       (:struct %vk:filter-cubic-image-view-image-format-properties-ext))
    (make-instance 'vk:filter-cubic-image-view-image-format-properties-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :filter-cubic %vk:filter-cubic
                   :filter-cubic-minmax %vk:filter-cubic-minmax)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-imageless-framebuffer-features))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:imageless-framebuffer)
       ,ptr
       (:struct %vk:physical-device-imageless-framebuffer-features))
    (make-instance 'vk:physical-device-imageless-framebuffer-features
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :imageless-framebuffer %vk:imageless-framebuffer)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-framebuffer-attachments-create-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:attachment-image-info-count
        %vk:p-attachment-image-infos)
       ,ptr
       (:struct %vk:framebuffer-attachments-create-info))
    (make-instance 'vk:framebuffer-attachments-create-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :attachment-image-infos (loop for i from 0 below %vk:attachment-image-info-count collect (cffi:mem-aref %vk:p-attachment-image-infos '(:struct %vk:framebuffer-attachment-image-info) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-framebuffer-attachment-image-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:usage
        %vk:width
        %vk:height
        %vk:layer-count
        %vk:view-format-count
        %vk:p-view-formats)
       ,ptr
       (:struct %vk:framebuffer-attachment-image-info))
    (make-instance 'vk:framebuffer-attachment-image-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :usage %vk:usage
                   :width %vk:width
                   :height %vk:height
                   :layer-count %vk:layer-count
                   :view-formats (loop for i from 0 below %vk:view-format-count collect (cffi:mem-aref %vk:p-view-formats '%vk:format i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-render-pass-attachment-begin-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:attachment-count
        %vk:p-attachments)
       ,ptr
       (:struct %vk:render-pass-attachment-begin-info))
    (make-instance 'vk:render-pass-attachment-begin-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :attachments (loop for i from 0 below %vk:attachment-count collect (vk:make-image-view-wrapper (cffi:mem-aref %vk:p-attachments '%vk:image-view i))))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-texture-compression-astc-h-d-r-features-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:texture-compression-astc_-h-d-r)
       ,ptr
       (:struct %vk:physical-device-texture-compression-astc-h-d-r-features-ext))
    (make-instance 'vk:physical-device-texture-compression-astc-h-d-r-features-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :texture-compression-astc_-h-d-r %vk:texture-compression-astc_-h-d-r)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-cooperative-matrix-features-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:cooperative-matrix
        %vk:cooperative-matrix-robust-buffer-access)
       ,ptr
       (:struct %vk:physical-device-cooperative-matrix-features-nv))
    (make-instance 'vk:physical-device-cooperative-matrix-features-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :cooperative-matrix %vk:cooperative-matrix
                   :cooperative-matrix-robust-buffer-access %vk:cooperative-matrix-robust-buffer-access)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-cooperative-matrix-properties-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:cooperative-matrix-supported-stages)
       ,ptr
       (:struct %vk:physical-device-cooperative-matrix-properties-nv))
    (make-instance 'vk:physical-device-cooperative-matrix-properties-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :cooperative-matrix-supported-stages %vk:cooperative-matrix-supported-stages)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-cooperative-matrix-properties-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:m-size
        %vk:n-size
        %vk:k-size
        %vk:a-type
        %vk:b-type
        %vk:c-type
        %vk:d-type
        %vk:scope)
       ,ptr
       (:struct %vk:cooperative-matrix-properties-nv))
    (make-instance 'vk:cooperative-matrix-properties-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :m-size %vk:m-size
                   :n-size %vk:n-size
                   :k-size %vk:k-size
                   :a-type %vk:a-type
                   :b-type %vk:b-type
                   :c-type %vk:c-type
                   :d-type %vk:d-type
                   :scope %vk:scope)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-ycbcr-image-arrays-features-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:ycbcr-image-arrays)
       ,ptr
       (:struct %vk:physical-device-ycbcr-image-arrays-features-ext))
    (make-instance 'vk:physical-device-ycbcr-image-arrays-features-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :ycbcr-image-arrays %vk:ycbcr-image-arrays)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-image-view-handle-info-nvx))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:image-view
        %vk:descriptor-type
        %vk:sampler)
       ,ptr
       (:struct %vk:image-view-handle-info-nvx))
    (make-instance 'vk:image-view-handle-info-nvx
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :image-view (vk:make-image-view-wrapper %vk:image-view)
                   :descriptor-type %vk:descriptor-type
                   :sampler (vk:make-sampler-wrapper %vk:sampler))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-image-view-address-properties-nvx))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:device-address
        %vk:size)
       ,ptr
       (:struct %vk:image-view-address-properties-nvx))
    (make-instance 'vk:image-view-address-properties-nvx
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :device-address %vk:device-address
                   :size %vk:size)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-present-frame-token-ggp))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:frame-token)
       ,ptr
       (:struct %vk:present-frame-token-ggp))
    (make-instance 'vk:present-frame-token-ggp
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :frame-token %vk:frame-token)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-creation-feedback-ext))
  `(cffi:with-foreign-slots
      ((%vk:flags
        %vk:duration)
       ,ptr
       (:struct %vk:pipeline-creation-feedback-ext))
    (make-instance 'vk:pipeline-creation-feedback-ext
                   :flags %vk:flags
                   :duration %vk:duration)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-creation-feedback-create-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:p-pipeline-creation-feedback
        %vk:pipeline-stage-creation-feedback-count
        %vk:p-pipeline-stage-creation-feedbacks)
       ,ptr
       (:struct %vk:pipeline-creation-feedback-create-info-ext))
    (make-instance 'vk:pipeline-creation-feedback-create-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :pipeline-creation-feedback %vk:p-pipeline-creation-feedback
                   :pipeline-stage-creation-feedbacks (loop for i from 0 below %vk:pipeline-stage-creation-feedback-count collect (cffi:mem-aref %vk:p-pipeline-stage-creation-feedbacks '(:struct %vk:pipeline-creation-feedback-ext) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-surface-full-screen-exclusive-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:full-screen-exclusive)
       ,ptr
       (:struct %vk:surface-full-screen-exclusive-info-ext))
    (make-instance 'vk:surface-full-screen-exclusive-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :full-screen-exclusive %vk:full-screen-exclusive)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-surface-full-screen-exclusive-win32-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:hmonitor)
       ,ptr
       (:struct %vk:surface-full-screen-exclusive-win32-info-ext))
    (make-instance 'vk:surface-full-screen-exclusive-win32-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :hmonitor %vk:hmonitor)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-surface-capabilities-full-screen-exclusive-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:full-screen-exclusive-supported)
       ,ptr
       (:struct %vk:surface-capabilities-full-screen-exclusive-ext))
    (make-instance 'vk:surface-capabilities-full-screen-exclusive-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :full-screen-exclusive-supported %vk:full-screen-exclusive-supported)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-performance-query-features-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:performance-counter-query-pools
        %vk:performance-counter-multiple-query-pools)
       ,ptr
       (:struct %vk:physical-device-performance-query-features-khr))
    (make-instance 'vk:physical-device-performance-query-features-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :performance-counter-query-pools %vk:performance-counter-query-pools
                   :performance-counter-multiple-query-pools %vk:performance-counter-multiple-query-pools)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-performance-query-properties-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:allow-command-buffer-query-copies)
       ,ptr
       (:struct %vk:physical-device-performance-query-properties-khr))
    (make-instance 'vk:physical-device-performance-query-properties-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :allow-command-buffer-query-copies %vk:allow-command-buffer-query-copies)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-performance-counter-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:unit
        %vk:scope
        %vk:storage
        %vk:uuid)
       ,ptr
       (:struct %vk:performance-counter-khr))
    (make-instance 'vk:performance-counter-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :unit %vk:unit
                   :scope %vk:scope
                   :storage %vk:storage
                   :uuid (cl:coerce (loop for i from 0 below 16 collect (cffi:mem-aref %vk:uuid :uint8 i)) 'vector))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-performance-counter-description-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:name
        %vk:category
        %vk:description)
       ,ptr
       (:struct %vk:performance-counter-description-khr))
    (make-instance 'vk:performance-counter-description-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :name (cffi:foreign-string-to-lisp %vk:name)
                   :category (cffi:foreign-string-to-lisp %vk:category)
                   :description (cffi:foreign-string-to-lisp %vk:description))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-query-pool-performance-create-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:queue-family-index
        %vk:counter-index-count
        %vk:p-counter-indices)
       ,ptr
       (:struct %vk:query-pool-performance-create-info-khr))
    (make-instance 'vk:query-pool-performance-create-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :queue-family-index %vk:queue-family-index
                   :counter-indices (loop for i from 0 below %vk:counter-index-count collect (cffi:mem-aref %vk:p-counter-indices :uint32 i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-acquire-profiling-lock-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:timeout)
       ,ptr
       (:struct %vk:acquire-profiling-lock-info-khr))
    (make-instance 'vk:acquire-profiling-lock-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :timeout %vk:timeout)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-performance-query-submit-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:counter-pass-index)
       ,ptr
       (:struct %vk:performance-query-submit-info-khr))
    (make-instance 'vk:performance-query-submit-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :counter-pass-index %vk:counter-pass-index)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-headless-surface-create-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags)
       ,ptr
       (:struct %vk:headless-surface-create-info-ext))
    (make-instance 'vk:headless-surface-create-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-coverage-reduction-mode-features-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:coverage-reduction-mode)
       ,ptr
       (:struct %vk:physical-device-coverage-reduction-mode-features-nv))
    (make-instance 'vk:physical-device-coverage-reduction-mode-features-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :coverage-reduction-mode %vk:coverage-reduction-mode)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-coverage-reduction-state-create-info-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:coverage-reduction-mode)
       ,ptr
       (:struct %vk:pipeline-coverage-reduction-state-create-info-nv))
    (make-instance 'vk:pipeline-coverage-reduction-state-create-info-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :coverage-reduction-mode %vk:coverage-reduction-mode)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-framebuffer-mixed-samples-combination-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:coverage-reduction-mode
        %vk:rasterization-samples
        %vk:depth-stencil-samples
        %vk:color-samples)
       ,ptr
       (:struct %vk:framebuffer-mixed-samples-combination-nv))
    (make-instance 'vk:framebuffer-mixed-samples-combination-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :coverage-reduction-mode %vk:coverage-reduction-mode
                   :rasterization-samples %vk:rasterization-samples
                   :depth-stencil-samples %vk:depth-stencil-samples
                   :color-samples %vk:color-samples)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-shader-integer-functions-2-features-intel))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:shader-integer-functions-2)
       ,ptr
       (:struct %vk:physical-device-shader-integer-functions-2-features-intel))
    (make-instance 'vk:physical-device-shader-integer-functions-2-features-intel
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :shader-integer-functions-2 %vk:shader-integer-functions-2)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-performance-value-intel))
  `(cffi:with-foreign-slots
      ((%vk:type
        %vk:data)
       ,ptr
       (:struct %vk:performance-value-intel))
    (make-instance 'vk:performance-value-intel
                   :type %vk:type
                   :data nil)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-initialize-performance-api-info-intel))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:p-user-data)
       ,ptr
       (:struct %vk:initialize-performance-api-info-intel))
    (make-instance 'vk:initialize-performance-api-info-intel
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :user-data %vk:p-user-data)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-query-pool-performance-query-create-info-intel))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:performance-counters-sampling)
       ,ptr
       (:struct %vk:query-pool-performance-query-create-info-intel))
    (make-instance 'vk:query-pool-performance-query-create-info-intel
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :performance-counters-sampling %vk:performance-counters-sampling)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-performance-marker-info-intel))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:marker)
       ,ptr
       (:struct %vk:performance-marker-info-intel))
    (make-instance 'vk:performance-marker-info-intel
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :marker %vk:marker)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-performance-stream-marker-info-intel))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:marker)
       ,ptr
       (:struct %vk:performance-stream-marker-info-intel))
    (make-instance 'vk:performance-stream-marker-info-intel
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :marker %vk:marker)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-performance-override-info-intel))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:type
        %vk:enable
        %vk:parameter)
       ,ptr
       (:struct %vk:performance-override-info-intel))
    (make-instance 'vk:performance-override-info-intel
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :type %vk:type
                   :enable %vk:enable
                   :parameter %vk:parameter)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-performance-configuration-acquire-info-intel))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:type)
       ,ptr
       (:struct %vk:performance-configuration-acquire-info-intel))
    (make-instance 'vk:performance-configuration-acquire-info-intel
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :type %vk:type)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-shader-clock-features-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:shader-subgroup-clock
        %vk:shader-device-clock)
       ,ptr
       (:struct %vk:physical-device-shader-clock-features-khr))
    (make-instance 'vk:physical-device-shader-clock-features-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :shader-subgroup-clock %vk:shader-subgroup-clock
                   :shader-device-clock %vk:shader-device-clock)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-index-type-uint-8-features-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:index-type-uint-8)
       ,ptr
       (:struct %vk:physical-device-index-type-uint-8-features-ext))
    (make-instance 'vk:physical-device-index-type-uint-8-features-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :index-type-uint-8 %vk:index-type-uint-8)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-shader-s-m-builtins-properties-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:shader-s-m-count
        %vk:shader-warps-per-s-m)
       ,ptr
       (:struct %vk:physical-device-shader-s-m-builtins-properties-nv))
    (make-instance 'vk:physical-device-shader-s-m-builtins-properties-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :shader-s-m-count %vk:shader-s-m-count
                   :shader-warps-per-s-m %vk:shader-warps-per-s-m)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-shader-s-m-builtins-features-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:shader-s-m-builtins)
       ,ptr
       (:struct %vk:physical-device-shader-s-m-builtins-features-nv))
    (make-instance 'vk:physical-device-shader-s-m-builtins-features-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :shader-s-m-builtins %vk:shader-s-m-builtins)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-fragment-shader-interlock-features-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:fragment-shader-sample-interlock
        %vk:fragment-shader-pixel-interlock
        %vk:fragment-shader-shading-rate-interlock)
       ,ptr
       (:struct %vk:physical-device-fragment-shader-interlock-features-ext))
    (make-instance 'vk:physical-device-fragment-shader-interlock-features-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :fragment-shader-sample-interlock %vk:fragment-shader-sample-interlock
                   :fragment-shader-pixel-interlock %vk:fragment-shader-pixel-interlock
                   :fragment-shader-shading-rate-interlock %vk:fragment-shader-shading-rate-interlock)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-separate-depth-stencil-layouts-features))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:separate-depth-stencil-layouts)
       ,ptr
       (:struct %vk:physical-device-separate-depth-stencil-layouts-features))
    (make-instance 'vk:physical-device-separate-depth-stencil-layouts-features
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :separate-depth-stencil-layouts %vk:separate-depth-stencil-layouts)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-attachment-reference-stencil-layout))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:stencil-layout)
       ,ptr
       (:struct %vk:attachment-reference-stencil-layout))
    (make-instance 'vk:attachment-reference-stencil-layout
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :stencil-layout %vk:stencil-layout)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-primitive-topology-list-restart-features-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:primitive-topology-list-restart
        %vk:primitive-topology-patch-list-restart)
       ,ptr
       (:struct %vk:physical-device-primitive-topology-list-restart-features-ext))
    (make-instance 'vk:physical-device-primitive-topology-list-restart-features-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :primitive-topology-list-restart %vk:primitive-topology-list-restart
                   :primitive-topology-patch-list-restart %vk:primitive-topology-patch-list-restart)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-attachment-description-stencil-layout))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:stencil-initial-layout
        %vk:stencil-final-layout)
       ,ptr
       (:struct %vk:attachment-description-stencil-layout))
    (make-instance 'vk:attachment-description-stencil-layout
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :stencil-initial-layout %vk:stencil-initial-layout
                   :stencil-final-layout %vk:stencil-final-layout)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-pipeline-executable-properties-features-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:pipeline-executable-info)
       ,ptr
       (:struct %vk:physical-device-pipeline-executable-properties-features-khr))
    (make-instance 'vk:physical-device-pipeline-executable-properties-features-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :pipeline-executable-info %vk:pipeline-executable-info)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:pipeline)
       ,ptr
       (:struct %vk:pipeline-info-khr))
    (make-instance 'vk:pipeline-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :pipeline (vk:make-pipeline-wrapper %vk:pipeline))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-executable-properties-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:stages
        %vk:name
        %vk:description
        %vk:subgroup-size)
       ,ptr
       (:struct %vk:pipeline-executable-properties-khr))
    (make-instance 'vk:pipeline-executable-properties-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :stages %vk:stages
                   :name (cffi:foreign-string-to-lisp %vk:name)
                   :description (cffi:foreign-string-to-lisp %vk:description)
                   :subgroup-size %vk:subgroup-size)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-executable-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:pipeline
        %vk:executable-index)
       ,ptr
       (:struct %vk:pipeline-executable-info-khr))
    (make-instance 'vk:pipeline-executable-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :pipeline (vk:make-pipeline-wrapper %vk:pipeline)
                   :executable-index %vk:executable-index)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-executable-statistic-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:name
        %vk:description
        %vk:format
        %vk:value)
       ,ptr
       (:struct %vk:pipeline-executable-statistic-khr))
    (make-instance 'vk:pipeline-executable-statistic-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :name (cffi:foreign-string-to-lisp %vk:name)
                   :description (cffi:foreign-string-to-lisp %vk:description)
                   :format %vk:format
                   :value nil)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-executable-internal-representation-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:name
        %vk:description
        %vk:is-text
        %vk:data-size
        %vk:p-data)
       ,ptr
       (:struct %vk:pipeline-executable-internal-representation-khr))
    (make-instance 'vk:pipeline-executable-internal-representation-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :name (cffi:foreign-string-to-lisp %vk:name)
                   :description (cffi:foreign-string-to-lisp %vk:description)
                   :is-text %vk:is-text
                   :data-size %vk:data-size
                   :data %vk:p-data)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-shader-demote-to-helper-invocation-features-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:shader-demote-to-helper-invocation)
       ,ptr
       (:struct %vk:physical-device-shader-demote-to-helper-invocation-features-ext))
    (make-instance 'vk:physical-device-shader-demote-to-helper-invocation-features-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :shader-demote-to-helper-invocation %vk:shader-demote-to-helper-invocation)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-texel-buffer-alignment-features-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:texel-buffer-alignment)
       ,ptr
       (:struct %vk:physical-device-texel-buffer-alignment-features-ext))
    (make-instance 'vk:physical-device-texel-buffer-alignment-features-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :texel-buffer-alignment %vk:texel-buffer-alignment)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-texel-buffer-alignment-properties-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:storage-texel-buffer-offset-alignment-bytes
        %vk:storage-texel-buffer-offset-single-texel-alignment
        %vk:uniform-texel-buffer-offset-alignment-bytes
        %vk:uniform-texel-buffer-offset-single-texel-alignment)
       ,ptr
       (:struct %vk:physical-device-texel-buffer-alignment-properties-ext))
    (make-instance 'vk:physical-device-texel-buffer-alignment-properties-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :storage-texel-buffer-offset-alignment-bytes %vk:storage-texel-buffer-offset-alignment-bytes
                   :storage-texel-buffer-offset-single-texel-alignment %vk:storage-texel-buffer-offset-single-texel-alignment
                   :uniform-texel-buffer-offset-alignment-bytes %vk:uniform-texel-buffer-offset-alignment-bytes
                   :uniform-texel-buffer-offset-single-texel-alignment %vk:uniform-texel-buffer-offset-single-texel-alignment)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-subgroup-size-control-features-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:subgroup-size-control
        %vk:compute-full-subgroups)
       ,ptr
       (:struct %vk:physical-device-subgroup-size-control-features-ext))
    (make-instance 'vk:physical-device-subgroup-size-control-features-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :subgroup-size-control %vk:subgroup-size-control
                   :compute-full-subgroups %vk:compute-full-subgroups)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-subgroup-size-control-properties-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:min-subgroup-size
        %vk:max-subgroup-size
        %vk:max-compute-workgroup-subgroups
        %vk:required-subgroup-size-stages)
       ,ptr
       (:struct %vk:physical-device-subgroup-size-control-properties-ext))
    (make-instance 'vk:physical-device-subgroup-size-control-properties-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :min-subgroup-size %vk:min-subgroup-size
                   :max-subgroup-size %vk:max-subgroup-size
                   :max-compute-workgroup-subgroups %vk:max-compute-workgroup-subgroups
                   :required-subgroup-size-stages %vk:required-subgroup-size-stages)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-shader-stage-required-subgroup-size-create-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:required-subgroup-size)
       ,ptr
       (:struct %vk:pipeline-shader-stage-required-subgroup-size-create-info-ext))
    (make-instance 'vk:pipeline-shader-stage-required-subgroup-size-create-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :required-subgroup-size %vk:required-subgroup-size)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-subpass-shading-pipeline-create-info-huawei))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:render-pass
        %vk:subpass)
       ,ptr
       (:struct %vk:subpass-shading-pipeline-create-info-huawei))
    (make-instance 'vk:subpass-shading-pipeline-create-info-huawei
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :render-pass (vk:make-render-pass-wrapper %vk:render-pass)
                   :subpass %vk:subpass)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-subpass-shading-properties-huawei))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:max-subpass-shading-workgroup-size-aspect-ratio)
       ,ptr
       (:struct %vk:physical-device-subpass-shading-properties-huawei))
    (make-instance 'vk:physical-device-subpass-shading-properties-huawei
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :max-subpass-shading-workgroup-size-aspect-ratio %vk:max-subpass-shading-workgroup-size-aspect-ratio)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-memory-opaque-capture-address-allocate-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:opaque-capture-address)
       ,ptr
       (:struct %vk:memory-opaque-capture-address-allocate-info))
    (make-instance 'vk:memory-opaque-capture-address-allocate-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :opaque-capture-address %vk:opaque-capture-address)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-device-memory-opaque-capture-address-info))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:memory)
       ,ptr
       (:struct %vk:device-memory-opaque-capture-address-info))
    (make-instance 'vk:device-memory-opaque-capture-address-info
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :memory (vk:make-device-memory-wrapper %vk:memory))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-line-rasterization-features-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:rectangular-lines
        %vk:bresenham-lines
        %vk:smooth-lines
        %vk:stippled-rectangular-lines
        %vk:stippled-bresenham-lines
        %vk:stippled-smooth-lines)
       ,ptr
       (:struct %vk:physical-device-line-rasterization-features-ext))
    (make-instance 'vk:physical-device-line-rasterization-features-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :rectangular-lines %vk:rectangular-lines
                   :bresenham-lines %vk:bresenham-lines
                   :smooth-lines %vk:smooth-lines
                   :stippled-rectangular-lines %vk:stippled-rectangular-lines
                   :stippled-bresenham-lines %vk:stippled-bresenham-lines
                   :stippled-smooth-lines %vk:stippled-smooth-lines)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-line-rasterization-properties-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:line-sub-pixel-precision-bits)
       ,ptr
       (:struct %vk:physical-device-line-rasterization-properties-ext))
    (make-instance 'vk:physical-device-line-rasterization-properties-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :line-sub-pixel-precision-bits %vk:line-sub-pixel-precision-bits)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-rasterization-line-state-create-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:line-rasterization-mode
        %vk:stippled-line-enable
        %vk:line-stipple-factor
        %vk:line-stipple-pattern)
       ,ptr
       (:struct %vk:pipeline-rasterization-line-state-create-info-ext))
    (make-instance 'vk:pipeline-rasterization-line-state-create-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :line-rasterization-mode %vk:line-rasterization-mode
                   :stippled-line-enable %vk:stippled-line-enable
                   :line-stipple-factor %vk:line-stipple-factor
                   :line-stipple-pattern %vk:line-stipple-pattern)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-pipeline-creation-cache-control-features-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:pipeline-creation-cache-control)
       ,ptr
       (:struct %vk:physical-device-pipeline-creation-cache-control-features-ext))
    (make-instance 'vk:physical-device-pipeline-creation-cache-control-features-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :pipeline-creation-cache-control %vk:pipeline-creation-cache-control)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-vulkan-1-1-features))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:storage-buffer-16-bit-access
        %vk:uniform-and-storage-buffer-16-bit-access
        %vk:storage-push-constant-16
        %vk:storage-input-output-16
        %vk:multiview
        %vk:multiview-geometry-shader
        %vk:multiview-tessellation-shader
        %vk:variable-pointers-storage-buffer
        %vk:variable-pointers
        %vk:protected-memory
        %vk:sampler-ycbcr-conversion
        %vk:shader-draw-parameters)
       ,ptr
       (:struct %vk:physical-device-vulkan-1-1-features))
    (make-instance 'vk:physical-device-vulkan-1-1-features
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :storage-buffer-16-bit-access %vk:storage-buffer-16-bit-access
                   :uniform-and-storage-buffer-16-bit-access %vk:uniform-and-storage-buffer-16-bit-access
                   :storage-push-constant-16 %vk:storage-push-constant-16
                   :storage-input-output-16 %vk:storage-input-output-16
                   :multiview %vk:multiview
                   :multiview-geometry-shader %vk:multiview-geometry-shader
                   :multiview-tessellation-shader %vk:multiview-tessellation-shader
                   :variable-pointers-storage-buffer %vk:variable-pointers-storage-buffer
                   :variable-pointers %vk:variable-pointers
                   :protected-memory %vk:protected-memory
                   :sampler-ycbcr-conversion %vk:sampler-ycbcr-conversion
                   :shader-draw-parameters %vk:shader-draw-parameters)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-vulkan-1-1-properties))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:device-uuid
        %vk:driver-uuid
        %vk:device-luid
        %vk:device-node-mask
        %vk:device-luid-valid
        %vk:subgroup-size
        %vk:subgroup-supported-stages
        %vk:subgroup-supported-operations
        %vk:subgroup-quad-operations-in-all-stages
        %vk:point-clipping-behavior
        %vk:max-multiview-view-count
        %vk:max-multiview-instance-index
        %vk:protected-no-fault
        %vk:max-per-set-descriptors
        %vk:max-memory-allocation-size)
       ,ptr
       (:struct %vk:physical-device-vulkan-1-1-properties))
    (make-instance 'vk:physical-device-vulkan-1-1-properties
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :device-uuid (cl:coerce (loop for i from 0 below 16 collect (cffi:mem-aref %vk:device-uuid :uint8 i)) 'vector)
                   :driver-uuid (cl:coerce (loop for i from 0 below 16 collect (cffi:mem-aref %vk:driver-uuid :uint8 i)) 'vector)
                   :device-luid (cl:coerce (loop for i from 0 below 8 collect (cffi:mem-aref %vk:device-luid :uint8 i)) 'vector)
                   :device-node-mask %vk:device-node-mask
                   :device-luid-valid %vk:device-luid-valid
                   :subgroup-size %vk:subgroup-size
                   :subgroup-supported-stages %vk:subgroup-supported-stages
                   :subgroup-supported-operations %vk:subgroup-supported-operations
                   :subgroup-quad-operations-in-all-stages %vk:subgroup-quad-operations-in-all-stages
                   :point-clipping-behavior %vk:point-clipping-behavior
                   :max-multiview-view-count %vk:max-multiview-view-count
                   :max-multiview-instance-index %vk:max-multiview-instance-index
                   :protected-no-fault %vk:protected-no-fault
                   :max-per-set-descriptors %vk:max-per-set-descriptors
                   :max-memory-allocation-size %vk:max-memory-allocation-size)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-vulkan-1-2-features))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:sampler-mirror-clamp-to-edge
        %vk:draw-indirect-count
        %vk:storage-buffer-8-bit-access
        %vk:uniform-and-storage-buffer-8-bit-access
        %vk:storage-push-constant-8
        %vk:shader-buffer-int-64-atomics
        %vk:shader-shared-int-64-atomics
        %vk:shader-float-16
        %vk:shader-int-8
        %vk:descriptor-indexing
        %vk:shader-input-attachment-array-dynamic-indexing
        %vk:shader-uniform-texel-buffer-array-dynamic-indexing
        %vk:shader-storage-texel-buffer-array-dynamic-indexing
        %vk:shader-uniform-buffer-array-non-uniform-indexing
        %vk:shader-sampled-image-array-non-uniform-indexing
        %vk:shader-storage-buffer-array-non-uniform-indexing
        %vk:shader-storage-image-array-non-uniform-indexing
        %vk:shader-input-attachment-array-non-uniform-indexing
        %vk:shader-uniform-texel-buffer-array-non-uniform-indexing
        %vk:shader-storage-texel-buffer-array-non-uniform-indexing
        %vk:descriptor-binding-uniform-buffer-update-after-bind
        %vk:descriptor-binding-sampled-image-update-after-bind
        %vk:descriptor-binding-storage-image-update-after-bind
        %vk:descriptor-binding-storage-buffer-update-after-bind
        %vk:descriptor-binding-uniform-texel-buffer-update-after-bind
        %vk:descriptor-binding-storage-texel-buffer-update-after-bind
        %vk:descriptor-binding-update-unused-while-pending
        %vk:descriptor-binding-partially-bound
        %vk:descriptor-binding-variable-descriptor-count
        %vk:runtime-descriptor-array
        %vk:sampler-filter-minmax
        %vk:scalar-block-layout
        %vk:imageless-framebuffer
        %vk:uniform-buffer-standard-layout
        %vk:shader-subgroup-extended-types
        %vk:separate-depth-stencil-layouts
        %vk:host-query-reset
        %vk:timeline-semaphore
        %vk:buffer-device-address
        %vk:buffer-device-address-capture-replay
        %vk:buffer-device-address-multi-device
        %vk:vulkan-memory-model
        %vk:vulkan-memory-model-device-scope
        %vk:vulkan-memory-model-availability-visibility-chains
        %vk:shader-output-viewport-index
        %vk:shader-output-layer
        %vk:subgroup-broadcast-dynamic-id)
       ,ptr
       (:struct %vk:physical-device-vulkan-1-2-features))
    (make-instance 'vk:physical-device-vulkan-1-2-features
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :sampler-mirror-clamp-to-edge %vk:sampler-mirror-clamp-to-edge
                   :draw-indirect-count %vk:draw-indirect-count
                   :storage-buffer-8-bit-access %vk:storage-buffer-8-bit-access
                   :uniform-and-storage-buffer-8-bit-access %vk:uniform-and-storage-buffer-8-bit-access
                   :storage-push-constant-8 %vk:storage-push-constant-8
                   :shader-buffer-int-64-atomics %vk:shader-buffer-int-64-atomics
                   :shader-shared-int-64-atomics %vk:shader-shared-int-64-atomics
                   :shader-float-16 %vk:shader-float-16
                   :shader-int-8 %vk:shader-int-8
                   :descriptor-indexing %vk:descriptor-indexing
                   :shader-input-attachment-array-dynamic-indexing %vk:shader-input-attachment-array-dynamic-indexing
                   :shader-uniform-texel-buffer-array-dynamic-indexing %vk:shader-uniform-texel-buffer-array-dynamic-indexing
                   :shader-storage-texel-buffer-array-dynamic-indexing %vk:shader-storage-texel-buffer-array-dynamic-indexing
                   :shader-uniform-buffer-array-non-uniform-indexing %vk:shader-uniform-buffer-array-non-uniform-indexing
                   :shader-sampled-image-array-non-uniform-indexing %vk:shader-sampled-image-array-non-uniform-indexing
                   :shader-storage-buffer-array-non-uniform-indexing %vk:shader-storage-buffer-array-non-uniform-indexing
                   :shader-storage-image-array-non-uniform-indexing %vk:shader-storage-image-array-non-uniform-indexing
                   :shader-input-attachment-array-non-uniform-indexing %vk:shader-input-attachment-array-non-uniform-indexing
                   :shader-uniform-texel-buffer-array-non-uniform-indexing %vk:shader-uniform-texel-buffer-array-non-uniform-indexing
                   :shader-storage-texel-buffer-array-non-uniform-indexing %vk:shader-storage-texel-buffer-array-non-uniform-indexing
                   :descriptor-binding-uniform-buffer-update-after-bind %vk:descriptor-binding-uniform-buffer-update-after-bind
                   :descriptor-binding-sampled-image-update-after-bind %vk:descriptor-binding-sampled-image-update-after-bind
                   :descriptor-binding-storage-image-update-after-bind %vk:descriptor-binding-storage-image-update-after-bind
                   :descriptor-binding-storage-buffer-update-after-bind %vk:descriptor-binding-storage-buffer-update-after-bind
                   :descriptor-binding-uniform-texel-buffer-update-after-bind %vk:descriptor-binding-uniform-texel-buffer-update-after-bind
                   :descriptor-binding-storage-texel-buffer-update-after-bind %vk:descriptor-binding-storage-texel-buffer-update-after-bind
                   :descriptor-binding-update-unused-while-pending %vk:descriptor-binding-update-unused-while-pending
                   :descriptor-binding-partially-bound %vk:descriptor-binding-partially-bound
                   :descriptor-binding-variable-descriptor-count %vk:descriptor-binding-variable-descriptor-count
                   :runtime-descriptor-array %vk:runtime-descriptor-array
                   :sampler-filter-minmax %vk:sampler-filter-minmax
                   :scalar-block-layout %vk:scalar-block-layout
                   :imageless-framebuffer %vk:imageless-framebuffer
                   :uniform-buffer-standard-layout %vk:uniform-buffer-standard-layout
                   :shader-subgroup-extended-types %vk:shader-subgroup-extended-types
                   :separate-depth-stencil-layouts %vk:separate-depth-stencil-layouts
                   :host-query-reset %vk:host-query-reset
                   :timeline-semaphore %vk:timeline-semaphore
                   :buffer-device-address %vk:buffer-device-address
                   :buffer-device-address-capture-replay %vk:buffer-device-address-capture-replay
                   :buffer-device-address-multi-device %vk:buffer-device-address-multi-device
                   :vulkan-memory-model %vk:vulkan-memory-model
                   :vulkan-memory-model-device-scope %vk:vulkan-memory-model-device-scope
                   :vulkan-memory-model-availability-visibility-chains %vk:vulkan-memory-model-availability-visibility-chains
                   :shader-output-viewport-index %vk:shader-output-viewport-index
                   :shader-output-layer %vk:shader-output-layer
                   :subgroup-broadcast-dynamic-id %vk:subgroup-broadcast-dynamic-id)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-vulkan-1-2-properties))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:driver-id
        %vk:driver-name
        %vk:driver-info
        %vk:conformance-version
        %vk:denorm-behavior-independence
        %vk:rounding-mode-independence
        %vk:shader-signed-zero-inf-nan-preserve-float-16
        %vk:shader-signed-zero-inf-nan-preserve-float-32
        %vk:shader-signed-zero-inf-nan-preserve-float-64
        %vk:shader-denorm-preserve-float-16
        %vk:shader-denorm-preserve-float-32
        %vk:shader-denorm-preserve-float-64
        %vk:shader-denorm-flush-to-zero-float-16
        %vk:shader-denorm-flush-to-zero-float-32
        %vk:shader-denorm-flush-to-zero-float-64
        %vk:shader-rounding-mode-rte-float-16
        %vk:shader-rounding-mode-rte-float-32
        %vk:shader-rounding-mode-rte-float-64
        %vk:shader-rounding-mode-rtz-float-16
        %vk:shader-rounding-mode-rtz-float-32
        %vk:shader-rounding-mode-rtz-float-64
        %vk:max-update-after-bind-descriptors-in-all-pools
        %vk:shader-uniform-buffer-array-non-uniform-indexing-native
        %vk:shader-sampled-image-array-non-uniform-indexing-native
        %vk:shader-storage-buffer-array-non-uniform-indexing-native
        %vk:shader-storage-image-array-non-uniform-indexing-native
        %vk:shader-input-attachment-array-non-uniform-indexing-native
        %vk:robust-buffer-access-update-after-bind
        %vk:quad-divergent-implicit-lod
        %vk:max-per-stage-descriptor-update-after-bind-samplers
        %vk:max-per-stage-descriptor-update-after-bind-uniform-buffers
        %vk:max-per-stage-descriptor-update-after-bind-storage-buffers
        %vk:max-per-stage-descriptor-update-after-bind-sampled-images
        %vk:max-per-stage-descriptor-update-after-bind-storage-images
        %vk:max-per-stage-descriptor-update-after-bind-input-attachments
        %vk:max-per-stage-update-after-bind-resources
        %vk:max-descriptor-set-update-after-bind-samplers
        %vk:max-descriptor-set-update-after-bind-uniform-buffers
        %vk:max-descriptor-set-update-after-bind-uniform-buffers-dynamic
        %vk:max-descriptor-set-update-after-bind-storage-buffers
        %vk:max-descriptor-set-update-after-bind-storage-buffers-dynamic
        %vk:max-descriptor-set-update-after-bind-sampled-images
        %vk:max-descriptor-set-update-after-bind-storage-images
        %vk:max-descriptor-set-update-after-bind-input-attachments
        %vk:supported-depth-resolve-modes
        %vk:supported-stencil-resolve-modes
        %vk:independent-resolve-none
        %vk:independent-resolve
        %vk:filter-minmax-single-component-formats
        %vk:filter-minmax-image-component-mapping
        %vk:max-timeline-semaphore-value-difference
        %vk:framebuffer-integer-color-sample-counts)
       ,ptr
       (:struct %vk:physical-device-vulkan-1-2-properties))
    (make-instance 'vk:physical-device-vulkan-1-2-properties
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :driver-id %vk:driver-id
                   :driver-name (cffi:foreign-string-to-lisp %vk:driver-name)
                   :driver-info (cffi:foreign-string-to-lisp %vk:driver-info)
                   :conformance-version %vk:conformance-version
                   :denorm-behavior-independence %vk:denorm-behavior-independence
                   :rounding-mode-independence %vk:rounding-mode-independence
                   :shader-signed-zero-inf-nan-preserve-float-16 %vk:shader-signed-zero-inf-nan-preserve-float-16
                   :shader-signed-zero-inf-nan-preserve-float-32 %vk:shader-signed-zero-inf-nan-preserve-float-32
                   :shader-signed-zero-inf-nan-preserve-float-64 %vk:shader-signed-zero-inf-nan-preserve-float-64
                   :shader-denorm-preserve-float-16 %vk:shader-denorm-preserve-float-16
                   :shader-denorm-preserve-float-32 %vk:shader-denorm-preserve-float-32
                   :shader-denorm-preserve-float-64 %vk:shader-denorm-preserve-float-64
                   :shader-denorm-flush-to-zero-float-16 %vk:shader-denorm-flush-to-zero-float-16
                   :shader-denorm-flush-to-zero-float-32 %vk:shader-denorm-flush-to-zero-float-32
                   :shader-denorm-flush-to-zero-float-64 %vk:shader-denorm-flush-to-zero-float-64
                   :shader-rounding-mode-rte-float-16 %vk:shader-rounding-mode-rte-float-16
                   :shader-rounding-mode-rte-float-32 %vk:shader-rounding-mode-rte-float-32
                   :shader-rounding-mode-rte-float-64 %vk:shader-rounding-mode-rte-float-64
                   :shader-rounding-mode-rtz-float-16 %vk:shader-rounding-mode-rtz-float-16
                   :shader-rounding-mode-rtz-float-32 %vk:shader-rounding-mode-rtz-float-32
                   :shader-rounding-mode-rtz-float-64 %vk:shader-rounding-mode-rtz-float-64
                   :max-update-after-bind-descriptors-in-all-pools %vk:max-update-after-bind-descriptors-in-all-pools
                   :shader-uniform-buffer-array-non-uniform-indexing-native %vk:shader-uniform-buffer-array-non-uniform-indexing-native
                   :shader-sampled-image-array-non-uniform-indexing-native %vk:shader-sampled-image-array-non-uniform-indexing-native
                   :shader-storage-buffer-array-non-uniform-indexing-native %vk:shader-storage-buffer-array-non-uniform-indexing-native
                   :shader-storage-image-array-non-uniform-indexing-native %vk:shader-storage-image-array-non-uniform-indexing-native
                   :shader-input-attachment-array-non-uniform-indexing-native %vk:shader-input-attachment-array-non-uniform-indexing-native
                   :robust-buffer-access-update-after-bind %vk:robust-buffer-access-update-after-bind
                   :quad-divergent-implicit-lod %vk:quad-divergent-implicit-lod
                   :max-per-stage-descriptor-update-after-bind-samplers %vk:max-per-stage-descriptor-update-after-bind-samplers
                   :max-per-stage-descriptor-update-after-bind-uniform-buffers %vk:max-per-stage-descriptor-update-after-bind-uniform-buffers
                   :max-per-stage-descriptor-update-after-bind-storage-buffers %vk:max-per-stage-descriptor-update-after-bind-storage-buffers
                   :max-per-stage-descriptor-update-after-bind-sampled-images %vk:max-per-stage-descriptor-update-after-bind-sampled-images
                   :max-per-stage-descriptor-update-after-bind-storage-images %vk:max-per-stage-descriptor-update-after-bind-storage-images
                   :max-per-stage-descriptor-update-after-bind-input-attachments %vk:max-per-stage-descriptor-update-after-bind-input-attachments
                   :max-per-stage-update-after-bind-resources %vk:max-per-stage-update-after-bind-resources
                   :max-descriptor-set-update-after-bind-samplers %vk:max-descriptor-set-update-after-bind-samplers
                   :max-descriptor-set-update-after-bind-uniform-buffers %vk:max-descriptor-set-update-after-bind-uniform-buffers
                   :max-descriptor-set-update-after-bind-uniform-buffers-dynamic %vk:max-descriptor-set-update-after-bind-uniform-buffers-dynamic
                   :max-descriptor-set-update-after-bind-storage-buffers %vk:max-descriptor-set-update-after-bind-storage-buffers
                   :max-descriptor-set-update-after-bind-storage-buffers-dynamic %vk:max-descriptor-set-update-after-bind-storage-buffers-dynamic
                   :max-descriptor-set-update-after-bind-sampled-images %vk:max-descriptor-set-update-after-bind-sampled-images
                   :max-descriptor-set-update-after-bind-storage-images %vk:max-descriptor-set-update-after-bind-storage-images
                   :max-descriptor-set-update-after-bind-input-attachments %vk:max-descriptor-set-update-after-bind-input-attachments
                   :supported-depth-resolve-modes %vk:supported-depth-resolve-modes
                   :supported-stencil-resolve-modes %vk:supported-stencil-resolve-modes
                   :independent-resolve-none %vk:independent-resolve-none
                   :independent-resolve %vk:independent-resolve
                   :filter-minmax-single-component-formats %vk:filter-minmax-single-component-formats
                   :filter-minmax-image-component-mapping %vk:filter-minmax-image-component-mapping
                   :max-timeline-semaphore-value-difference %vk:max-timeline-semaphore-value-difference
                   :framebuffer-integer-color-sample-counts %vk:framebuffer-integer-color-sample-counts)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-compiler-control-create-info-amd))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:compiler-control-flags)
       ,ptr
       (:struct %vk:pipeline-compiler-control-create-info-amd))
    (make-instance 'vk:pipeline-compiler-control-create-info-amd
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :compiler-control-flags %vk:compiler-control-flags)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-coherent-memory-features-amd))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:device-coherent-memory)
       ,ptr
       (:struct %vk:physical-device-coherent-memory-features-amd))
    (make-instance 'vk:physical-device-coherent-memory-features-amd
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :device-coherent-memory %vk:device-coherent-memory)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-tool-properties-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:name
        %vk:version
        %vk:purposes
        %vk:description
        %vk:layer)
       ,ptr
       (:struct %vk:physical-device-tool-properties-ext))
    (make-instance 'vk:physical-device-tool-properties-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :name (cffi:foreign-string-to-lisp %vk:name)
                   :version (cffi:foreign-string-to-lisp %vk:version)
                   :purposes %vk:purposes
                   :description (cffi:foreign-string-to-lisp %vk:description)
                   :layer (cffi:foreign-string-to-lisp %vk:layer))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-sampler-custom-border-color-create-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:custom-border-color
        %vk:format)
       ,ptr
       (:struct %vk:sampler-custom-border-color-create-info-ext))
    (make-instance 'vk:sampler-custom-border-color-create-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :custom-border-color nil
                   :format %vk:format)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-custom-border-color-properties-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:max-custom-border-color-samplers)
       ,ptr
       (:struct %vk:physical-device-custom-border-color-properties-ext))
    (make-instance 'vk:physical-device-custom-border-color-properties-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :max-custom-border-color-samplers %vk:max-custom-border-color-samplers)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-custom-border-color-features-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:custom-border-colors
        %vk:custom-border-color-without-format)
       ,ptr
       (:struct %vk:physical-device-custom-border-color-features-ext))
    (make-instance 'vk:physical-device-custom-border-color-features-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :custom-border-colors %vk:custom-border-colors
                   :custom-border-color-without-format %vk:custom-border-color-without-format)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-sampler-border-color-component-mapping-create-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:components
        %vk:srgb)
       ,ptr
       (:struct %vk:sampler-border-color-component-mapping-create-info-ext))
    (make-instance 'vk:sampler-border-color-component-mapping-create-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :components %vk:components
                   :srgb %vk:srgb)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-border-color-swizzle-features-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:border-color-swizzle
        %vk:border-color-swizzle-from-image)
       ,ptr
       (:struct %vk:physical-device-border-color-swizzle-features-ext))
    (make-instance 'vk:physical-device-border-color-swizzle-features-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :border-color-swizzle %vk:border-color-swizzle
                   :border-color-swizzle-from-image %vk:border-color-swizzle-from-image)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-acceleration-structure-geometry-triangles-data-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:vertex-format
        %vk:vertex-data
        %vk:vertex-stride
        %vk:max-vertex
        %vk:index-type
        %vk:index-data
        %vk:transform-data)
       ,ptr
       (:struct %vk:acceleration-structure-geometry-triangles-data-khr))
    (make-instance 'vk:acceleration-structure-geometry-triangles-data-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :vertex-format %vk:vertex-format
                   :vertex-data nil
                   :vertex-stride %vk:vertex-stride
                   :max-vertex %vk:max-vertex
                   :index-type %vk:index-type
                   :index-data nil
                   :transform-data nil)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-acceleration-structure-geometry-aabbs-data-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:data
        %vk:stride)
       ,ptr
       (:struct %vk:acceleration-structure-geometry-aabbs-data-khr))
    (make-instance 'vk:acceleration-structure-geometry-aabbs-data-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :data nil
                   :stride %vk:stride)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-acceleration-structure-geometry-instances-data-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:array-of-pointers
        %vk:data)
       ,ptr
       (:struct %vk:acceleration-structure-geometry-instances-data-khr))
    (make-instance 'vk:acceleration-structure-geometry-instances-data-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :array-of-pointers %vk:array-of-pointers
                   :data nil)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-acceleration-structure-geometry-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:geometry-type
        %vk:geometry
        %vk:flags)
       ,ptr
       (:struct %vk:acceleration-structure-geometry-khr))
    (make-instance 'vk:acceleration-structure-geometry-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :geometry-type %vk:geometry-type
                   :geometry nil
                   :flags %vk:flags)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-acceleration-structure-build-geometry-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:type
        %vk:flags
        %vk:mode
        %vk:src-acceleration-structure
        %vk:dst-acceleration-structure
        %vk:geometry-count
        %vk:p-geometries
        %vk:pp-geometries
        %vk:scratch-data)
       ,ptr
       (:struct %vk:acceleration-structure-build-geometry-info-khr))
    (make-instance 'vk:acceleration-structure-build-geometry-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :type %vk:type
                   :flags %vk:flags
                   :mode %vk:mode
                   :src-acceleration-structure (vk:make-acceleration-structure-khr-wrapper %vk:src-acceleration-structure)
                   :dst-acceleration-structure (vk:make-acceleration-structure-khr-wrapper %vk:dst-acceleration-structure)
                   :geometries (loop for i from 0 below %vk:geometry-count collect (cffi:mem-aref %vk:p-geometries '(:struct %vk:acceleration-structure-geometry-khr) i))
                   :p-geometries (loop for i from 0 below %vk:geometry-count collect (cffi:mem-aref %vk:pp-geometries '(:struct %vk:acceleration-structure-geometry-khr) i))
                   :scratch-data nil)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-acceleration-structure-build-range-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:primitive-count
        %vk:primitive-offset
        %vk:first-vertex
        %vk:transform-offset)
       ,ptr
       (:struct %vk:acceleration-structure-build-range-info-khr))
    (make-instance 'vk:acceleration-structure-build-range-info-khr
                   :primitive-count %vk:primitive-count
                   :primitive-offset %vk:primitive-offset
                   :first-vertex %vk:first-vertex
                   :transform-offset %vk:transform-offset)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-acceleration-structure-create-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:create-flags
        %vk:buffer
        %vk:offset
        %vk:size
        %vk:type
        %vk:device-address)
       ,ptr
       (:struct %vk:acceleration-structure-create-info-khr))
    (make-instance 'vk:acceleration-structure-create-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :create-flags %vk:create-flags
                   :buffer (vk:make-buffer-wrapper %vk:buffer)
                   :offset %vk:offset
                   :size %vk:size
                   :type %vk:type
                   :device-address %vk:device-address)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-aabb-positions-khr))
  `(cffi:with-foreign-slots
      ((%vk:min-x
        %vk:min-y
        %vk:min-z
        %vk:max-x
        %vk:max-y
        %vk:max-z)
       ,ptr
       (:struct %vk:aabb-positions-khr))
    (make-instance 'vk:aabb-positions-khr
                   :min-x %vk:min-x
                   :min-y %vk:min-y
                   :min-z %vk:min-z
                   :max-x %vk:max-x
                   :max-y %vk:max-y
                   :max-z %vk:max-z)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-transform-matrix-khr))
  `(cffi:with-foreign-slots
      ((%vk:matrix)
       ,ptr
       (:struct %vk:transform-matrix-khr))
    (make-instance 'vk:transform-matrix-khr
                   :matrix (cl:coerce (loop for i from 0 below 12 collect (cffi:mem-aref %vk:matrix :float i)) 'vector))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-acceleration-structure-instance-khr))
  `(cffi:with-foreign-slots
      ((%vk:transform
        %vk:instance-custom-index-and-mask
        %vk:instance-shader-binding-table-record-offset-and-flags
        %vk:acceleration-structure-reference)
       ,ptr
       (:struct %vk:acceleration-structure-instance-khr))
    (make-instance 'vk:acceleration-structure-instance-khr
                   :transform %vk:transform
                   :instance-custom-index (ldb (byte 24 0) %vk:instance-custom-index-and-mask)
                   :mask (ldb (byte 8 24) %vk:instance-custom-index-and-mask)
                   :instance-shader-binding-table-record-offset (ldb (byte 24 0) %vk:instance-shader-binding-table-record-offset-and-flags)
                   :flags (cffi:foreign-bitfield-symbols '%vk:geometry-instance-flags-khr (ldb (byte 8 24) %vk:instance-shader-binding-table-record-offset-and-flags))
                   :acceleration-structure-reference %vk:acceleration-structure-reference)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-acceleration-structure-device-address-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:acceleration-structure)
       ,ptr
       (:struct %vk:acceleration-structure-device-address-info-khr))
    (make-instance 'vk:acceleration-structure-device-address-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :acceleration-structure (vk:make-acceleration-structure-khr-wrapper %vk:acceleration-structure))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-acceleration-structure-version-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:p-version-data)
       ,ptr
       (:struct %vk:acceleration-structure-version-info-khr))
    (make-instance 'vk:acceleration-structure-version-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :version-data %vk:p-version-data)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-copy-acceleration-structure-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:src
        %vk:dst
        %vk:mode)
       ,ptr
       (:struct %vk:copy-acceleration-structure-info-khr))
    (make-instance 'vk:copy-acceleration-structure-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :src (vk:make-acceleration-structure-khr-wrapper %vk:src)
                   :dst (vk:make-acceleration-structure-khr-wrapper %vk:dst)
                   :mode %vk:mode)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-copy-acceleration-structure-to-memory-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:src
        %vk:dst
        %vk:mode)
       ,ptr
       (:struct %vk:copy-acceleration-structure-to-memory-info-khr))
    (make-instance 'vk:copy-acceleration-structure-to-memory-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :src (vk:make-acceleration-structure-khr-wrapper %vk:src)
                   :dst nil
                   :mode %vk:mode)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-copy-memory-to-acceleration-structure-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:src
        %vk:dst
        %vk:mode)
       ,ptr
       (:struct %vk:copy-memory-to-acceleration-structure-info-khr))
    (make-instance 'vk:copy-memory-to-acceleration-structure-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :src nil
                   :dst (vk:make-acceleration-structure-khr-wrapper %vk:dst)
                   :mode %vk:mode)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-ray-tracing-pipeline-interface-create-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:max-pipeline-ray-payload-size
        %vk:max-pipeline-ray-hit-attribute-size)
       ,ptr
       (:struct %vk:ray-tracing-pipeline-interface-create-info-khr))
    (make-instance 'vk:ray-tracing-pipeline-interface-create-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :max-pipeline-ray-payload-size %vk:max-pipeline-ray-payload-size
                   :max-pipeline-ray-hit-attribute-size %vk:max-pipeline-ray-hit-attribute-size)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-library-create-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:library-count
        %vk:p-libraries)
       ,ptr
       (:struct %vk:pipeline-library-create-info-khr))
    (make-instance 'vk:pipeline-library-create-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :libraries (loop for i from 0 below %vk:library-count collect (vk:make-pipeline-wrapper (cffi:mem-aref %vk:p-libraries '%vk:pipeline i))))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-extended-dynamic-state-features-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:extended-dynamic-state)
       ,ptr
       (:struct %vk:physical-device-extended-dynamic-state-features-ext))
    (make-instance 'vk:physical-device-extended-dynamic-state-features-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :extended-dynamic-state %vk:extended-dynamic-state)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-extended-dynamic-state-2-features-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:extended-dynamic-state-2
        %vk:extended-dynamic-state-2-logic-op
        %vk:extended-dynamic-state-2-patch-control-points)
       ,ptr
       (:struct %vk:physical-device-extended-dynamic-state-2-features-ext))
    (make-instance 'vk:physical-device-extended-dynamic-state-2-features-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :extended-dynamic-state-2 %vk:extended-dynamic-state-2
                   :extended-dynamic-state-2-logic-op %vk:extended-dynamic-state-2-logic-op
                   :extended-dynamic-state-2-patch-control-points %vk:extended-dynamic-state-2-patch-control-points)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-render-pass-transform-begin-info-qcom))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:transform)
       ,ptr
       (:struct %vk:render-pass-transform-begin-info-qcom))
    (make-instance 'vk:render-pass-transform-begin-info-qcom
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :transform %vk:transform)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-copy-command-transform-info-qcom))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:transform)
       ,ptr
       (:struct %vk:copy-command-transform-info-qcom))
    (make-instance 'vk:copy-command-transform-info-qcom
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :transform %vk:transform)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-command-buffer-inheritance-render-pass-transform-info-qcom))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:transform
        %vk:render-area)
       ,ptr
       (:struct %vk:command-buffer-inheritance-render-pass-transform-info-qcom))
    (make-instance 'vk:command-buffer-inheritance-render-pass-transform-info-qcom
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :transform %vk:transform
                   :render-area %vk:render-area)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-diagnostics-config-features-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:diagnostics-config)
       ,ptr
       (:struct %vk:physical-device-diagnostics-config-features-nv))
    (make-instance 'vk:physical-device-diagnostics-config-features-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :diagnostics-config %vk:diagnostics-config)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-device-diagnostics-config-create-info-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags)
       ,ptr
       (:struct %vk:device-diagnostics-config-create-info-nv))
    (make-instance 'vk:device-diagnostics-config-create-info-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-zero-initialize-workgroup-memory-features-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:shader-zero-initialize-workgroup-memory)
       ,ptr
       (:struct %vk:physical-device-zero-initialize-workgroup-memory-features-khr))
    (make-instance 'vk:physical-device-zero-initialize-workgroup-memory-features-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :shader-zero-initialize-workgroup-memory %vk:shader-zero-initialize-workgroup-memory)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-shader-subgroup-uniform-control-flow-features-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:shader-subgroup-uniform-control-flow)
       ,ptr
       (:struct %vk:physical-device-shader-subgroup-uniform-control-flow-features-khr))
    (make-instance 'vk:physical-device-shader-subgroup-uniform-control-flow-features-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :shader-subgroup-uniform-control-flow %vk:shader-subgroup-uniform-control-flow)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-robustness-2-features-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:robust-buffer-access-2
        %vk:robust-image-access-2
        %vk:null-descriptor)
       ,ptr
       (:struct %vk:physical-device-robustness-2-features-ext))
    (make-instance 'vk:physical-device-robustness-2-features-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :robust-buffer-access-2 %vk:robust-buffer-access-2
                   :robust-image-access-2 %vk:robust-image-access-2
                   :null-descriptor %vk:null-descriptor)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-robustness-2-properties-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:robust-storage-buffer-access-size-alignment
        %vk:robust-uniform-buffer-access-size-alignment)
       ,ptr
       (:struct %vk:physical-device-robustness-2-properties-ext))
    (make-instance 'vk:physical-device-robustness-2-properties-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :robust-storage-buffer-access-size-alignment %vk:robust-storage-buffer-access-size-alignment
                   :robust-uniform-buffer-access-size-alignment %vk:robust-uniform-buffer-access-size-alignment)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-image-robustness-features-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:robust-image-access)
       ,ptr
       (:struct %vk:physical-device-image-robustness-features-ext))
    (make-instance 'vk:physical-device-image-robustness-features-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :robust-image-access %vk:robust-image-access)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-workgroup-memory-explicit-layout-features-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:workgroup-memory-explicit-layout
        %vk:workgroup-memory-explicit-layout-scalar-block-layout
        %vk:workgroup-memory-explicit-layout-8-bit-access
        %vk:workgroup-memory-explicit-layout-16-bit-access)
       ,ptr
       (:struct %vk:physical-device-workgroup-memory-explicit-layout-features-khr))
    (make-instance 'vk:physical-device-workgroup-memory-explicit-layout-features-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :workgroup-memory-explicit-layout %vk:workgroup-memory-explicit-layout
                   :workgroup-memory-explicit-layout-scalar-block-layout %vk:workgroup-memory-explicit-layout-scalar-block-layout
                   :workgroup-memory-explicit-layout-8-bit-access %vk:workgroup-memory-explicit-layout-8-bit-access
                   :workgroup-memory-explicit-layout-16-bit-access %vk:workgroup-memory-explicit-layout-16-bit-access)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-portability-subset-features-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:constant-alpha-color-blend-factors
        %vk:events
        %vk:image-view-format-reinterpretation
        %vk:image-view-format-swizzle
        %vk:image-view-2d-on-3d-image
        %vk:multisample-array-image
        %vk:mutable-comparison-samplers
        %vk:point-polygons
        %vk:sampler-mip-lod-bias
        %vk:separate-stencil-mask-ref
        %vk:shader-sample-rate-interpolation-functions
        %vk:tessellation-isolines
        %vk:tessellation-point-mode
        %vk:triangle-fans
        %vk:vertex-attribute-access-beyond-stride)
       ,ptr
       (:struct %vk:physical-device-portability-subset-features-khr))
    (make-instance 'vk:physical-device-portability-subset-features-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :constant-alpha-color-blend-factors %vk:constant-alpha-color-blend-factors
                   :events %vk:events
                   :image-view-format-reinterpretation %vk:image-view-format-reinterpretation
                   :image-view-format-swizzle %vk:image-view-format-swizzle
                   :image-view-2d-on-3d-image %vk:image-view-2d-on-3d-image
                   :multisample-array-image %vk:multisample-array-image
                   :mutable-comparison-samplers %vk:mutable-comparison-samplers
                   :point-polygons %vk:point-polygons
                   :sampler-mip-lod-bias %vk:sampler-mip-lod-bias
                   :separate-stencil-mask-ref %vk:separate-stencil-mask-ref
                   :shader-sample-rate-interpolation-functions %vk:shader-sample-rate-interpolation-functions
                   :tessellation-isolines %vk:tessellation-isolines
                   :tessellation-point-mode %vk:tessellation-point-mode
                   :triangle-fans %vk:triangle-fans
                   :vertex-attribute-access-beyond-stride %vk:vertex-attribute-access-beyond-stride)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-portability-subset-properties-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:min-vertex-input-binding-stride-alignment)
       ,ptr
       (:struct %vk:physical-device-portability-subset-properties-khr))
    (make-instance 'vk:physical-device-portability-subset-properties-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :min-vertex-input-binding-stride-alignment %vk:min-vertex-input-binding-stride-alignment)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-4444-formats-features-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:format-a4r4g4b4
        %vk:format-a4b4g4r4)
       ,ptr
       (:struct %vk:physical-device-4444-formats-features-ext))
    (make-instance 'vk:physical-device-4444-formats-features-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :format-a4r4g4b4 %vk:format-a4r4g4b4
                   :format-a4b4g4r4 %vk:format-a4b4g4r4)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-subpass-shading-features-huawei))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:subpass-shading)
       ,ptr
       (:struct %vk:physical-device-subpass-shading-features-huawei))
    (make-instance 'vk:physical-device-subpass-shading-features-huawei
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :subpass-shading %vk:subpass-shading)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-buffer-copy-2-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:src-offset
        %vk:dst-offset
        %vk:size)
       ,ptr
       (:struct %vk:buffer-copy-2-khr))
    (make-instance 'vk:buffer-copy-2-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :src-offset %vk:src-offset
                   :dst-offset %vk:dst-offset
                   :size %vk:size)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-image-copy-2-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:src-subresource
        %vk:src-offset
        %vk:dst-subresource
        %vk:dst-offset
        %vk:extent)
       ,ptr
       (:struct %vk:image-copy-2-khr))
    (make-instance 'vk:image-copy-2-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :src-subresource %vk:src-subresource
                   :src-offset %vk:src-offset
                   :dst-subresource %vk:dst-subresource
                   :dst-offset %vk:dst-offset
                   :extent %vk:extent)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-image-blit-2-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:src-subresource
        %vk:src-offsets
        %vk:dst-subresource
        %vk:dst-offsets)
       ,ptr
       (:struct %vk:image-blit-2-khr))
    (make-instance 'vk:image-blit-2-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :src-subresource %vk:src-subresource
                   :src-offsets (loop for i from 0 below 2 collect (cffi:mem-aref (cffi:foreign-slot-pointer ,ptr '(:struct %vk:image-blit-2-khr) '%vk:src-offsets) '(:struct %vk:offset-3d) i))
                   :dst-subresource %vk:dst-subresource
                   :dst-offsets (loop for i from 0 below 2 collect (cffi:mem-aref (cffi:foreign-slot-pointer ,ptr '(:struct %vk:image-blit-2-khr) '%vk:dst-offsets) '(:struct %vk:offset-3d) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-buffer-image-copy-2-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:buffer-offset
        %vk:buffer-row-length
        %vk:buffer-image-height
        %vk:image-subresource
        %vk:image-offset
        %vk:image-extent)
       ,ptr
       (:struct %vk:buffer-image-copy-2-khr))
    (make-instance 'vk:buffer-image-copy-2-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :buffer-offset %vk:buffer-offset
                   :buffer-row-length %vk:buffer-row-length
                   :buffer-image-height %vk:buffer-image-height
                   :image-subresource %vk:image-subresource
                   :image-offset %vk:image-offset
                   :image-extent %vk:image-extent)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-image-resolve-2-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:src-subresource
        %vk:src-offset
        %vk:dst-subresource
        %vk:dst-offset
        %vk:extent)
       ,ptr
       (:struct %vk:image-resolve-2-khr))
    (make-instance 'vk:image-resolve-2-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :src-subresource %vk:src-subresource
                   :src-offset %vk:src-offset
                   :dst-subresource %vk:dst-subresource
                   :dst-offset %vk:dst-offset
                   :extent %vk:extent)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-copy-buffer-info-2-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:src-buffer
        %vk:dst-buffer
        %vk:region-count
        %vk:p-regions)
       ,ptr
       (:struct %vk:copy-buffer-info-2-khr))
    (make-instance 'vk:copy-buffer-info-2-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :src-buffer (vk:make-buffer-wrapper %vk:src-buffer)
                   :dst-buffer (vk:make-buffer-wrapper %vk:dst-buffer)
                   :regions (loop for i from 0 below %vk:region-count collect (cffi:mem-aref %vk:p-regions '(:struct %vk:buffer-copy-2-khr) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-copy-image-info-2-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:src-image
        %vk:src-image-layout
        %vk:dst-image
        %vk:dst-image-layout
        %vk:region-count
        %vk:p-regions)
       ,ptr
       (:struct %vk:copy-image-info-2-khr))
    (make-instance 'vk:copy-image-info-2-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :src-image (vk:make-image-wrapper %vk:src-image)
                   :src-image-layout %vk:src-image-layout
                   :dst-image (vk:make-image-wrapper %vk:dst-image)
                   :dst-image-layout %vk:dst-image-layout
                   :regions (loop for i from 0 below %vk:region-count collect (cffi:mem-aref %vk:p-regions '(:struct %vk:image-copy-2-khr) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-blit-image-info-2-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:src-image
        %vk:src-image-layout
        %vk:dst-image
        %vk:dst-image-layout
        %vk:region-count
        %vk:p-regions
        %vk:filter)
       ,ptr
       (:struct %vk:blit-image-info-2-khr))
    (make-instance 'vk:blit-image-info-2-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :src-image (vk:make-image-wrapper %vk:src-image)
                   :src-image-layout %vk:src-image-layout
                   :dst-image (vk:make-image-wrapper %vk:dst-image)
                   :dst-image-layout %vk:dst-image-layout
                   :regions (loop for i from 0 below %vk:region-count collect (cffi:mem-aref %vk:p-regions '(:struct %vk:image-blit-2-khr) i))
                   :filter %vk:filter)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-copy-buffer-to-image-info-2-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:src-buffer
        %vk:dst-image
        %vk:dst-image-layout
        %vk:region-count
        %vk:p-regions)
       ,ptr
       (:struct %vk:copy-buffer-to-image-info-2-khr))
    (make-instance 'vk:copy-buffer-to-image-info-2-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :src-buffer (vk:make-buffer-wrapper %vk:src-buffer)
                   :dst-image (vk:make-image-wrapper %vk:dst-image)
                   :dst-image-layout %vk:dst-image-layout
                   :regions (loop for i from 0 below %vk:region-count collect (cffi:mem-aref %vk:p-regions '(:struct %vk:buffer-image-copy-2-khr) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-copy-image-to-buffer-info-2-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:src-image
        %vk:src-image-layout
        %vk:dst-buffer
        %vk:region-count
        %vk:p-regions)
       ,ptr
       (:struct %vk:copy-image-to-buffer-info-2-khr))
    (make-instance 'vk:copy-image-to-buffer-info-2-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :src-image (vk:make-image-wrapper %vk:src-image)
                   :src-image-layout %vk:src-image-layout
                   :dst-buffer (vk:make-buffer-wrapper %vk:dst-buffer)
                   :regions (loop for i from 0 below %vk:region-count collect (cffi:mem-aref %vk:p-regions '(:struct %vk:buffer-image-copy-2-khr) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-resolve-image-info-2-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:src-image
        %vk:src-image-layout
        %vk:dst-image
        %vk:dst-image-layout
        %vk:region-count
        %vk:p-regions)
       ,ptr
       (:struct %vk:resolve-image-info-2-khr))
    (make-instance 'vk:resolve-image-info-2-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :src-image (vk:make-image-wrapper %vk:src-image)
                   :src-image-layout %vk:src-image-layout
                   :dst-image (vk:make-image-wrapper %vk:dst-image)
                   :dst-image-layout %vk:dst-image-layout
                   :regions (loop for i from 0 below %vk:region-count collect (cffi:mem-aref %vk:p-regions '(:struct %vk:image-resolve-2-khr) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-shader-image-atomic-int-64-features-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:shader-image-int-64-atomics
        %vk:sparse-image-int-64-atomics)
       ,ptr
       (:struct %vk:physical-device-shader-image-atomic-int-64-features-ext))
    (make-instance 'vk:physical-device-shader-image-atomic-int-64-features-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :shader-image-int-64-atomics %vk:shader-image-int-64-atomics
                   :sparse-image-int-64-atomics %vk:sparse-image-int-64-atomics)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-fragment-shading-rate-attachment-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:p-fragment-shading-rate-attachment
        %vk:shading-rate-attachment-texel-size)
       ,ptr
       (:struct %vk:fragment-shading-rate-attachment-info-khr))
    (make-instance 'vk:fragment-shading-rate-attachment-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :fragment-shading-rate-attachment %vk:p-fragment-shading-rate-attachment
                   :shading-rate-attachment-texel-size %vk:shading-rate-attachment-texel-size)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-fragment-shading-rate-state-create-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:fragment-size
        %vk:combiner-ops)
       ,ptr
       (:struct %vk:pipeline-fragment-shading-rate-state-create-info-khr))
    (make-instance 'vk:pipeline-fragment-shading-rate-state-create-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :fragment-size %vk:fragment-size
                   :combiner-ops (loop for i from 0 below 2 collect (cffi:mem-aref %vk:combiner-ops '%vk:fragment-shading-rate-combiner-op-khr i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-fragment-shading-rate-features-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:pipeline-fragment-shading-rate
        %vk:primitive-fragment-shading-rate
        %vk:attachment-fragment-shading-rate)
       ,ptr
       (:struct %vk:physical-device-fragment-shading-rate-features-khr))
    (make-instance 'vk:physical-device-fragment-shading-rate-features-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :pipeline-fragment-shading-rate %vk:pipeline-fragment-shading-rate
                   :primitive-fragment-shading-rate %vk:primitive-fragment-shading-rate
                   :attachment-fragment-shading-rate %vk:attachment-fragment-shading-rate)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-fragment-shading-rate-properties-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:min-fragment-shading-rate-attachment-texel-size
        %vk:max-fragment-shading-rate-attachment-texel-size
        %vk:max-fragment-shading-rate-attachment-texel-size-aspect-ratio
        %vk:primitive-fragment-shading-rate-with-multiple-viewports
        %vk:layered-shading-rate-attachments
        %vk:fragment-shading-rate-non-trivial-combiner-ops
        %vk:max-fragment-size
        %vk:max-fragment-size-aspect-ratio
        %vk:max-fragment-shading-rate-coverage-samples
        %vk:max-fragment-shading-rate-rasterization-samples
        %vk:fragment-shading-rate-with-shader-depth-stencil-writes
        %vk:fragment-shading-rate-with-sample-mask
        %vk:fragment-shading-rate-with-shader-sample-mask
        %vk:fragment-shading-rate-with-conservative-rasterization
        %vk:fragment-shading-rate-with-fragment-shader-interlock
        %vk:fragment-shading-rate-with-custom-sample-locations
        %vk:fragment-shading-rate-strict-multiply-combiner)
       ,ptr
       (:struct %vk:physical-device-fragment-shading-rate-properties-khr))
    (make-instance 'vk:physical-device-fragment-shading-rate-properties-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :min-fragment-shading-rate-attachment-texel-size %vk:min-fragment-shading-rate-attachment-texel-size
                   :max-fragment-shading-rate-attachment-texel-size %vk:max-fragment-shading-rate-attachment-texel-size
                   :max-fragment-shading-rate-attachment-texel-size-aspect-ratio %vk:max-fragment-shading-rate-attachment-texel-size-aspect-ratio
                   :primitive-fragment-shading-rate-with-multiple-viewports %vk:primitive-fragment-shading-rate-with-multiple-viewports
                   :layered-shading-rate-attachments %vk:layered-shading-rate-attachments
                   :fragment-shading-rate-non-trivial-combiner-ops %vk:fragment-shading-rate-non-trivial-combiner-ops
                   :max-fragment-size %vk:max-fragment-size
                   :max-fragment-size-aspect-ratio %vk:max-fragment-size-aspect-ratio
                   :max-fragment-shading-rate-coverage-samples %vk:max-fragment-shading-rate-coverage-samples
                   :max-fragment-shading-rate-rasterization-samples %vk:max-fragment-shading-rate-rasterization-samples
                   :fragment-shading-rate-with-shader-depth-stencil-writes %vk:fragment-shading-rate-with-shader-depth-stencil-writes
                   :fragment-shading-rate-with-sample-mask %vk:fragment-shading-rate-with-sample-mask
                   :fragment-shading-rate-with-shader-sample-mask %vk:fragment-shading-rate-with-shader-sample-mask
                   :fragment-shading-rate-with-conservative-rasterization %vk:fragment-shading-rate-with-conservative-rasterization
                   :fragment-shading-rate-with-fragment-shader-interlock %vk:fragment-shading-rate-with-fragment-shader-interlock
                   :fragment-shading-rate-with-custom-sample-locations %vk:fragment-shading-rate-with-custom-sample-locations
                   :fragment-shading-rate-strict-multiply-combiner %vk:fragment-shading-rate-strict-multiply-combiner)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-fragment-shading-rate-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:sample-counts
        %vk:fragment-size)
       ,ptr
       (:struct %vk:physical-device-fragment-shading-rate-khr))
    (make-instance 'vk:physical-device-fragment-shading-rate-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :sample-counts %vk:sample-counts
                   :fragment-size %vk:fragment-size)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-shader-terminate-invocation-features-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:shader-terminate-invocation)
       ,ptr
       (:struct %vk:physical-device-shader-terminate-invocation-features-khr))
    (make-instance 'vk:physical-device-shader-terminate-invocation-features-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :shader-terminate-invocation %vk:shader-terminate-invocation)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-fragment-shading-rate-enums-features-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:fragment-shading-rate-enums
        %vk:supersample-fragment-shading-rates
        %vk:no-invocation-fragment-shading-rates)
       ,ptr
       (:struct %vk:physical-device-fragment-shading-rate-enums-features-nv))
    (make-instance 'vk:physical-device-fragment-shading-rate-enums-features-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :fragment-shading-rate-enums %vk:fragment-shading-rate-enums
                   :supersample-fragment-shading-rates %vk:supersample-fragment-shading-rates
                   :no-invocation-fragment-shading-rates %vk:no-invocation-fragment-shading-rates)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-fragment-shading-rate-enums-properties-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:max-fragment-shading-rate-invocation-count)
       ,ptr
       (:struct %vk:physical-device-fragment-shading-rate-enums-properties-nv))
    (make-instance 'vk:physical-device-fragment-shading-rate-enums-properties-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :max-fragment-shading-rate-invocation-count %vk:max-fragment-shading-rate-invocation-count)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-fragment-shading-rate-enum-state-create-info-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:shading-rate-type
        %vk:shading-rate
        %vk:combiner-ops)
       ,ptr
       (:struct %vk:pipeline-fragment-shading-rate-enum-state-create-info-nv))
    (make-instance 'vk:pipeline-fragment-shading-rate-enum-state-create-info-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :shading-rate-type %vk:shading-rate-type
                   :shading-rate %vk:shading-rate
                   :combiner-ops (loop for i from 0 below 2 collect (cffi:mem-aref %vk:combiner-ops '%vk:fragment-shading-rate-combiner-op-khr i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-acceleration-structure-build-sizes-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:acceleration-structure-size
        %vk:update-scratch-size
        %vk:build-scratch-size)
       ,ptr
       (:struct %vk:acceleration-structure-build-sizes-info-khr))
    (make-instance 'vk:acceleration-structure-build-sizes-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :acceleration-structure-size %vk:acceleration-structure-size
                   :update-scratch-size %vk:update-scratch-size
                   :build-scratch-size %vk:build-scratch-size)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-mutable-descriptor-type-features-valve))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:mutable-descriptor-type)
       ,ptr
       (:struct %vk:physical-device-mutable-descriptor-type-features-valve))
    (make-instance 'vk:physical-device-mutable-descriptor-type-features-valve
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :mutable-descriptor-type %vk:mutable-descriptor-type)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-mutable-descriptor-type-list-valve))
  `(cffi:with-foreign-slots
      ((%vk:descriptor-type-count
        %vk:p-descriptor-types)
       ,ptr
       (:struct %vk:mutable-descriptor-type-list-valve))
    (make-instance 'vk:mutable-descriptor-type-list-valve
                   :descriptor-types (loop for i from 0 below %vk:descriptor-type-count collect (cffi:mem-aref %vk:p-descriptor-types '%vk:descriptor-type i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-mutable-descriptor-type-create-info-valve))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:mutable-descriptor-type-list-count
        %vk:p-mutable-descriptor-type-lists)
       ,ptr
       (:struct %vk:mutable-descriptor-type-create-info-valve))
    (make-instance 'vk:mutable-descriptor-type-create-info-valve
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :mutable-descriptor-type-lists (loop for i from 0 below %vk:mutable-descriptor-type-list-count collect (cffi:mem-aref %vk:p-mutable-descriptor-type-lists '(:struct %vk:mutable-descriptor-type-list-valve) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-vertex-input-dynamic-state-features-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:vertex-input-dynamic-state)
       ,ptr
       (:struct %vk:physical-device-vertex-input-dynamic-state-features-ext))
    (make-instance 'vk:physical-device-vertex-input-dynamic-state-features-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :vertex-input-dynamic-state %vk:vertex-input-dynamic-state)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-external-memory-r-d-m-a-features-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:external-memory-r-d-m-a)
       ,ptr
       (:struct %vk:physical-device-external-memory-r-d-m-a-features-nv))
    (make-instance 'vk:physical-device-external-memory-r-d-m-a-features-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :external-memory-r-d-m-a %vk:external-memory-r-d-m-a)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-vertex-input-binding-description-2-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:binding
        %vk:stride
        %vk:input-rate
        %vk:divisor)
       ,ptr
       (:struct %vk:vertex-input-binding-description-2-ext))
    (make-instance 'vk:vertex-input-binding-description-2-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :binding %vk:binding
                   :stride %vk:stride
                   :input-rate %vk:input-rate
                   :divisor %vk:divisor)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-vertex-input-attribute-description-2-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:location
        %vk:binding
        %vk:format
        %vk:offset)
       ,ptr
       (:struct %vk:vertex-input-attribute-description-2-ext))
    (make-instance 'vk:vertex-input-attribute-description-2-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :location %vk:location
                   :binding %vk:binding
                   :format %vk:format
                   :offset %vk:offset)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-color-write-enable-features-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:color-write-enable)
       ,ptr
       (:struct %vk:physical-device-color-write-enable-features-ext))
    (make-instance 'vk:physical-device-color-write-enable-features-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :color-write-enable %vk:color-write-enable)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-color-write-create-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:attachment-count
        %vk:p-color-write-enables)
       ,ptr
       (:struct %vk:pipeline-color-write-create-info-ext))
    (make-instance 'vk:pipeline-color-write-create-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :color-write-enables (loop for i from 0 below %vk:attachment-count collect (cffi:mem-aref %vk:p-color-write-enables '%vk:bool32 i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-memory-barrier-2-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:src-stage-mask
        %vk:src-access-mask
        %vk:dst-stage-mask
        %vk:dst-access-mask)
       ,ptr
       (:struct %vk:memory-barrier-2-khr))
    (make-instance 'vk:memory-barrier-2-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :src-stage-mask %vk:src-stage-mask
                   :src-access-mask %vk:src-access-mask
                   :dst-stage-mask %vk:dst-stage-mask
                   :dst-access-mask %vk:dst-access-mask)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-image-memory-barrier-2-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:src-stage-mask
        %vk:src-access-mask
        %vk:dst-stage-mask
        %vk:dst-access-mask
        %vk:old-layout
        %vk:new-layout
        %vk:src-queue-family-index
        %vk:dst-queue-family-index
        %vk:image
        %vk:subresource-range)
       ,ptr
       (:struct %vk:image-memory-barrier-2-khr))
    (make-instance 'vk:image-memory-barrier-2-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :src-stage-mask %vk:src-stage-mask
                   :src-access-mask %vk:src-access-mask
                   :dst-stage-mask %vk:dst-stage-mask
                   :dst-access-mask %vk:dst-access-mask
                   :old-layout %vk:old-layout
                   :new-layout %vk:new-layout
                   :src-queue-family-index %vk:src-queue-family-index
                   :dst-queue-family-index %vk:dst-queue-family-index
                   :image (vk:make-image-wrapper %vk:image)
                   :subresource-range %vk:subresource-range)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-buffer-memory-barrier-2-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:src-stage-mask
        %vk:src-access-mask
        %vk:dst-stage-mask
        %vk:dst-access-mask
        %vk:src-queue-family-index
        %vk:dst-queue-family-index
        %vk:buffer
        %vk:offset
        %vk:size)
       ,ptr
       (:struct %vk:buffer-memory-barrier-2-khr))
    (make-instance 'vk:buffer-memory-barrier-2-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :src-stage-mask %vk:src-stage-mask
                   :src-access-mask %vk:src-access-mask
                   :dst-stage-mask %vk:dst-stage-mask
                   :dst-access-mask %vk:dst-access-mask
                   :src-queue-family-index %vk:src-queue-family-index
                   :dst-queue-family-index %vk:dst-queue-family-index
                   :buffer (vk:make-buffer-wrapper %vk:buffer)
                   :offset %vk:offset
                   :size %vk:size)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-dependency-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:dependency-flags
        %vk:memory-barrier-count
        %vk:p-memory-barriers
        %vk:buffer-memory-barrier-count
        %vk:p-buffer-memory-barriers
        %vk:image-memory-barrier-count
        %vk:p-image-memory-barriers)
       ,ptr
       (:struct %vk:dependency-info-khr))
    (make-instance 'vk:dependency-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :dependency-flags %vk:dependency-flags
                   :memory-barriers (loop for i from 0 below %vk:memory-barrier-count collect (cffi:mem-aref %vk:p-memory-barriers '(:struct %vk:memory-barrier-2-khr) i))
                   :buffer-memory-barriers (loop for i from 0 below %vk:buffer-memory-barrier-count collect (cffi:mem-aref %vk:p-buffer-memory-barriers '(:struct %vk:buffer-memory-barrier-2-khr) i))
                   :image-memory-barriers (loop for i from 0 below %vk:image-memory-barrier-count collect (cffi:mem-aref %vk:p-image-memory-barriers '(:struct %vk:image-memory-barrier-2-khr) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-semaphore-submit-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:semaphore
        %vk:value
        %vk:stage-mask
        %vk:device-index)
       ,ptr
       (:struct %vk:semaphore-submit-info-khr))
    (make-instance 'vk:semaphore-submit-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :semaphore (vk:make-semaphore-wrapper %vk:semaphore)
                   :value %vk:value
                   :stage-mask %vk:stage-mask
                   :device-index %vk:device-index)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-command-buffer-submit-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:command-buffer
        %vk:device-mask)
       ,ptr
       (:struct %vk:command-buffer-submit-info-khr))
    (make-instance 'vk:command-buffer-submit-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :command-buffer (vk:make-command-buffer-wrapper %vk:command-buffer)
                   :device-mask %vk:device-mask)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-submit-info-2-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:wait-semaphore-info-count
        %vk:p-wait-semaphore-infos
        %vk:command-buffer-info-count
        %vk:p-command-buffer-infos
        %vk:signal-semaphore-info-count
        %vk:p-signal-semaphore-infos)
       ,ptr
       (:struct %vk:submit-info-2-khr))
    (make-instance 'vk:submit-info-2-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :wait-semaphore-infos (loop for i from 0 below %vk:wait-semaphore-info-count collect (cffi:mem-aref %vk:p-wait-semaphore-infos '(:struct %vk:semaphore-submit-info-khr) i))
                   :command-buffer-infos (loop for i from 0 below %vk:command-buffer-info-count collect (cffi:mem-aref %vk:p-command-buffer-infos '(:struct %vk:command-buffer-submit-info-khr) i))
                   :signal-semaphore-infos (loop for i from 0 below %vk:signal-semaphore-info-count collect (cffi:mem-aref %vk:p-signal-semaphore-infos '(:struct %vk:semaphore-submit-info-khr) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-queue-family-checkpoint-properties-2-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:checkpoint-execution-stage-mask)
       ,ptr
       (:struct %vk:queue-family-checkpoint-properties-2-nv))
    (make-instance 'vk:queue-family-checkpoint-properties-2-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :checkpoint-execution-stage-mask %vk:checkpoint-execution-stage-mask)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-checkpoint-data-2-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:stage
        %vk:p-checkpoint-marker)
       ,ptr
       (:struct %vk:checkpoint-data-2-nv))
    (make-instance 'vk:checkpoint-data-2-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :stage %vk:stage
                   :checkpoint-marker %vk:p-checkpoint-marker)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-synchronization-2-features-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:synchronization-2)
       ,ptr
       (:struct %vk:physical-device-synchronization-2-features-khr))
    (make-instance 'vk:physical-device-synchronization-2-features-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :synchronization-2 %vk:synchronization-2)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-queue-family-properties-2-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:video-codec-operations)
       ,ptr
       (:struct %vk:video-queue-family-properties-2-khr))
    (make-instance 'vk:video-queue-family-properties-2-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :video-codec-operations %vk:video-codec-operations)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-profiles-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:profile-count
        %vk:p-profiles)
       ,ptr
       (:struct %vk:video-profiles-khr))
    (make-instance 'vk:video-profiles-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :profile-count %vk:profile-count
                   :profiles %vk:p-profiles)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-video-format-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:image-usage
        %vk:p-video-profiles)
       ,ptr
       (:struct %vk:physical-device-video-format-info-khr))
    (make-instance 'vk:physical-device-video-format-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :image-usage %vk:image-usage
                   :video-profiles %vk:p-video-profiles)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-format-properties-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:format)
       ,ptr
       (:struct %vk:video-format-properties-khr))
    (make-instance 'vk:video-format-properties-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :format %vk:format)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-profile-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:video-codec-operation
        %vk:chroma-subsampling
        %vk:luma-bit-depth
        %vk:chroma-bit-depth)
       ,ptr
       (:struct %vk:video-profile-khr))
    (make-instance 'vk:video-profile-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :video-codec-operation %vk:video-codec-operation
                   :chroma-subsampling %vk:chroma-subsampling
                   :luma-bit-depth %vk:luma-bit-depth
                   :chroma-bit-depth %vk:chroma-bit-depth)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-capabilities-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:capability-flags
        %vk:min-bitstream-buffer-offset-alignment
        %vk:min-bitstream-buffer-size-alignment
        %vk:video-picture-extent-granularity
        %vk:min-extent
        %vk:max-extent
        %vk:max-reference-pictures-slots-count
        %vk:max-reference-pictures-active-count)
       ,ptr
       (:struct %vk:video-capabilities-khr))
    (make-instance 'vk:video-capabilities-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :capability-flags %vk:capability-flags
                   :min-bitstream-buffer-offset-alignment %vk:min-bitstream-buffer-offset-alignment
                   :min-bitstream-buffer-size-alignment %vk:min-bitstream-buffer-size-alignment
                   :video-picture-extent-granularity %vk:video-picture-extent-granularity
                   :min-extent %vk:min-extent
                   :max-extent %vk:max-extent
                   :max-reference-pictures-slots-count %vk:max-reference-pictures-slots-count
                   :max-reference-pictures-active-count %vk:max-reference-pictures-active-count)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-get-memory-properties-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:memory-bind-index
        %vk:p-memory-requirements)
       ,ptr
       (:struct %vk:video-get-memory-properties-khr))
    (make-instance 'vk:video-get-memory-properties-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :memory-bind-index %vk:memory-bind-index
                   :memory-requirements %vk:p-memory-requirements)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-bind-memory-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:memory-bind-index
        %vk:memory
        %vk:memory-offset
        %vk:memory-size)
       ,ptr
       (:struct %vk:video-bind-memory-khr))
    (make-instance 'vk:video-bind-memory-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :memory-bind-index %vk:memory-bind-index
                   :memory (vk:make-device-memory-wrapper %vk:memory)
                   :memory-offset %vk:memory-offset
                   :memory-size %vk:memory-size)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-picture-resource-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:coded-offset
        %vk:coded-extent
        %vk:base-array-layer
        %vk:image-view-binding)
       ,ptr
       (:struct %vk:video-picture-resource-khr))
    (make-instance 'vk:video-picture-resource-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :coded-offset %vk:coded-offset
                   :coded-extent %vk:coded-extent
                   :base-array-layer %vk:base-array-layer
                   :image-view-binding (vk:make-image-view-wrapper %vk:image-view-binding))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-reference-slot-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:slot-index
        %vk:p-picture-resource)
       ,ptr
       (:struct %vk:video-reference-slot-khr))
    (make-instance 'vk:video-reference-slot-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :slot-index %vk:slot-index
                   :picture-resource %vk:p-picture-resource)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-decode-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:coded-offset
        %vk:coded-extent
        %vk:src-buffer
        %vk:src-buffer-offset
        %vk:src-buffer-range
        %vk:dst-picture-resource
        %vk:p-setup-reference-slot
        %vk:reference-slot-count
        %vk:p-reference-slots)
       ,ptr
       (:struct %vk:video-decode-info-khr))
    (make-instance 'vk:video-decode-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :coded-offset %vk:coded-offset
                   :coded-extent %vk:coded-extent
                   :src-buffer (vk:make-buffer-wrapper %vk:src-buffer)
                   :src-buffer-offset %vk:src-buffer-offset
                   :src-buffer-range %vk:src-buffer-range
                   :dst-picture-resource %vk:dst-picture-resource
                   :setup-reference-slot %vk:p-setup-reference-slot
                   :reference-slots (loop for i from 0 below %vk:reference-slot-count collect (cffi:mem-aref %vk:p-reference-slots '(:struct %vk:video-reference-slot-khr) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-decode-h264-profile-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:std-profile-idc
        %vk:picture-layout)
       ,ptr
       (:struct %vk:video-decode-h264-profile-ext))
    (make-instance 'vk:video-decode-h264-profile-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :std-profile-idc %vk:std-profile-idc
                   :picture-layout %vk:picture-layout)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-decode-h264-capabilities-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:max-level
        %vk:field-offset-granularity
        %vk:std-extension-version)
       ,ptr
       (:struct %vk:video-decode-h264-capabilities-ext))
    (make-instance 'vk:video-decode-h264-capabilities-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :max-level %vk:max-level
                   :field-offset-granularity %vk:field-offset-granularity
                   :std-extension-version %vk:std-extension-version)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-decode-h264-session-create-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:p-std-extension-version)
       ,ptr
       (:struct %vk:video-decode-h264-session-create-info-ext))
    (make-instance 'vk:video-decode-h264-session-create-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :std-extension-version %vk:p-std-extension-version)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-decode-h264-session-parameters-add-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:sps-std-count
        %vk:p-sps-std
        %vk:pps-std-count
        %vk:p-pps-std)
       ,ptr
       (:struct %vk:video-decode-h264-session-parameters-add-info-ext))
    (make-instance 'vk:video-decode-h264-session-parameters-add-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :sps-std (loop for i from 0 below %vk:sps-std-count collect (cffi:mem-aref %vk:p-sps-std '(:struct %vk:std-video-h264-sequence-parameter-set) i))
                   :pps-std (loop for i from 0 below %vk:pps-std-count collect (cffi:mem-aref %vk:p-pps-std '(:struct %vk:std-video-h264-picture-parameter-set) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-decode-h264-session-parameters-create-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:max-sps-std-count
        %vk:max-pps-std-count
        %vk:p-parameters-add-info)
       ,ptr
       (:struct %vk:video-decode-h264-session-parameters-create-info-ext))
    (make-instance 'vk:video-decode-h264-session-parameters-create-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :max-sps-std-count %vk:max-sps-std-count
                   :max-pps-std-count %vk:max-pps-std-count
                   :parameters-add-info %vk:p-parameters-add-info)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-decode-h264-picture-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:p-std-picture-info
        %vk:slices-count
        %vk:p-slices-data-offsets)
       ,ptr
       (:struct %vk:video-decode-h264-picture-info-ext))
    (make-instance 'vk:video-decode-h264-picture-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :std-picture-info %vk:p-std-picture-info
                   :slices-data-offsets (loop for i from 0 below %vk:slices-count collect (cffi:mem-aref %vk:p-slices-data-offsets :uint32 i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-decode-h264-dpb-slot-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:p-std-reference-info)
       ,ptr
       (:struct %vk:video-decode-h264-dpb-slot-info-ext))
    (make-instance 'vk:video-decode-h264-dpb-slot-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :std-reference-info %vk:p-std-reference-info)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-decode-h264-mvc-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:p-std-mvc)
       ,ptr
       (:struct %vk:video-decode-h264-mvc-ext))
    (make-instance 'vk:video-decode-h264-mvc-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :std-mvc %vk:p-std-mvc)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-decode-h265-profile-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:std-profile-idc)
       ,ptr
       (:struct %vk:video-decode-h265-profile-ext))
    (make-instance 'vk:video-decode-h265-profile-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :std-profile-idc %vk:std-profile-idc)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-decode-h265-capabilities-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:max-level
        %vk:std-extension-version)
       ,ptr
       (:struct %vk:video-decode-h265-capabilities-ext))
    (make-instance 'vk:video-decode-h265-capabilities-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :max-level %vk:max-level
                   :std-extension-version %vk:std-extension-version)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-decode-h265-session-create-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:p-std-extension-version)
       ,ptr
       (:struct %vk:video-decode-h265-session-create-info-ext))
    (make-instance 'vk:video-decode-h265-session-create-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :std-extension-version %vk:p-std-extension-version)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-decode-h265-session-parameters-add-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:sps-std-count
        %vk:p-sps-std
        %vk:pps-std-count
        %vk:p-pps-std)
       ,ptr
       (:struct %vk:video-decode-h265-session-parameters-add-info-ext))
    (make-instance 'vk:video-decode-h265-session-parameters-add-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :sps-std (loop for i from 0 below %vk:sps-std-count collect (cffi:mem-aref %vk:p-sps-std '(:struct %vk:std-video-h265-sequence-parameter-set) i))
                   :pps-std (loop for i from 0 below %vk:pps-std-count collect (cffi:mem-aref %vk:p-pps-std '(:struct %vk:std-video-h265-picture-parameter-set) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-decode-h265-session-parameters-create-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:max-sps-std-count
        %vk:max-pps-std-count
        %vk:p-parameters-add-info)
       ,ptr
       (:struct %vk:video-decode-h265-session-parameters-create-info-ext))
    (make-instance 'vk:video-decode-h265-session-parameters-create-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :max-sps-std-count %vk:max-sps-std-count
                   :max-pps-std-count %vk:max-pps-std-count
                   :parameters-add-info %vk:p-parameters-add-info)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-decode-h265-picture-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:p-std-picture-info
        %vk:slices-count
        %vk:p-slices-data-offsets)
       ,ptr
       (:struct %vk:video-decode-h265-picture-info-ext))
    (make-instance 'vk:video-decode-h265-picture-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :std-picture-info %vk:p-std-picture-info
                   :slices-data-offsets (loop for i from 0 below %vk:slices-count collect (cffi:mem-aref %vk:p-slices-data-offsets :uint32 i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-decode-h265-dpb-slot-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:p-std-reference-info)
       ,ptr
       (:struct %vk:video-decode-h265-dpb-slot-info-ext))
    (make-instance 'vk:video-decode-h265-dpb-slot-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :std-reference-info %vk:p-std-reference-info)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-session-create-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:queue-family-index
        %vk:flags
        %vk:p-video-profile
        %vk:picture-format
        %vk:max-coded-extent
        %vk:reference-pictures-format
        %vk:max-reference-pictures-slots-count
        %vk:max-reference-pictures-active-count)
       ,ptr
       (:struct %vk:video-session-create-info-khr))
    (make-instance 'vk:video-session-create-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :queue-family-index %vk:queue-family-index
                   :flags %vk:flags
                   :video-profile %vk:p-video-profile
                   :picture-format %vk:picture-format
                   :max-coded-extent %vk:max-coded-extent
                   :reference-pictures-format %vk:reference-pictures-format
                   :max-reference-pictures-slots-count %vk:max-reference-pictures-slots-count
                   :max-reference-pictures-active-count %vk:max-reference-pictures-active-count)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-session-parameters-create-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:video-session-parameters-template
        %vk:video-session)
       ,ptr
       (:struct %vk:video-session-parameters-create-info-khr))
    (make-instance 'vk:video-session-parameters-create-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :video-session-parameters-template (vk:make-video-session-parameters-khr-wrapper %vk:video-session-parameters-template)
                   :video-session (vk:make-video-session-khr-wrapper %vk:video-session))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-session-parameters-update-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:update-sequence-count)
       ,ptr
       (:struct %vk:video-session-parameters-update-info-khr))
    (make-instance 'vk:video-session-parameters-update-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :update-sequence-count %vk:update-sequence-count)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-begin-coding-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:codec-quality-preset
        %vk:video-session
        %vk:video-session-parameters
        %vk:reference-slot-count
        %vk:p-reference-slots)
       ,ptr
       (:struct %vk:video-begin-coding-info-khr))
    (make-instance 'vk:video-begin-coding-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :codec-quality-preset %vk:codec-quality-preset
                   :video-session (vk:make-video-session-khr-wrapper %vk:video-session)
                   :video-session-parameters (vk:make-video-session-parameters-khr-wrapper %vk:video-session-parameters)
                   :reference-slots (loop for i from 0 below %vk:reference-slot-count collect (cffi:mem-aref %vk:p-reference-slots '(:struct %vk:video-reference-slot-khr) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-end-coding-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags)
       ,ptr
       (:struct %vk:video-end-coding-info-khr))
    (make-instance 'vk:video-end-coding-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-coding-control-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags)
       ,ptr
       (:struct %vk:video-coding-control-info-khr))
    (make-instance 'vk:video-coding-control-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-encode-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:quality-level
        %vk:coded-extent
        %vk:dst-bitstream-buffer
        %vk:dst-bitstream-buffer-offset
        %vk:dst-bitstream-buffer-max-range
        %vk:src-picture-resource
        %vk:p-setup-reference-slot
        %vk:reference-slot-count
        %vk:p-reference-slots)
       ,ptr
       (:struct %vk:video-encode-info-khr))
    (make-instance 'vk:video-encode-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :quality-level %vk:quality-level
                   :coded-extent %vk:coded-extent
                   :dst-bitstream-buffer (vk:make-buffer-wrapper %vk:dst-bitstream-buffer)
                   :dst-bitstream-buffer-offset %vk:dst-bitstream-buffer-offset
                   :dst-bitstream-buffer-max-range %vk:dst-bitstream-buffer-max-range
                   :src-picture-resource %vk:src-picture-resource
                   :setup-reference-slot %vk:p-setup-reference-slot
                   :reference-slots (loop for i from 0 below %vk:reference-slot-count collect (cffi:mem-aref %vk:p-reference-slots '(:struct %vk:video-reference-slot-khr) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-encode-rate-control-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:rate-control-mode
        %vk:average-bitrate
        %vk:peak-to-average-bitrate-ratio
        %vk:frame-rate-numerator
        %vk:frame-rate-denominator
        %vk:virtual-buffer-size-in-ms)
       ,ptr
       (:struct %vk:video-encode-rate-control-info-khr))
    (make-instance 'vk:video-encode-rate-control-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :rate-control-mode %vk:rate-control-mode
                   :average-bitrate %vk:average-bitrate
                   :peak-to-average-bitrate-ratio %vk:peak-to-average-bitrate-ratio
                   :frame-rate-numerator %vk:frame-rate-numerator
                   :frame-rate-denominator %vk:frame-rate-denominator
                   :virtual-buffer-size-in-ms %vk:virtual-buffer-size-in-ms)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-encode-h264-capabilities-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:input-mode-flags
        %vk:output-mode-flags
        %vk:min-picture-size-in-mbs
        %vk:max-picture-size-in-mbs
        %vk:input-image-data-alignment
        %vk:max-num-l-0-reference-for-p
        %vk:max-num-l-0-reference-for-b
        %vk:max-num-l-1-reference
        %vk:quality-level-count
        %vk:std-extension-version)
       ,ptr
       (:struct %vk:video-encode-h264-capabilities-ext))
    (make-instance 'vk:video-encode-h264-capabilities-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :input-mode-flags %vk:input-mode-flags
                   :output-mode-flags %vk:output-mode-flags
                   :min-picture-size-in-mbs %vk:min-picture-size-in-mbs
                   :max-picture-size-in-mbs %vk:max-picture-size-in-mbs
                   :input-image-data-alignment %vk:input-image-data-alignment
                   :max-num-l-0-reference-for-p %vk:max-num-l-0-reference-for-p
                   :max-num-l-0-reference-for-b %vk:max-num-l-0-reference-for-b
                   :max-num-l-1-reference %vk:max-num-l-1-reference
                   :quality-level-count %vk:quality-level-count
                   :std-extension-version %vk:std-extension-version)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-encode-h264-session-create-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:max-picture-size-in-mbs
        %vk:p-std-extension-version)
       ,ptr
       (:struct %vk:video-encode-h264-session-create-info-ext))
    (make-instance 'vk:video-encode-h264-session-create-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :max-picture-size-in-mbs %vk:max-picture-size-in-mbs
                   :std-extension-version %vk:p-std-extension-version)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-encode-h264-session-parameters-add-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:sps-std-count
        %vk:p-sps-std
        %vk:pps-std-count
        %vk:p-pps-std)
       ,ptr
       (:struct %vk:video-encode-h264-session-parameters-add-info-ext))
    (make-instance 'vk:video-encode-h264-session-parameters-add-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :sps-std (loop for i from 0 below %vk:sps-std-count collect (cffi:mem-aref %vk:p-sps-std '(:struct %vk:std-video-h264-sequence-parameter-set) i))
                   :pps-std (loop for i from 0 below %vk:pps-std-count collect (cffi:mem-aref %vk:p-pps-std '(:struct %vk:std-video-h264-picture-parameter-set) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-encode-h264-session-parameters-create-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:max-sps-std-count
        %vk:max-pps-std-count
        %vk:p-parameters-add-info)
       ,ptr
       (:struct %vk:video-encode-h264-session-parameters-create-info-ext))
    (make-instance 'vk:video-encode-h264-session-parameters-create-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :max-sps-std-count %vk:max-sps-std-count
                   :max-pps-std-count %vk:max-pps-std-count
                   :parameters-add-info %vk:p-parameters-add-info)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-encode-h264-dpb-slot-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:slot-index
        %vk:p-std-picture-info)
       ,ptr
       (:struct %vk:video-encode-h264-dpb-slot-info-ext))
    (make-instance 'vk:video-encode-h264-dpb-slot-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :slot-index %vk:slot-index
                   :std-picture-info %vk:p-std-picture-info)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-encode-h264-vcl-frame-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:ref-default-final-list-0-entry-count
        %vk:p-ref-default-final-list-0-entries
        %vk:ref-default-final-list-1-entry-count
        %vk:p-ref-default-final-list-1-entries
        %vk:nalu-slice-entry-count
        %vk:p-nalu-slice-entries
        %vk:p-current-picture-info)
       ,ptr
       (:struct %vk:video-encode-h264-vcl-frame-info-ext))
    (make-instance 'vk:video-encode-h264-vcl-frame-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :ref-default-final-list-0-entries (loop for i from 0 below %vk:ref-default-final-list-0-entry-count collect (cffi:mem-aref %vk:p-ref-default-final-list-0-entries '(:struct %vk:video-encode-h264-dpb-slot-info-ext) i))
                   :ref-default-final-list-1-entries (loop for i from 0 below %vk:ref-default-final-list-1-entry-count collect (cffi:mem-aref %vk:p-ref-default-final-list-1-entries '(:struct %vk:video-encode-h264-dpb-slot-info-ext) i))
                   :nalu-slice-entries (loop for i from 0 below %vk:nalu-slice-entry-count collect (cffi:mem-aref %vk:p-nalu-slice-entries '(:struct %vk:video-encode-h264-nalu-slice-ext) i))
                   :current-picture-info %vk:p-current-picture-info)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-encode-h264-emit-picture-parameters-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:sps-id
        %vk:emit-sps-enable
        %vk:pps-id-entry-count
        %vk:pps-id-entries)
       ,ptr
       (:struct %vk:video-encode-h264-emit-picture-parameters-ext))
    (make-instance 'vk:video-encode-h264-emit-picture-parameters-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :sps-id %vk:sps-id
                   :emit-sps-enable %vk:emit-sps-enable
                   :pps-id-entries (loop for i from 0 below %vk:pps-id-entry-count collect (cffi:mem-aref %vk:pps-id-entries :uint8 i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-encode-h264-profile-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:std-profile-idc)
       ,ptr
       (:struct %vk:video-encode-h264-profile-ext))
    (make-instance 'vk:video-encode-h264-profile-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :std-profile-idc %vk:std-profile-idc)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-encode-h264-nalu-slice-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:p-slice-header-std
        %vk:mb-count
        %vk:ref-final-list-0-entry-count
        %vk:p-ref-final-list-0-entries
        %vk:ref-final-list-1-entry-count
        %vk:p-ref-final-list-1-entries
        %vk:preceding-nalu-bytes
        %vk:min-qp
        %vk:max-qp)
       ,ptr
       (:struct %vk:video-encode-h264-nalu-slice-ext))
    (make-instance 'vk:video-encode-h264-nalu-slice-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :slice-header-std %vk:p-slice-header-std
                   :mb-count %vk:mb-count
                   :ref-final-list-0-entries (loop for i from 0 below %vk:ref-final-list-0-entry-count collect (cffi:mem-aref %vk:p-ref-final-list-0-entries '(:struct %vk:video-encode-h264-dpb-slot-info-ext) i))
                   :ref-final-list-1-entries (loop for i from 0 below %vk:ref-final-list-1-entry-count collect (cffi:mem-aref %vk:p-ref-final-list-1-entries '(:struct %vk:video-encode-h264-dpb-slot-info-ext) i))
                   :preceding-nalu-bytes %vk:preceding-nalu-bytes
                   :min-qp %vk:min-qp
                   :max-qp %vk:max-qp)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-encode-h265-capabilities-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:input-mode-flags
        %vk:output-mode-flags
        %vk:ctb-sizes
        %vk:input-image-data-alignment
        %vk:max-num-l-0-reference-for-p
        %vk:max-num-l-0-reference-for-b
        %vk:max-num-l-1-reference
        %vk:max-num-sub-layers
        %vk:quality-level-count
        %vk:std-extension-version)
       ,ptr
       (:struct %vk:video-encode-h265-capabilities-ext))
    (make-instance 'vk:video-encode-h265-capabilities-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :input-mode-flags %vk:input-mode-flags
                   :output-mode-flags %vk:output-mode-flags
                   :ctb-sizes %vk:ctb-sizes
                   :input-image-data-alignment %vk:input-image-data-alignment
                   :max-num-l-0-reference-for-p %vk:max-num-l-0-reference-for-p
                   :max-num-l-0-reference-for-b %vk:max-num-l-0-reference-for-b
                   :max-num-l-1-reference %vk:max-num-l-1-reference
                   :max-num-sub-layers %vk:max-num-sub-layers
                   :quality-level-count %vk:quality-level-count
                   :std-extension-version %vk:std-extension-version)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-encode-h265-session-create-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:p-std-extension-version)
       ,ptr
       (:struct %vk:video-encode-h265-session-create-info-ext))
    (make-instance 'vk:video-encode-h265-session-create-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :std-extension-version %vk:p-std-extension-version)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-encode-h265-session-parameters-add-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:vps-std-count
        %vk:p-vps-std
        %vk:sps-std-count
        %vk:p-sps-std
        %vk:pps-std-count
        %vk:p-pps-std)
       ,ptr
       (:struct %vk:video-encode-h265-session-parameters-add-info-ext))
    (make-instance 'vk:video-encode-h265-session-parameters-add-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :vps-std (loop for i from 0 below %vk:vps-std-count collect (cffi:mem-aref %vk:p-vps-std '(:struct %vk:std-video-h265-video-parameter-set) i))
                   :sps-std (loop for i from 0 below %vk:sps-std-count collect (cffi:mem-aref %vk:p-sps-std '(:struct %vk:std-video-h265-sequence-parameter-set) i))
                   :pps-std (loop for i from 0 below %vk:pps-std-count collect (cffi:mem-aref %vk:p-pps-std '(:struct %vk:std-video-h265-picture-parameter-set) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-encode-h265-session-parameters-create-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:max-vps-std-count
        %vk:max-sps-std-count
        %vk:max-pps-std-count
        %vk:p-parameters-add-info)
       ,ptr
       (:struct %vk:video-encode-h265-session-parameters-create-info-ext))
    (make-instance 'vk:video-encode-h265-session-parameters-create-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :max-vps-std-count %vk:max-vps-std-count
                   :max-sps-std-count %vk:max-sps-std-count
                   :max-pps-std-count %vk:max-pps-std-count
                   :parameters-add-info %vk:p-parameters-add-info)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-encode-h265-vcl-frame-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:p-reference-final-lists
        %vk:nalu-slice-entry-count
        %vk:p-nalu-slice-entries
        %vk:p-current-picture-info)
       ,ptr
       (:struct %vk:video-encode-h265-vcl-frame-info-ext))
    (make-instance 'vk:video-encode-h265-vcl-frame-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :reference-final-lists %vk:p-reference-final-lists
                   :nalu-slice-entries (loop for i from 0 below %vk:nalu-slice-entry-count collect (cffi:mem-aref %vk:p-nalu-slice-entries '(:struct %vk:video-encode-h265-nalu-slice-ext) i))
                   :current-picture-info %vk:p-current-picture-info)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-encode-h265-emit-picture-parameters-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:vps-id
        %vk:sps-id
        %vk:emit-vps-enable
        %vk:emit-sps-enable
        %vk:pps-id-entry-count
        %vk:pps-id-entries)
       ,ptr
       (:struct %vk:video-encode-h265-emit-picture-parameters-ext))
    (make-instance 'vk:video-encode-h265-emit-picture-parameters-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :vps-id %vk:vps-id
                   :sps-id %vk:sps-id
                   :emit-vps-enable %vk:emit-vps-enable
                   :emit-sps-enable %vk:emit-sps-enable
                   :pps-id-entries (loop for i from 0 below %vk:pps-id-entry-count collect (cffi:mem-aref %vk:pps-id-entries :uint8 i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-encode-h265-nalu-slice-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:ctb-count
        %vk:p-reference-final-lists
        %vk:p-slice-header-std)
       ,ptr
       (:struct %vk:video-encode-h265-nalu-slice-ext))
    (make-instance 'vk:video-encode-h265-nalu-slice-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :ctb-count %vk:ctb-count
                   :reference-final-lists %vk:p-reference-final-lists
                   :slice-header-std %vk:p-slice-header-std)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-encode-h265-profile-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:std-profile-idc)
       ,ptr
       (:struct %vk:video-encode-h265-profile-ext))
    (make-instance 'vk:video-encode-h265-profile-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :std-profile-idc %vk:std-profile-idc)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-encode-h265-dpb-slot-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:slot-index
        %vk:p-std-reference-info)
       ,ptr
       (:struct %vk:video-encode-h265-dpb-slot-info-ext))
    (make-instance 'vk:video-encode-h265-dpb-slot-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :slot-index %vk:slot-index
                   :std-reference-info %vk:p-std-reference-info)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-video-encode-h265-reference-lists-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:reference-list-0-entry-count
        %vk:p-reference-list-0-entries
        %vk:reference-list-1-entry-count
        %vk:p-reference-list-1-entries
        %vk:p-reference-modifications)
       ,ptr
       (:struct %vk:video-encode-h265-reference-lists-ext))
    (make-instance 'vk:video-encode-h265-reference-lists-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :reference-list-0-entries (loop for i from 0 below %vk:reference-list-0-entry-count collect (cffi:mem-aref %vk:p-reference-list-0-entries '(:struct %vk:video-encode-h265-dpb-slot-info-ext) i))
                   :reference-list-1-entries (loop for i from 0 below %vk:reference-list-1-entry-count collect (cffi:mem-aref %vk:p-reference-list-1-entries '(:struct %vk:video-encode-h265-dpb-slot-info-ext) i))
                   :reference-modifications %vk:p-reference-modifications)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-inherited-viewport-scissor-features-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:inherited-viewport-scissor-2d)
       ,ptr
       (:struct %vk:physical-device-inherited-viewport-scissor-features-nv))
    (make-instance 'vk:physical-device-inherited-viewport-scissor-features-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :inherited-viewport-scissor-2d %vk:inherited-viewport-scissor-2d)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-command-buffer-inheritance-viewport-scissor-info-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:viewport-scissor-2d
        %vk:viewport-depth-count
        %vk:p-viewport-depths)
       ,ptr
       (:struct %vk:command-buffer-inheritance-viewport-scissor-info-nv))
    (make-instance 'vk:command-buffer-inheritance-viewport-scissor-info-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :viewport-scissor-2d %vk:viewport-scissor-2d
                   :viewport-depth-count %vk:viewport-depth-count
                   :viewport-depths %vk:p-viewport-depths)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-ycbcr-2-plane-4-4-4-formats-features-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:ycbcr-2plane-4-4-4-formats)
       ,ptr
       (:struct %vk:physical-device-ycbcr-2-plane-4-4-4-formats-features-ext))
    (make-instance 'vk:physical-device-ycbcr-2-plane-4-4-4-formats-features-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :ycbcr-2plane-4-4-4-formats %vk:ycbcr-2plane-4-4-4-formats)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-provoking-vertex-features-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:provoking-vertex-last
        %vk:transform-feedback-preserves-provoking-vertex)
       ,ptr
       (:struct %vk:physical-device-provoking-vertex-features-ext))
    (make-instance 'vk:physical-device-provoking-vertex-features-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :provoking-vertex-last %vk:provoking-vertex-last
                   :transform-feedback-preserves-provoking-vertex %vk:transform-feedback-preserves-provoking-vertex)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-provoking-vertex-properties-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:provoking-vertex-mode-per-pipeline
        %vk:transform-feedback-preserves-triangle-fan-provoking-vertex)
       ,ptr
       (:struct %vk:physical-device-provoking-vertex-properties-ext))
    (make-instance 'vk:physical-device-provoking-vertex-properties-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :provoking-vertex-mode-per-pipeline %vk:provoking-vertex-mode-per-pipeline
                   :transform-feedback-preserves-triangle-fan-provoking-vertex %vk:transform-feedback-preserves-triangle-fan-provoking-vertex)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-rasterization-provoking-vertex-state-create-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:provoking-vertex-mode)
       ,ptr
       (:struct %vk:pipeline-rasterization-provoking-vertex-state-create-info-ext))
    (make-instance 'vk:pipeline-rasterization-provoking-vertex-state-create-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :provoking-vertex-mode %vk:provoking-vertex-mode)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-cu-module-create-info-nvx))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:data-size
        %vk:p-data)
       ,ptr
       (:struct %vk:cu-module-create-info-nvx))
    (make-instance 'vk:cu-module-create-info-nvx
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :data-size %vk:data-size
                   :data %vk:p-data)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-cu-function-create-info-nvx))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:module
        %vk:p-name)
       ,ptr
       (:struct %vk:cu-function-create-info-nvx))
    (make-instance 'vk:cu-function-create-info-nvx
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :module (vk:make-cu-module-nvx-wrapper %vk:module)
                   :name %vk:p-name)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-cu-launch-info-nvx))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:function-handle
        %vk:grid-dim-x
        %vk:grid-dim-y
        %vk:grid-dim-z
        %vk:block-dim-x
        %vk:block-dim-y
        %vk:block-dim-z
        %vk:shared-mem-bytes
        %vk:param-count
        %vk:p-params
        %vk:extra-count
        %vk:p-extras)
       ,ptr
       (:struct %vk:cu-launch-info-nvx))
    (make-instance 'vk:cu-launch-info-nvx
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :function-handle (vk:make-cu-function-nvx-wrapper %vk:function-handle)
                   :grid-dim-x %vk:grid-dim-x
                   :grid-dim-y %vk:grid-dim-y
                   :grid-dim-z %vk:grid-dim-z
                   :block-dim-x %vk:block-dim-x
                   :block-dim-y %vk:block-dim-y
                   :block-dim-z %vk:block-dim-z
                   :shared-mem-bytes %vk:shared-mem-bytes
                   :param-count %vk:param-count
                   :params %vk:p-params
                   :extra-count %vk:extra-count
                   :extras %vk:p-extras)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-shader-integer-dot-product-features-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:shader-integer-dot-product)
       ,ptr
       (:struct %vk:physical-device-shader-integer-dot-product-features-khr))
    (make-instance 'vk:physical-device-shader-integer-dot-product-features-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :shader-integer-dot-product %vk:shader-integer-dot-product)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-shader-integer-dot-product-properties-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:integer-dot-product-8-bit-unsigned-accelerated
        %vk:integer-dot-product-8-bit-signed-accelerated
        %vk:integer-dot-product-8-bit-mixed-signedness-accelerated
        %vk:integer-dot-product-4x-8-bit-packed-unsigned-accelerated
        %vk:integer-dot-product-4x-8-bit-packed-signed-accelerated
        %vk:integer-dot-product-4x-8-bit-packed-mixed-signedness-accelerated
        %vk:integer-dot-product-16-bit-unsigned-accelerated
        %vk:integer-dot-product-16-bit-signed-accelerated
        %vk:integer-dot-product-16-bit-mixed-signedness-accelerated
        %vk:integer-dot-product-32-bit-unsigned-accelerated
        %vk:integer-dot-product-32-bit-signed-accelerated
        %vk:integer-dot-product-32-bit-mixed-signedness-accelerated
        %vk:integer-dot-product-64-bit-unsigned-accelerated
        %vk:integer-dot-product-64-bit-signed-accelerated
        %vk:integer-dot-product-64-bit-mixed-signedness-accelerated
        %vk:integer-dot-product-accumulating-saturating-8-bit-unsigned-accelerated
        %vk:integer-dot-product-accumulating-saturating-8-bit-signed-accelerated
        %vk:integer-dot-product-accumulating-saturating-8-bit-mixed-signedness-accelerated
        %vk:integer-dot-product-accumulating-saturating-4x-8-bit-packed-unsigned-accelerated
        %vk:integer-dot-product-accumulating-saturating-4x-8-bit-packed-signed-accelerated
        %vk:integer-dot-product-accumulating-saturating-4x-8-bit-packed-mixed-signedness-accelerated
        %vk:integer-dot-product-accumulating-saturating-16-bit-unsigned-accelerated
        %vk:integer-dot-product-accumulating-saturating-16-bit-signed-accelerated
        %vk:integer-dot-product-accumulating-saturating-16-bit-mixed-signedness-accelerated
        %vk:integer-dot-product-accumulating-saturating-32-bit-unsigned-accelerated
        %vk:integer-dot-product-accumulating-saturating-32-bit-signed-accelerated
        %vk:integer-dot-product-accumulating-saturating-32-bit-mixed-signedness-accelerated
        %vk:integer-dot-product-accumulating-saturating-64-bit-unsigned-accelerated
        %vk:integer-dot-product-accumulating-saturating-64-bit-signed-accelerated
        %vk:integer-dot-product-accumulating-saturating-64-bit-mixed-signedness-accelerated)
       ,ptr
       (:struct %vk:physical-device-shader-integer-dot-product-properties-khr))
    (make-instance 'vk:physical-device-shader-integer-dot-product-properties-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :integer-dot-product-8-bit-unsigned-accelerated %vk:integer-dot-product-8-bit-unsigned-accelerated
                   :integer-dot-product-8-bit-signed-accelerated %vk:integer-dot-product-8-bit-signed-accelerated
                   :integer-dot-product-8-bit-mixed-signedness-accelerated %vk:integer-dot-product-8-bit-mixed-signedness-accelerated
                   :integer-dot-product-4x-8-bit-packed-unsigned-accelerated %vk:integer-dot-product-4x-8-bit-packed-unsigned-accelerated
                   :integer-dot-product-4x-8-bit-packed-signed-accelerated %vk:integer-dot-product-4x-8-bit-packed-signed-accelerated
                   :integer-dot-product-4x-8-bit-packed-mixed-signedness-accelerated %vk:integer-dot-product-4x-8-bit-packed-mixed-signedness-accelerated
                   :integer-dot-product-16-bit-unsigned-accelerated %vk:integer-dot-product-16-bit-unsigned-accelerated
                   :integer-dot-product-16-bit-signed-accelerated %vk:integer-dot-product-16-bit-signed-accelerated
                   :integer-dot-product-16-bit-mixed-signedness-accelerated %vk:integer-dot-product-16-bit-mixed-signedness-accelerated
                   :integer-dot-product-32-bit-unsigned-accelerated %vk:integer-dot-product-32-bit-unsigned-accelerated
                   :integer-dot-product-32-bit-signed-accelerated %vk:integer-dot-product-32-bit-signed-accelerated
                   :integer-dot-product-32-bit-mixed-signedness-accelerated %vk:integer-dot-product-32-bit-mixed-signedness-accelerated
                   :integer-dot-product-64-bit-unsigned-accelerated %vk:integer-dot-product-64-bit-unsigned-accelerated
                   :integer-dot-product-64-bit-signed-accelerated %vk:integer-dot-product-64-bit-signed-accelerated
                   :integer-dot-product-64-bit-mixed-signedness-accelerated %vk:integer-dot-product-64-bit-mixed-signedness-accelerated
                   :integer-dot-product-accumulating-saturating-8-bit-unsigned-accelerated %vk:integer-dot-product-accumulating-saturating-8-bit-unsigned-accelerated
                   :integer-dot-product-accumulating-saturating-8-bit-signed-accelerated %vk:integer-dot-product-accumulating-saturating-8-bit-signed-accelerated
                   :integer-dot-product-accumulating-saturating-8-bit-mixed-signedness-accelerated %vk:integer-dot-product-accumulating-saturating-8-bit-mixed-signedness-accelerated
                   :integer-dot-product-accumulating-saturating-4x-8-bit-packed-unsigned-accelerated %vk:integer-dot-product-accumulating-saturating-4x-8-bit-packed-unsigned-accelerated
                   :integer-dot-product-accumulating-saturating-4x-8-bit-packed-signed-accelerated %vk:integer-dot-product-accumulating-saturating-4x-8-bit-packed-signed-accelerated
                   :integer-dot-product-accumulating-saturating-4x-8-bit-packed-mixed-signedness-accelerated %vk:integer-dot-product-accumulating-saturating-4x-8-bit-packed-mixed-signedness-accelerated
                   :integer-dot-product-accumulating-saturating-16-bit-unsigned-accelerated %vk:integer-dot-product-accumulating-saturating-16-bit-unsigned-accelerated
                   :integer-dot-product-accumulating-saturating-16-bit-signed-accelerated %vk:integer-dot-product-accumulating-saturating-16-bit-signed-accelerated
                   :integer-dot-product-accumulating-saturating-16-bit-mixed-signedness-accelerated %vk:integer-dot-product-accumulating-saturating-16-bit-mixed-signedness-accelerated
                   :integer-dot-product-accumulating-saturating-32-bit-unsigned-accelerated %vk:integer-dot-product-accumulating-saturating-32-bit-unsigned-accelerated
                   :integer-dot-product-accumulating-saturating-32-bit-signed-accelerated %vk:integer-dot-product-accumulating-saturating-32-bit-signed-accelerated
                   :integer-dot-product-accumulating-saturating-32-bit-mixed-signedness-accelerated %vk:integer-dot-product-accumulating-saturating-32-bit-mixed-signedness-accelerated
                   :integer-dot-product-accumulating-saturating-64-bit-unsigned-accelerated %vk:integer-dot-product-accumulating-saturating-64-bit-unsigned-accelerated
                   :integer-dot-product-accumulating-saturating-64-bit-signed-accelerated %vk:integer-dot-product-accumulating-saturating-64-bit-signed-accelerated
                   :integer-dot-product-accumulating-saturating-64-bit-mixed-signedness-accelerated %vk:integer-dot-product-accumulating-saturating-64-bit-mixed-signedness-accelerated)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-drm-properties-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:has-primary
        %vk:has-render
        %vk:primary-major
        %vk:primary-minor
        %vk:render-major
        %vk:render-minor)
       ,ptr
       (:struct %vk:physical-device-drm-properties-ext))
    (make-instance 'vk:physical-device-drm-properties-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :has-primary %vk:has-primary
                   :has-render %vk:has-render
                   :primary-major %vk:primary-major
                   :primary-minor %vk:primary-minor
                   :render-major %vk:render-major
                   :render-minor %vk:render-minor)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-ray-tracing-motion-blur-features-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:ray-tracing-motion-blur
        %vk:ray-tracing-motion-blur-pipeline-trace-rays-indirect)
       ,ptr
       (:struct %vk:physical-device-ray-tracing-motion-blur-features-nv))
    (make-instance 'vk:physical-device-ray-tracing-motion-blur-features-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :ray-tracing-motion-blur %vk:ray-tracing-motion-blur
                   :ray-tracing-motion-blur-pipeline-trace-rays-indirect %vk:ray-tracing-motion-blur-pipeline-trace-rays-indirect)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-acceleration-structure-geometry-motion-triangles-data-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:vertex-data)
       ,ptr
       (:struct %vk:acceleration-structure-geometry-motion-triangles-data-nv))
    (make-instance 'vk:acceleration-structure-geometry-motion-triangles-data-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :vertex-data nil)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-acceleration-structure-motion-info-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:max-instances
        %vk:flags)
       ,ptr
       (:struct %vk:acceleration-structure-motion-info-nv))
    (make-instance 'vk:acceleration-structure-motion-info-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :max-instances %vk:max-instances
                   :flags %vk:flags)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-srt-data-nv))
  `(cffi:with-foreign-slots
      ((%vk:sx
        %vk:a
        %vk:b
        %vk:pvx
        %vk:sy
        %vk:c
        %vk:pvy
        %vk:sz
        %vk:pvz
        %vk:qx
        %vk:qy
        %vk:qz
        %vk:qw
        %vk:tx
        %vk:ty
        %vk:tz)
       ,ptr
       (:struct %vk:srt-data-nv))
    (make-instance 'vk:srt-data-nv
                   :sx %vk:sx
                   :a %vk:a
                   :b %vk:b
                   :pvx %vk:pvx
                   :sy %vk:sy
                   :c %vk:c
                   :pvy %vk:pvy
                   :sz %vk:sz
                   :pvz %vk:pvz
                   :qx %vk:qx
                   :qy %vk:qy
                   :qz %vk:qz
                   :qw %vk:qw
                   :tx %vk:tx
                   :ty %vk:ty
                   :tz %vk:tz)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-acceleration-structure-srt-motion-instance-nv))
  `(cffi:with-foreign-slots
      ((%vk:transform-t-0
        %vk:transform-t-1
        %vk:instance-custom-index-and-mask
        %vk:instance-shader-binding-table-record-offset-and-flags
        %vk:acceleration-structure-reference)
       ,ptr
       (:struct %vk:acceleration-structure-srt-motion-instance-nv))
    (make-instance 'vk:acceleration-structure-srt-motion-instance-nv
                   :transform-t-0 %vk:transform-t-0
                   :transform-t-1 %vk:transform-t-1
                   :instance-custom-index (ldb (byte 24 0) %vk:instance-custom-index-and-mask)
                   :mask (ldb (byte 8 24) %vk:instance-custom-index-and-mask)
                   :instance-shader-binding-table-record-offset (ldb (byte 24 0) %vk:instance-shader-binding-table-record-offset-and-flags)
                   :flags (cffi:foreign-bitfield-symbols '%vk:geometry-instance-flags-khr (ldb (byte 8 24) %vk:instance-shader-binding-table-record-offset-and-flags))
                   :acceleration-structure-reference %vk:acceleration-structure-reference)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-acceleration-structure-matrix-motion-instance-nv))
  `(cffi:with-foreign-slots
      ((%vk:transform-t-0
        %vk:transform-t-1
        %vk:instance-custom-index-and-mask
        %vk:instance-shader-binding-table-record-offset-and-flags
        %vk:acceleration-structure-reference)
       ,ptr
       (:struct %vk:acceleration-structure-matrix-motion-instance-nv))
    (make-instance 'vk:acceleration-structure-matrix-motion-instance-nv
                   :transform-t-0 %vk:transform-t-0
                   :transform-t-1 %vk:transform-t-1
                   :instance-custom-index (ldb (byte 24 0) %vk:instance-custom-index-and-mask)
                   :mask (ldb (byte 8 24) %vk:instance-custom-index-and-mask)
                   :instance-shader-binding-table-record-offset (ldb (byte 24 0) %vk:instance-shader-binding-table-record-offset-and-flags)
                   :flags (cffi:foreign-bitfield-symbols '%vk:geometry-instance-flags-khr (ldb (byte 8 24) %vk:instance-shader-binding-table-record-offset-and-flags))
                   :acceleration-structure-reference %vk:acceleration-structure-reference)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-acceleration-structure-motion-instance-nv))
  `(cffi:with-foreign-slots
      ((%vk:type
        %vk:flags
        %vk:data)
       ,ptr
       (:struct %vk:acceleration-structure-motion-instance-nv))
    (make-instance 'vk:acceleration-structure-motion-instance-nv
                   :type %vk:type
                   :flags %vk:flags
                   :data nil)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-memory-get-remote-address-info-nv))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:memory
        %vk:handle-type)
       ,ptr
       (:struct %vk:memory-get-remote-address-info-nv))
    (make-instance 'vk:memory-get-remote-address-info-nv
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :memory (vk:make-device-memory-wrapper %vk:memory)
                   :handle-type %vk:handle-type)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-import-memory-buffer-collection-fuchsia))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:collection
        %vk:index)
       ,ptr
       (:struct %vk:import-memory-buffer-collection-fuchsia))
    (make-instance 'vk:import-memory-buffer-collection-fuchsia
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :collection (vk:make-buffer-collection-fuchsia-wrapper %vk:collection)
                   :index %vk:index)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-buffer-collection-image-create-info-fuchsia))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:collection
        %vk:index)
       ,ptr
       (:struct %vk:buffer-collection-image-create-info-fuchsia))
    (make-instance 'vk:buffer-collection-image-create-info-fuchsia
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :collection (vk:make-buffer-collection-fuchsia-wrapper %vk:collection)
                   :index %vk:index)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-buffer-collection-buffer-create-info-fuchsia))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:collection
        %vk:index)
       ,ptr
       (:struct %vk:buffer-collection-buffer-create-info-fuchsia))
    (make-instance 'vk:buffer-collection-buffer-create-info-fuchsia
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :collection (vk:make-buffer-collection-fuchsia-wrapper %vk:collection)
                   :index %vk:index)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-buffer-collection-create-info-fuchsia))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:collection-token)
       ,ptr
       (:struct %vk:buffer-collection-create-info-fuchsia))
    (make-instance 'vk:buffer-collection-create-info-fuchsia
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :collection-token %vk:collection-token)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-buffer-collection-properties-fuchsia))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:memory-type-bits
        %vk:buffer-count
        %vk:create-info-index
        %vk:sysmem-pixel-format
        %vk:format-features
        %vk:sysmem-color-space-index
        %vk:sampler-ycbcr-conversion-components
        %vk:suggested-ycbcr-model
        %vk:suggested-ycbcr-range
        %vk:suggested-x-chroma-offset
        %vk:suggested-y-chroma-offset)
       ,ptr
       (:struct %vk:buffer-collection-properties-fuchsia))
    (make-instance 'vk:buffer-collection-properties-fuchsia
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :memory-type-bits %vk:memory-type-bits
                   :buffer-count %vk:buffer-count
                   :create-info-index %vk:create-info-index
                   :sysmem-pixel-format %vk:sysmem-pixel-format
                   :format-features %vk:format-features
                   :sysmem-color-space-index %vk:sysmem-color-space-index
                   :sampler-ycbcr-conversion-components %vk:sampler-ycbcr-conversion-components
                   :suggested-ycbcr-model %vk:suggested-ycbcr-model
                   :suggested-ycbcr-range %vk:suggested-ycbcr-range
                   :suggested-x-chroma-offset %vk:suggested-x-chroma-offset
                   :suggested-y-chroma-offset %vk:suggested-y-chroma-offset)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-buffer-constraints-info-fuchsia))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:create-info
        %vk:required-format-features
        %vk:buffer-collection-constraints)
       ,ptr
       (:struct %vk:buffer-constraints-info-fuchsia))
    (make-instance 'vk:buffer-constraints-info-fuchsia
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :create-info %vk:create-info
                   :required-format-features %vk:required-format-features
                   :buffer-collection-constraints %vk:buffer-collection-constraints)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-sysmem-color-space-fuchsia))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:color-space)
       ,ptr
       (:struct %vk:sysmem-color-space-fuchsia))
    (make-instance 'vk:sysmem-color-space-fuchsia
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :color-space %vk:color-space)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-image-format-constraints-info-fuchsia))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:image-create-info
        %vk:required-format-features
        %vk:flags
        %vk:sysmem-pixel-format
        %vk:color-space-count
        %vk:p-color-spaces)
       ,ptr
       (:struct %vk:image-format-constraints-info-fuchsia))
    (make-instance 'vk:image-format-constraints-info-fuchsia
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :image-create-info %vk:image-create-info
                   :required-format-features %vk:required-format-features
                   :flags %vk:flags
                   :sysmem-pixel-format %vk:sysmem-pixel-format
                   :color-space-count %vk:color-space-count
                   :color-spaces %vk:p-color-spaces)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-image-constraints-info-fuchsia))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:format-constraints-count
        %vk:p-format-constraints
        %vk:buffer-collection-constraints
        %vk:flags)
       ,ptr
       (:struct %vk:image-constraints-info-fuchsia))
    (make-instance 'vk:image-constraints-info-fuchsia
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :format-constraints (loop for i from 0 below %vk:format-constraints-count collect (cffi:mem-aref %vk:p-format-constraints '(:struct %vk:image-format-constraints-info-fuchsia) i))
                   :buffer-collection-constraints %vk:buffer-collection-constraints
                   :flags %vk:flags)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-buffer-collection-constraints-info-fuchsia))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:min-buffer-count
        %vk:max-buffer-count
        %vk:min-buffer-count-for-camping
        %vk:min-buffer-count-for-dedicated-slack
        %vk:min-buffer-count-for-shared-slack)
       ,ptr
       (:struct %vk:buffer-collection-constraints-info-fuchsia))
    (make-instance 'vk:buffer-collection-constraints-info-fuchsia
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :min-buffer-count %vk:min-buffer-count
                   :max-buffer-count %vk:max-buffer-count
                   :min-buffer-count-for-camping %vk:min-buffer-count-for-camping
                   :min-buffer-count-for-dedicated-slack %vk:min-buffer-count-for-dedicated-slack
                   :min-buffer-count-for-shared-slack %vk:min-buffer-count-for-shared-slack)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-r-g-b-a-1-0-x-6-formats-features-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:format-rgba-1-0x-6-without-y-cb-cr-sampler)
       ,ptr
       (:struct %vk:physical-device-r-g-b-a-1-0-x-6-formats-features-ext))
    (make-instance 'vk:physical-device-r-g-b-a-1-0-x-6-formats-features-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :format-rgba-1-0x-6-without-y-cb-cr-sampler %vk:format-rgba-1-0x-6-without-y-cb-cr-sampler)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-format-properties-3-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:linear-tiling-features
        %vk:optimal-tiling-features
        %vk:buffer-features)
       ,ptr
       (:struct %vk:format-properties-3-khr))
    (make-instance 'vk:format-properties-3-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :linear-tiling-features %vk:linear-tiling-features
                   :optimal-tiling-features %vk:optimal-tiling-features
                   :buffer-features %vk:buffer-features)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-drm-format-modifier-properties-list-2-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:drm-format-modifier-count
        %vk:p-drm-format-modifier-properties)
       ,ptr
       (:struct %vk:drm-format-modifier-properties-list-2-ext))
    (make-instance 'vk:drm-format-modifier-properties-list-2-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :drm-format-modifier-properties (loop for i from 0 below %vk:drm-format-modifier-count collect (cffi:mem-aref %vk:p-drm-format-modifier-properties '(:struct %vk:drm-format-modifier-properties-2-ext) i)))))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-drm-format-modifier-properties-2-ext))
  `(cffi:with-foreign-slots
      ((%vk:drm-format-modifier
        %vk:drm-format-modifier-plane-count
        %vk:drm-format-modifier-tiling-features)
       ,ptr
       (:struct %vk:drm-format-modifier-properties-2-ext))
    (make-instance 'vk:drm-format-modifier-properties-2-ext
                   :drm-format-modifier %vk:drm-format-modifier
                   :drm-format-modifier-plane-count %vk:drm-format-modifier-plane-count
                   :drm-format-modifier-tiling-features %vk:drm-format-modifier-tiling-features)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-android-hardware-buffer-format-properties-2-android))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:format
        %vk:external-format
        %vk:format-features
        %vk:sampler-ycbcr-conversion-components
        %vk:suggested-ycbcr-model
        %vk:suggested-ycbcr-range
        %vk:suggested-x-chroma-offset
        %vk:suggested-y-chroma-offset)
       ,ptr
       (:struct %vk:android-hardware-buffer-format-properties-2-android))
    (make-instance 'vk:android-hardware-buffer-format-properties-2-android
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :format %vk:format
                   :external-format %vk:external-format
                   :format-features %vk:format-features
                   :sampler-ycbcr-conversion-components %vk:sampler-ycbcr-conversion-components
                   :suggested-ycbcr-model %vk:suggested-ycbcr-model
                   :suggested-ycbcr-range %vk:suggested-ycbcr-range
                   :suggested-x-chroma-offset %vk:suggested-x-chroma-offset
                   :suggested-y-chroma-offset %vk:suggested-y-chroma-offset)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-pipeline-rendering-create-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:view-mask
        %vk:color-attachment-count
        %vk:p-color-attachment-formats
        %vk:depth-attachment-format
        %vk:stencil-attachment-format)
       ,ptr
       (:struct %vk:pipeline-rendering-create-info-khr))
    (make-instance 'vk:pipeline-rendering-create-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :view-mask %vk:view-mask
                   :color-attachment-formats (loop for i from 0 below %vk:color-attachment-count collect (cffi:mem-aref %vk:p-color-attachment-formats '%vk:format i))
                   :depth-attachment-format %vk:depth-attachment-format
                   :stencil-attachment-format %vk:stencil-attachment-format)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-rendering-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:render-area
        %vk:layer-count
        %vk:view-mask
        %vk:color-attachment-count
        %vk:p-color-attachments
        %vk:p-depth-attachment
        %vk:p-stencil-attachment)
       ,ptr
       (:struct %vk:rendering-info-khr))
    (make-instance 'vk:rendering-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :render-area %vk:render-area
                   :layer-count %vk:layer-count
                   :view-mask %vk:view-mask
                   :color-attachments (loop for i from 0 below %vk:color-attachment-count collect (cffi:mem-aref %vk:p-color-attachments '(:struct %vk:rendering-attachment-info-khr) i))
                   :depth-attachment %vk:p-depth-attachment
                   :stencil-attachment %vk:p-stencil-attachment)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-rendering-attachment-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:image-view
        %vk:image-layout
        %vk:resolve-mode
        %vk:resolve-image-view
        %vk:resolve-image-layout
        %vk:load-op
        %vk:store-op
        %vk:clear-value)
       ,ptr
       (:struct %vk:rendering-attachment-info-khr))
    (make-instance 'vk:rendering-attachment-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :image-view (vk:make-image-view-wrapper %vk:image-view)
                   :image-layout %vk:image-layout
                   :resolve-mode %vk:resolve-mode
                   :resolve-image-view (vk:make-image-view-wrapper %vk:resolve-image-view)
                   :resolve-image-layout %vk:resolve-image-layout
                   :load-op %vk:load-op
                   :store-op %vk:store-op
                   :clear-value nil)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-rendering-fragment-shading-rate-attachment-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:image-view
        %vk:image-layout
        %vk:shading-rate-attachment-texel-size)
       ,ptr
       (:struct %vk:rendering-fragment-shading-rate-attachment-info-khr))
    (make-instance 'vk:rendering-fragment-shading-rate-attachment-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :image-view (vk:make-image-view-wrapper %vk:image-view)
                   :image-layout %vk:image-layout
                   :shading-rate-attachment-texel-size %vk:shading-rate-attachment-texel-size)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-rendering-fragment-density-map-attachment-info-ext))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:image-view
        %vk:image-layout)
       ,ptr
       (:struct %vk:rendering-fragment-density-map-attachment-info-ext))
    (make-instance 'vk:rendering-fragment-density-map-attachment-info-ext
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :image-view (vk:make-image-view-wrapper %vk:image-view)
                   :image-layout %vk:image-layout)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-physical-device-dynamic-rendering-features-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:dynamic-rendering)
       ,ptr
       (:struct %vk:physical-device-dynamic-rendering-features-khr))
    (make-instance 'vk:physical-device-dynamic-rendering-features-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :dynamic-rendering %vk:dynamic-rendering)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-command-buffer-inheritance-rendering-info-khr))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:flags
        %vk:view-mask
        %vk:color-attachment-count
        %vk:p-color-attachment-formats
        %vk:depth-attachment-format
        %vk:stencil-attachment-format
        %vk:rasterization-samples)
       ,ptr
       (:struct %vk:command-buffer-inheritance-rendering-info-khr))
    (make-instance 'vk:command-buffer-inheritance-rendering-info-khr
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :flags %vk:flags
                   :view-mask %vk:view-mask
                   :color-attachment-formats (loop for i from 0 below %vk:color-attachment-count collect (cffi:mem-aref %vk:p-color-attachment-formats '%vk:format i))
                   :depth-attachment-format %vk:depth-attachment-format
                   :stencil-attachment-format %vk:stencil-attachment-format
                   :rasterization-samples %vk:rasterization-samples)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-attachment-sample-count-info-amd))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:color-attachment-count
        %vk:p-color-attachment-samples
        %vk:depth-stencil-attachment-samples)
       ,ptr
       (:struct %vk:attachment-sample-count-info-amd))
    (make-instance 'vk:attachment-sample-count-info-amd
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :color-attachment-samples (loop for i from 0 below %vk:color-attachment-count collect (cffi:mem-aref %vk:p-color-attachment-samples '%vk:sample-count-flag-bits i))
                   :depth-stencil-attachment-samples %vk:depth-stencil-attachment-samples)))

(defmethod cffi:expand-from-foreign (ptr (type %vk:c-multiview-per-view-attributes-info-nvx))
  `(cffi:with-foreign-slots
      ((%vk:s-type
        %vk:p-next
        %vk:per-view-attributes
        %vk:per-view-attributes-position-x-only)
       ,ptr
       (:struct %vk:multiview-per-view-attributes-info-nvx))
    (make-instance 'vk:multiview-per-view-attributes-info-nvx
                   :next (when (not (cffi:null-pointer-p %vk:p-next)) (let ((base-out (cffi:mem-aref %vk:p-next '(:struct %vk:base-out-structure)))) (cffi:mem-aref %vk:p-next (list :struct (find-symbol (string (vk:s-type base-out)) :%vk)))))
                   :per-view-attributes %vk:per-view-attributes
                   :per-view-attributes-position-x-only %vk:per-view-attributes-position-x-only)))

