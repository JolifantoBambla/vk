;;; this file is automatically generated, do not edit
#||
Copyright 2015-2021 The Khronos Group Inc.

SPDX-License-Identifier: Apache-2.0 OR MIT
||#

(in-package :vulkan)

;;; extension names
(alexandria:define-constant +amd-buffer-marker-extension-name+ "VK_AMD_buffer_marker"
  :test #'string=
  :documentation "The name of the extension [VK_AMD_buffer_marker](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_buffer_marker.html).")
(alexandria:define-constant +amd-device-coherent-memory-extension-name+ "VK_AMD_device_coherent_memory"
  :test #'string=
  :documentation "The name of the extension [VK_AMD_device_coherent_memory](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_device_coherent_memory.html).")
(alexandria:define-constant +amd-display-native-hdr-extension-name+ "VK_AMD_display_native_hdr"
  :test #'string=
  :documentation "The name of the extension [VK_AMD_display_native_hdr](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_display_native_hdr.html).")
(alexandria:define-constant +amd-draw-indirect-count-extension-name+ "VK_AMD_draw_indirect_count"
  :test #'string=
  :documentation "The name of the extension [VK_AMD_draw_indirect_count](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_draw_indirect_count.html).")
(alexandria:define-constant +amd-gcn-shader-extension-name+ "VK_AMD_gcn_shader"
  :test #'string=
  :documentation "The name of the extension [VK_AMD_gcn_shader](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_gcn_shader.html).")
(alexandria:define-constant +amd-gpu-shader-half-float-extension-name+ "VK_AMD_gpu_shader_half_float"
  :test #'string=
  :documentation "The name of the extension [VK_AMD_gpu_shader_half_float](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_gpu_shader_half_float.html).")
(alexandria:define-constant +amd-gpu-shader-int16-extension-name+ "VK_AMD_gpu_shader_int16"
  :test #'string=
  :documentation "The name of the extension [VK_AMD_gpu_shader_int16](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_gpu_shader_int16.html).")
(alexandria:define-constant +amd-memory-overallocation-behavior-extension-name+ "VK_AMD_memory_overallocation_behavior"
  :test #'string=
  :documentation "The name of the extension [VK_AMD_memory_overallocation_behavior](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_memory_overallocation_behavior.html).")
(alexandria:define-constant +amd-mixed-attachment-samples-extension-name+ "VK_AMD_mixed_attachment_samples"
  :test #'string=
  :documentation "The name of the extension [VK_AMD_mixed_attachment_samples](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_mixed_attachment_samples.html).")
(alexandria:define-constant +amd-negative-viewport-height-extension-name+ "VK_AMD_negative_viewport_height"
  :test #'string=
  :documentation "The name of the extension [VK_AMD_negative_viewport_height](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_negative_viewport_height.html).")
(alexandria:define-constant +amd-pipeline-compiler-control-extension-name+ "VK_AMD_pipeline_compiler_control"
  :test #'string=
  :documentation "The name of the extension [VK_AMD_pipeline_compiler_control](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_pipeline_compiler_control.html).")
(alexandria:define-constant +amd-rasterization-order-extension-name+ "VK_AMD_rasterization_order"
  :test #'string=
  :documentation "The name of the extension [VK_AMD_rasterization_order](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_rasterization_order.html).")
(alexandria:define-constant +amd-shader-ballot-extension-name+ "VK_AMD_shader_ballot"
  :test #'string=
  :documentation "The name of the extension [VK_AMD_shader_ballot](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_shader_ballot.html).")
(alexandria:define-constant +amd-shader-core-properties-2-extension-name+ "VK_AMD_shader_core_properties2"
  :test #'string=
  :documentation "The name of the extension [VK_AMD_shader_core_properties2](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_shader_core_properties2.html).")
(alexandria:define-constant +amd-shader-core-properties-extension-name+ "VK_AMD_shader_core_properties"
  :test #'string=
  :documentation "The name of the extension [VK_AMD_shader_core_properties](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_shader_core_properties.html).")
(alexandria:define-constant +amd-shader-explicit-vertex-parameter-extension-name+ "VK_AMD_shader_explicit_vertex_parameter"
  :test #'string=
  :documentation "The name of the extension [VK_AMD_shader_explicit_vertex_parameter](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_shader_explicit_vertex_parameter.html).")
(alexandria:define-constant +amd-shader-fragment-mask-extension-name+ "VK_AMD_shader_fragment_mask"
  :test #'string=
  :documentation "The name of the extension [VK_AMD_shader_fragment_mask](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_shader_fragment_mask.html).")
(alexandria:define-constant +amd-shader-image-load-store-lod-extension-name+ "VK_AMD_shader_image_load_store_lod"
  :test #'string=
  :documentation "The name of the extension [VK_AMD_shader_image_load_store_lod](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_shader_image_load_store_lod.html).")
(alexandria:define-constant +amd-shader-info-extension-name+ "VK_AMD_shader_info"
  :test #'string=
  :documentation "The name of the extension [VK_AMD_shader_info](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_shader_info.html).")
(alexandria:define-constant +amd-shader-trinary-minmax-extension-name+ "VK_AMD_shader_trinary_minmax"
  :test #'string=
  :documentation "The name of the extension [VK_AMD_shader_trinary_minmax](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_shader_trinary_minmax.html).")
(alexandria:define-constant +amd-texture-gather-bias-lod-extension-name+ "VK_AMD_texture_gather_bias_lod"
  :test #'string=
  :documentation "The name of the extension [VK_AMD_texture_gather_bias_lod](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_AMD_texture_gather_bias_lod.html).")
(alexandria:define-constant +android-external-memory-android-hardware-buffer-extension-name+ "VK_ANDROID_external_memory_android_hardware_buffer"
  :test #'string=
  :documentation "The name of the extension [VK_ANDROID_external_memory_android_hardware_buffer](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_ANDROID_external_memory_android_hardware_buffer.html).")
(alexandria:define-constant +ext-4444-formats-extension-name+ "VK_EXT_4444_formats"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_4444_formats](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_4444_formats.html).")
(alexandria:define-constant +ext-acquire-drm-display-extension-name+ "VK_EXT_acquire_drm_display"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_acquire_drm_display](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_acquire_drm_display.html).")
(alexandria:define-constant +ext-acquire-xlib-display-extension-name+ "VK_EXT_acquire_xlib_display"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_acquire_xlib_display](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_acquire_xlib_display.html).")
(alexandria:define-constant +ext-astc-decode-mode-extension-name+ "VK_EXT_astc_decode_mode"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_astc_decode_mode](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_astc_decode_mode.html).")
(alexandria:define-constant +ext-blend-operation-advanced-extension-name+ "VK_EXT_blend_operation_advanced"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_blend_operation_advanced](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_blend_operation_advanced.html).")
(alexandria:define-constant +ext-border-color-swizzle-extension-name+ "VK_EXT_border_color_swizzle"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_border_color_swizzle](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_border_color_swizzle.html).")
(alexandria:define-constant +ext-buffer-device-address-extension-name+ "VK_EXT_buffer_device_address"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_buffer_device_address](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_buffer_device_address.html).")
(alexandria:define-constant +ext-calibrated-timestamps-extension-name+ "VK_EXT_calibrated_timestamps"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_calibrated_timestamps](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_calibrated_timestamps.html).")
(alexandria:define-constant +ext-color-write-enable-extension-name+ "VK_EXT_color_write_enable"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_color_write_enable](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_color_write_enable.html).")
(alexandria:define-constant +ext-conditional-rendering-extension-name+ "VK_EXT_conditional_rendering"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_conditional_rendering](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_conditional_rendering.html).")
(alexandria:define-constant +ext-conservative-rasterization-extension-name+ "VK_EXT_conservative_rasterization"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_conservative_rasterization](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_conservative_rasterization.html).")
(alexandria:define-constant +ext-custom-border-color-extension-name+ "VK_EXT_custom_border_color"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_custom_border_color](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_custom_border_color.html).")
(alexandria:define-constant +ext-debug-marker-extension-name+ "VK_EXT_debug_marker"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_debug_marker](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_debug_marker.html).")
(alexandria:define-constant +ext-debug-report-extension-name+ "VK_EXT_debug_report"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_debug_report](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_debug_report.html).")
(alexandria:define-constant +ext-debug-utils-extension-name+ "VK_EXT_debug_utils"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_debug_utils](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_debug_utils.html).")
(alexandria:define-constant +ext-depth-clip-enable-extension-name+ "VK_EXT_depth_clip_enable"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_depth_clip_enable](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_depth_clip_enable.html).")
(alexandria:define-constant +ext-depth-range-unrestricted-extension-name+ "VK_EXT_depth_range_unrestricted"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_depth_range_unrestricted](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_depth_range_unrestricted.html).")
(alexandria:define-constant +ext-descriptor-indexing-extension-name+ "VK_EXT_descriptor_indexing"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_descriptor_indexing](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_descriptor_indexing.html).")
(alexandria:define-constant +ext-device-memory-report-extension-name+ "VK_EXT_device_memory_report"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_device_memory_report](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_device_memory_report.html).")
(alexandria:define-constant +ext-directfb-surface-extension-name+ "VK_EXT_directfb_surface"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_directfb_surface](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_directfb_surface.html).")
(alexandria:define-constant +ext-direct-mode-display-extension-name+ "VK_EXT_direct_mode_display"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_direct_mode_display](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_direct_mode_display.html).")
(alexandria:define-constant +ext-discard-rectangles-extension-name+ "VK_EXT_discard_rectangles"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_discard_rectangles](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_discard_rectangles.html).")
(alexandria:define-constant +ext-display-control-extension-name+ "VK_EXT_display_control"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_display_control](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_display_control.html).")
(alexandria:define-constant +ext-display-surface-counter-extension-name+ "VK_EXT_display_surface_counter"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_display_surface_counter](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_display_surface_counter.html).")
(alexandria:define-constant +ext-extended-dynamic-state-2-extension-name+ "VK_EXT_extended_dynamic_state2"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_extended_dynamic_state2](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_extended_dynamic_state2.html).")
(alexandria:define-constant +ext-extended-dynamic-state-extension-name+ "VK_EXT_extended_dynamic_state"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_extended_dynamic_state](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_extended_dynamic_state.html).")
(alexandria:define-constant +ext-external-memory-dma-buf-extension-name+ "VK_EXT_external_memory_dma_buf"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_external_memory_dma_buf](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_external_memory_dma_buf.html).")
(alexandria:define-constant +ext-external-memory-host-extension-name+ "VK_EXT_external_memory_host"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_external_memory_host](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_external_memory_host.html).")
(alexandria:define-constant +ext-filter-cubic-extension-name+ "VK_EXT_filter_cubic"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_filter_cubic](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_filter_cubic.html).")
(alexandria:define-constant +ext-fragment-density-map-2-extension-name+ "VK_EXT_fragment_density_map2"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_fragment_density_map2](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_fragment_density_map2.html).")
(alexandria:define-constant +ext-fragment-density-map-extension-name+ "VK_EXT_fragment_density_map"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_fragment_density_map](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_fragment_density_map.html).")
(alexandria:define-constant +ext-fragment-shader-interlock-extension-name+ "VK_EXT_fragment_shader_interlock"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_fragment_shader_interlock](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_fragment_shader_interlock.html).")
(alexandria:define-constant +ext-full-screen-exclusive-extension-name+ "VK_EXT_full_screen_exclusive"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_full_screen_exclusive](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_full_screen_exclusive.html).")
(alexandria:define-constant +ext-global-priority-extension-name+ "VK_EXT_global_priority"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_global_priority](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_global_priority.html).")
(alexandria:define-constant +ext-global-priority-query-extension-name+ "VK_EXT_global_priority_query"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_global_priority_query](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_global_priority_query.html).")
(alexandria:define-constant +ext-hdr-metadata-extension-name+ "VK_EXT_hdr_metadata"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_hdr_metadata](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_hdr_metadata.html).")
(alexandria:define-constant +ext-headless-surface-extension-name+ "VK_EXT_headless_surface"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_headless_surface](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_headless_surface.html).")
(alexandria:define-constant +ext-host-query-reset-extension-name+ "VK_EXT_host_query_reset"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_host_query_reset](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_host_query_reset.html).")
(alexandria:define-constant +ext-image-drm-format-modifier-extension-name+ "VK_EXT_image_drm_format_modifier"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_image_drm_format_modifier](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_image_drm_format_modifier.html).")
(alexandria:define-constant +ext-image-robustness-extension-name+ "VK_EXT_image_robustness"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_image_robustness](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_image_robustness.html).")
(alexandria:define-constant +ext-index-type-uint8-extension-name+ "VK_EXT_index_type_uint8"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_index_type_uint8](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_index_type_uint8.html).")
(alexandria:define-constant +ext-inline-uniform-block-extension-name+ "VK_EXT_inline_uniform_block"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_inline_uniform_block](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_inline_uniform_block.html).")
(alexandria:define-constant +ext-line-rasterization-extension-name+ "VK_EXT_line_rasterization"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_line_rasterization](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_line_rasterization.html).")
(alexandria:define-constant +ext-load-store-op-none-extension-name+ "VK_EXT_load_store_op_none"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_load_store_op_none](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_load_store_op_none.html).")
(alexandria:define-constant +ext-memory-budget-extension-name+ "VK_EXT_memory_budget"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_memory_budget](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_memory_budget.html).")
(alexandria:define-constant +ext-memory-priority-extension-name+ "VK_EXT_memory_priority"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_memory_priority](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_memory_priority.html).")
(alexandria:define-constant +ext-metal-surface-extension-name+ "VK_EXT_metal_surface"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_metal_surface](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_metal_surface.html).")
(alexandria:define-constant +ext-multi-draw-extension-name+ "VK_EXT_multi_draw"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_multi_draw](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_multi_draw.html).")
(alexandria:define-constant +ext-pageable-device-local-memory-extension-name+ "VK_EXT_pageable_device_local_memory"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_pageable_device_local_memory](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_pageable_device_local_memory.html).")
(alexandria:define-constant +ext-pci-bus-info-extension-name+ "VK_EXT_pci_bus_info"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_pci_bus_info](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_pci_bus_info.html).")
(alexandria:define-constant +ext-physical-device-drm-extension-name+ "VK_EXT_physical_device_drm"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_physical_device_drm](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_physical_device_drm.html).")
(alexandria:define-constant +ext-pipeline-creation-cache-control-extension-name+ "VK_EXT_pipeline_creation_cache_control"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_pipeline_creation_cache_control](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_pipeline_creation_cache_control.html).")
(alexandria:define-constant +ext-pipeline-creation-feedback-extension-name+ "VK_EXT_pipeline_creation_feedback"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_pipeline_creation_feedback](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_pipeline_creation_feedback.html).")
(alexandria:define-constant +ext-post-depth-coverage-extension-name+ "VK_EXT_post_depth_coverage"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_post_depth_coverage](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_post_depth_coverage.html).")
(alexandria:define-constant +ext-primitive-topology-list-restart-extension-name+ "VK_EXT_primitive_topology_list_restart"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_primitive_topology_list_restart](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_primitive_topology_list_restart.html).")
(alexandria:define-constant +ext-private-data-extension-name+ "VK_EXT_private_data"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_private_data](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_private_data.html).")
(alexandria:define-constant +ext-provoking-vertex-extension-name+ "VK_EXT_provoking_vertex"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_provoking_vertex](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_provoking_vertex.html).")
(alexandria:define-constant +ext-queue-family-foreign-extension-name+ "VK_EXT_queue_family_foreign"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_queue_family_foreign](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_queue_family_foreign.html).")
(alexandria:define-constant +ext-rgba10x6-formats-extension-name+ "VK_EXT_rgba10x6_formats"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_rgba10x6_formats](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_rgba10x6_formats.html).")
(alexandria:define-constant +ext-robustness-2-extension-name+ "VK_EXT_robustness2"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_robustness2](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_robustness2.html).")
(alexandria:define-constant +ext-sampler-filter-minmax-extension-name+ "VK_EXT_sampler_filter_minmax"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_sampler_filter_minmax](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_sampler_filter_minmax.html).")
(alexandria:define-constant +ext-sample-locations-extension-name+ "VK_EXT_sample_locations"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_sample_locations](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_sample_locations.html).")
(alexandria:define-constant +ext-scalar-block-layout-extension-name+ "VK_EXT_scalar_block_layout"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_scalar_block_layout](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_scalar_block_layout.html).")
(alexandria:define-constant +ext-separate-stencil-usage-extension-name+ "VK_EXT_separate_stencil_usage"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_separate_stencil_usage](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_separate_stencil_usage.html).")
(alexandria:define-constant +ext-shader-atomic-float-2-extension-name+ "VK_EXT_shader_atomic_float2"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_shader_atomic_float2](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_shader_atomic_float2.html).")
(alexandria:define-constant +ext-shader-atomic-float-extension-name+ "VK_EXT_shader_atomic_float"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_shader_atomic_float](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_shader_atomic_float.html).")
(alexandria:define-constant +ext-shader-demote-to-helper-invocation-extension-name+ "VK_EXT_shader_demote_to_helper_invocation"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_shader_demote_to_helper_invocation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_shader_demote_to_helper_invocation.html).")
(alexandria:define-constant +ext-shader-image-atomic-int64-extension-name+ "VK_EXT_shader_image_atomic_int64"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_shader_image_atomic_int64](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_shader_image_atomic_int64.html).")
(alexandria:define-constant +ext-shader-stencil-export-extension-name+ "VK_EXT_shader_stencil_export"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_shader_stencil_export](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_shader_stencil_export.html).")
(alexandria:define-constant +ext-shader-subgroup-ballot-extension-name+ "VK_EXT_shader_subgroup_ballot"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_shader_subgroup_ballot](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_shader_subgroup_ballot.html).")
(alexandria:define-constant +ext-shader-subgroup-vote-extension-name+ "VK_EXT_shader_subgroup_vote"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_shader_subgroup_vote](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_shader_subgroup_vote.html).")
(alexandria:define-constant +ext-shader-viewport-index-layer-extension-name+ "VK_EXT_shader_viewport_index_layer"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_shader_viewport_index_layer](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_shader_viewport_index_layer.html).")
(alexandria:define-constant +ext-subgroup-size-control-extension-name+ "VK_EXT_subgroup_size_control"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_subgroup_size_control](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_subgroup_size_control.html).")
(alexandria:define-constant +ext-swapchain-color-space-extension-name+ "VK_EXT_swapchain_colorspace"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_swapchain_colorspace](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_swapchain_colorspace.html).")
(alexandria:define-constant +ext-texel-buffer-alignment-extension-name+ "VK_EXT_texel_buffer_alignment"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_texel_buffer_alignment](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_texel_buffer_alignment.html).")
(alexandria:define-constant +ext-texture-compression-astc-hdr-extension-name+ "VK_EXT_texture_compression_astc_hdr"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_texture_compression_astc_hdr](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_texture_compression_astc_hdr.html).")
(alexandria:define-constant +ext-tooling-info-extension-name+ "VK_EXT_tooling_info"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_tooling_info](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_tooling_info.html).")
(alexandria:define-constant +ext-transform-feedback-extension-name+ "VK_EXT_transform_feedback"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_transform_feedback](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_transform_feedback.html).")
(alexandria:define-constant +ext-validation-cache-extension-name+ "VK_EXT_validation_cache"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_validation_cache](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_validation_cache.html).")
(alexandria:define-constant +ext-validation-features-extension-name+ "VK_EXT_validation_features"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_validation_features](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_validation_features.html).")
(alexandria:define-constant +ext-validation-flags-extension-name+ "VK_EXT_validation_flags"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_validation_flags](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_validation_flags.html).")
(alexandria:define-constant +ext-vertex-attribute-divisor-extension-name+ "VK_EXT_vertex_attribute_divisor"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_vertex_attribute_divisor](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_vertex_attribute_divisor.html).")
(alexandria:define-constant +ext-vertex-input-dynamic-state-extension-name+ "VK_EXT_vertex_input_dynamic_state"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_vertex_input_dynamic_state](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_vertex_input_dynamic_state.html).")
(alexandria:define-constant +ext-video-decode-h264-extension-name+ "VK_EXT_video_decode_h264"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_video_decode_h264](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_video_decode_h264.html).")
(alexandria:define-constant +ext-video-decode-h265-extension-name+ "VK_EXT_video_decode_h265"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_video_decode_h265](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_video_decode_h265.html).")
(alexandria:define-constant +ext-video-encode-h264-extension-name+ "VK_EXT_video_encode_h264"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_video_encode_h264](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_video_encode_h264.html).")
(alexandria:define-constant +ext-video-encode-h265-extension-name+ "VK_EXT_video_encode_h265"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_video_encode_h265](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_video_encode_h265.html).")
(alexandria:define-constant +ext-ycbcr-2plane-444-formats-extension-name+ "VK_EXT_ycbcr_2plane_444_formats"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_ycbcr_2plane_444_formats](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_ycbcr_2plane_444_formats.html).")
(alexandria:define-constant +ext-ycbcr-image-arrays-extension-name+ "VK_EXT_ycbcr_image_arrays"
  :test #'string=
  :documentation "The name of the extension [VK_EXT_ycbcr_image_arrays](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_EXT_ycbcr_image_arrays.html).")
(alexandria:define-constant +fuchsia-buffer-collection-extension-name+ "VK_FUCHSIA_buffer_collection"
  :test #'string=
  :documentation "The name of the extension [VK_FUCHSIA_buffer_collection](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_FUCHSIA_buffer_collection.html).")
(alexandria:define-constant +fuchsia-external-memory-extension-name+ "VK_FUCHSIA_external_memory"
  :test #'string=
  :documentation "The name of the extension [VK_FUCHSIA_external_memory](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_FUCHSIA_external_memory.html).")
(alexandria:define-constant +fuchsia-external-semaphore-extension-name+ "VK_FUCHSIA_external_semaphore"
  :test #'string=
  :documentation "The name of the extension [VK_FUCHSIA_external_semaphore](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_FUCHSIA_external_semaphore.html).")
(alexandria:define-constant +fuchsia-imagepipe-surface-extension-name+ "VK_FUCHSIA_imagepipe_surface"
  :test #'string=
  :documentation "The name of the extension [VK_FUCHSIA_imagepipe_surface](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_FUCHSIA_imagepipe_surface.html).")
(alexandria:define-constant +ggp-frame-token-extension-name+ "VK_GGP_frame_token"
  :test #'string=
  :documentation "The name of the extension [VK_GGP_frame_token](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_GGP_frame_token.html).")
(alexandria:define-constant +ggp-stream-descriptor-surface-extension-name+ "VK_GGP_stream_descriptor_surface"
  :test #'string=
  :documentation "The name of the extension [VK_GGP_stream_descriptor_surface](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_GGP_stream_descriptor_surface.html).")
(alexandria:define-constant +google-decorate-string-extension-name+ "VK_GOOGLE_decorate_string"
  :test #'string=
  :documentation "The name of the extension [VK_GOOGLE_decorate_string](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_GOOGLE_decorate_string.html).")
(alexandria:define-constant +google-display-timing-extension-name+ "VK_GOOGLE_display_timing"
  :test #'string=
  :documentation "The name of the extension [VK_GOOGLE_display_timing](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_GOOGLE_display_timing.html).")
(alexandria:define-constant +google-hlsl-functionality-1-extension-name+ "VK_GOOGLE_hlsl_functionality1"
  :test #'string=
  :documentation "The name of the extension [VK_GOOGLE_hlsl_functionality1](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_GOOGLE_hlsl_functionality1.html).")
(alexandria:define-constant +google-user-type-extension-name+ "VK_GOOGLE_user_type"
  :test #'string=
  :documentation "The name of the extension [VK_GOOGLE_user_type](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_GOOGLE_user_type.html).")
(alexandria:define-constant +huawei-invocation-mask-extension-name+ "VK_HUAWEI_invocation_mask"
  :test #'string=
  :documentation "The name of the extension [VK_HUAWEI_invocation_mask](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_HUAWEI_invocation_mask.html).")
(alexandria:define-constant +huawei-subpass-shading-extension-name+ "VK_HUAWEI_subpass_shading"
  :test #'string=
  :documentation "The name of the extension [VK_HUAWEI_subpass_shading](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_HUAWEI_subpass_shading.html).")
(alexandria:define-constant +img-filter-cubic-extension-name+ "VK_IMG_filter_cubic"
  :test #'string=
  :documentation "The name of the extension [VK_IMG_filter_cubic](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_IMG_filter_cubic.html).")
(alexandria:define-constant +img-format-pvrtc-extension-name+ "VK_IMG_format_pvrtc"
  :test #'string=
  :documentation "The name of the extension [VK_IMG_format_pvrtc](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_IMG_format_pvrtc.html).")
(alexandria:define-constant +intel-performance-query-extension-name+ "VK_INTEL_performance_query"
  :test #'string=
  :documentation "The name of the extension [VK_INTEL_performance_query](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_INTEL_performance_query.html).")
(alexandria:define-constant +intel-shader-integer-functions-2-extension-name+ "VK_INTEL_shader_integer_functions2"
  :test #'string=
  :documentation "The name of the extension [VK_INTEL_shader_integer_functions2](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_INTEL_shader_integer_functions2.html).")
(alexandria:define-constant +khr-16bit-storage-extension-name+ "VK_KHR_16bit_storage"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_16bit_storage](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_16bit_storage.html).")
(alexandria:define-constant +khr-8bit-storage-extension-name+ "VK_KHR_8bit_storage"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_8bit_storage](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_8bit_storage.html).")
(alexandria:define-constant +khr-acceleration-structure-extension-name+ "VK_KHR_acceleration_structure"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_acceleration_structure](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_acceleration_structure.html).")
(alexandria:define-constant +khr-android-surface-extension-name+ "VK_KHR_android_surface"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_android_surface](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_android_surface.html).")
(alexandria:define-constant +khr-bind-memory-2-extension-name+ "VK_KHR_bind_memory2"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_bind_memory2](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_bind_memory2.html).")
(alexandria:define-constant +khr-buffer-device-address-extension-name+ "VK_KHR_buffer_device_address"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_buffer_device_address](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_buffer_device_address.html).")
(alexandria:define-constant +khr-copy-commands-2-extension-name+ "VK_KHR_copy_commands2"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_copy_commands2](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_copy_commands2.html).")
(alexandria:define-constant +khr-create-renderpass-2-extension-name+ "VK_KHR_create_renderpass2"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_create_renderpass2](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_create_renderpass2.html).")
(alexandria:define-constant +khr-dedicated-allocation-extension-name+ "VK_KHR_dedicated_allocation"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_dedicated_allocation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_dedicated_allocation.html).")
(alexandria:define-constant +khr-deferred-host-operations-extension-name+ "VK_KHR_deferred_host_operations"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_deferred_host_operations](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_deferred_host_operations.html).")
(alexandria:define-constant +khr-depth-stencil-resolve-extension-name+ "VK_KHR_depth_stencil_resolve"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_depth_stencil_resolve](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_depth_stencil_resolve.html).")
(alexandria:define-constant +khr-descriptor-update-template-extension-name+ "VK_KHR_descriptor_update_template"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_descriptor_update_template](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_descriptor_update_template.html).")
(alexandria:define-constant +khr-device-group-creation-extension-name+ "VK_KHR_device_group_creation"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_device_group_creation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_device_group_creation.html).")
(alexandria:define-constant +khr-device-group-extension-name+ "VK_KHR_device_group"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_device_group](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_device_group.html).")
(alexandria:define-constant +khr-display-extension-name+ "VK_KHR_display"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_display](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_display.html).")
(alexandria:define-constant +khr-display-swapchain-extension-name+ "VK_KHR_display_swapchain"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_display_swapchain](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_display_swapchain.html).")
(alexandria:define-constant +khr-draw-indirect-count-extension-name+ "VK_KHR_draw_indirect_count"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_draw_indirect_count](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_draw_indirect_count.html).")
(alexandria:define-constant +khr-driver-properties-extension-name+ "VK_KHR_driver_properties"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_driver_properties](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_driver_properties.html).")
(alexandria:define-constant +khr-dynamic-rendering-extension-name+ "VK_KHR_dynamic_rendering"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_dynamic_rendering](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_dynamic_rendering.html).")
(alexandria:define-constant +khr-external-fence-capabilities-extension-name+ "VK_KHR_external_fence_capabilities"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_external_fence_capabilities](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_external_fence_capabilities.html).")
(alexandria:define-constant +khr-external-fence-extension-name+ "VK_KHR_external_fence"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_external_fence](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_external_fence.html).")
(alexandria:define-constant +khr-external-fence-fd-extension-name+ "VK_KHR_external_fence_fd"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_external_fence_fd](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_external_fence_fd.html).")
(alexandria:define-constant +khr-external-fence-win32-extension-name+ "VK_KHR_external_fence_win32"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_external_fence_win32](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_external_fence_win32.html).")
(alexandria:define-constant +khr-external-memory-capabilities-extension-name+ "VK_KHR_external_memory_capabilities"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_external_memory_capabilities](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_external_memory_capabilities.html).")
(alexandria:define-constant +khr-external-memory-extension-name+ "VK_KHR_external_memory"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_external_memory](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_external_memory.html).")
(alexandria:define-constant +khr-external-memory-fd-extension-name+ "VK_KHR_external_memory_fd"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_external_memory_fd](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_external_memory_fd.html).")
(alexandria:define-constant +khr-external-memory-win32-extension-name+ "VK_KHR_external_memory_win32"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_external_memory_win32](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_external_memory_win32.html).")
(alexandria:define-constant +khr-external-semaphore-capabilities-extension-name+ "VK_KHR_external_semaphore_capabilities"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_external_semaphore_capabilities](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_external_semaphore_capabilities.html).")
(alexandria:define-constant +khr-external-semaphore-extension-name+ "VK_KHR_external_semaphore"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_external_semaphore](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_external_semaphore.html).")
(alexandria:define-constant +khr-external-semaphore-fd-extension-name+ "VK_KHR_external_semaphore_fd"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_external_semaphore_fd](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_external_semaphore_fd.html).")
(alexandria:define-constant +khr-external-semaphore-win32-extension-name+ "VK_KHR_external_semaphore_win32"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_external_semaphore_win32](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_external_semaphore_win32.html).")
(alexandria:define-constant +khr-format-feature-flags-2-extension-name+ "VK_KHR_format_feature_flags2"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_format_feature_flags2](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_format_feature_flags2.html).")
(alexandria:define-constant +khr-fragment-shading-rate-extension-name+ "VK_KHR_fragment_shading_rate"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_fragment_shading_rate](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_fragment_shading_rate.html).")
(alexandria:define-constant +khr-get-display-properties-2-extension-name+ "VK_KHR_get_display_properties2"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_get_display_properties2](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_get_display_properties2.html).")
(alexandria:define-constant +khr-get-memory-requirements-2-extension-name+ "VK_KHR_get_memory_requirements2"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_get_memory_requirements2](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_get_memory_requirements2.html).")
(alexandria:define-constant +khr-get-physical-device-properties-2-extension-name+ "VK_KHR_get_physical_device_properties2"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_get_physical_device_properties2](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_get_physical_device_properties2.html).")
(alexandria:define-constant +khr-get-surface-capabilities-2-extension-name+ "VK_KHR_get_surface_capabilities2"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_get_surface_capabilities2](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_get_surface_capabilities2.html).")
(alexandria:define-constant +khr-imageless-framebuffer-extension-name+ "VK_KHR_imageless_framebuffer"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_imageless_framebuffer](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_imageless_framebuffer.html).")
(alexandria:define-constant +khr-image-format-list-extension-name+ "VK_KHR_image_format_list"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_image_format_list](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_image_format_list.html).")
(alexandria:define-constant +khr-incremental-present-extension-name+ "VK_KHR_incremental_present"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_incremental_present](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_incremental_present.html).")
(alexandria:define-constant +khr-maintenance-1-extension-name+ "VK_KHR_maintenance1"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_maintenance1](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_maintenance1.html).")
(alexandria:define-constant +khr-maintenance-2-extension-name+ "VK_KHR_maintenance2"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_maintenance2](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_maintenance2.html).")
(alexandria:define-constant +khr-maintenance-3-extension-name+ "VK_KHR_maintenance3"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_maintenance3](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_maintenance3.html).")
(alexandria:define-constant +khr-maintenance-4-extension-name+ "VK_KHR_maintenance4"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_maintenance4](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_maintenance4.html).")
(alexandria:define-constant +khr-multiview-extension-name+ "VK_KHR_multiview"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_multiview](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_multiview.html).")
(alexandria:define-constant +khr-performance-query-extension-name+ "VK_KHR_performance_query"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_performance_query](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_performance_query.html).")
(alexandria:define-constant +khr-pipeline-executable-properties-extension-name+ "VK_KHR_pipeline_executable_properties"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_pipeline_executable_properties](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_pipeline_executable_properties.html).")
(alexandria:define-constant +khr-pipeline-library-extension-name+ "VK_KHR_pipeline_library"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_pipeline_library](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_pipeline_library.html).")
(alexandria:define-constant +khr-portability-subset-extension-name+ "VK_KHR_portability_subset"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_portability_subset](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_portability_subset.html).")
(alexandria:define-constant +khr-present-id-extension-name+ "VK_KHR_present_id"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_present_id](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_present_id.html).")
(alexandria:define-constant +khr-present-wait-extension-name+ "VK_KHR_present_wait"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_present_wait](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_present_wait.html).")
(alexandria:define-constant +khr-push-descriptor-extension-name+ "VK_KHR_push_descriptor"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_push_descriptor](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_push_descriptor.html).")
(alexandria:define-constant +khr-ray-query-extension-name+ "VK_KHR_ray_query"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_ray_query](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_ray_query.html).")
(alexandria:define-constant +khr-ray-tracing-pipeline-extension-name+ "VK_KHR_ray_tracing_pipeline"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_ray_tracing_pipeline](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_ray_tracing_pipeline.html).")
(alexandria:define-constant +khr-relaxed-block-layout-extension-name+ "VK_KHR_relaxed_block_layout"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_relaxed_block_layout](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_relaxed_block_layout.html).")
(alexandria:define-constant +khr-sampler-mirror-clamp-to-edge-extension-name+ "VK_KHR_sampler_mirror_clamp_to_edge"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_sampler_mirror_clamp_to_edge](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_sampler_mirror_clamp_to_edge.html).")
(alexandria:define-constant +khr-sampler-ycbcr-conversion-extension-name+ "VK_KHR_sampler_ycbcr_conversion"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_sampler_ycbcr_conversion](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_sampler_ycbcr_conversion.html).")
(alexandria:define-constant +khr-separate-depth-stencil-layouts-extension-name+ "VK_KHR_separate_depth_stencil_layouts"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_separate_depth_stencil_layouts](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_separate_depth_stencil_layouts.html).")
(alexandria:define-constant +khr-shader-atomic-int64-extension-name+ "VK_KHR_shader_atomic_int64"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_shader_atomic_int64](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_shader_atomic_int64.html).")
(alexandria:define-constant +khr-shader-clock-extension-name+ "VK_KHR_shader_clock"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_shader_clock](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_shader_clock.html).")
(alexandria:define-constant +khr-shader-draw-parameters-extension-name+ "VK_KHR_shader_draw_parameters"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_shader_draw_parameters](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_shader_draw_parameters.html).")
(alexandria:define-constant +khr-shader-float16-int8-extension-name+ "VK_KHR_shader_float16_int8"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_shader_float16_int8](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_shader_float16_int8.html).")
(alexandria:define-constant +khr-shader-float-controls-extension-name+ "VK_KHR_shader_float_controls"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_shader_float_controls](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_shader_float_controls.html).")
(alexandria:define-constant +khr-shader-integer-dot-product-extension-name+ "VK_KHR_shader_integer_dot_product"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_shader_integer_dot_product](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_shader_integer_dot_product.html).")
(alexandria:define-constant +khr-shader-non-semantic-info-extension-name+ "VK_KHR_shader_non_semantic_info"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_shader_non_semantic_info](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_shader_non_semantic_info.html).")
(alexandria:define-constant +khr-shader-subgroup-extended-types-extension-name+ "VK_KHR_shader_subgroup_extended_types"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_shader_subgroup_extended_types](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_shader_subgroup_extended_types.html).")
(alexandria:define-constant +khr-shader-subgroup-uniform-control-flow-extension-name+ "VK_KHR_shader_subgroup_uniform_control_flow"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_shader_subgroup_uniform_control_flow](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_shader_subgroup_uniform_control_flow.html).")
(alexandria:define-constant +khr-shader-terminate-invocation-extension-name+ "VK_KHR_shader_terminate_invocation"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_shader_terminate_invocation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_shader_terminate_invocation.html).")
(alexandria:define-constant +khr-shared-presentable-image-extension-name+ "VK_KHR_shared_presentable_image"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_shared_presentable_image](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_shared_presentable_image.html).")
(alexandria:define-constant +khr-spirv-1-4-extension-name+ "VK_KHR_spirv_1_4"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_spirv_1_4](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_spirv_1_4.html).")
(alexandria:define-constant +khr-storage-buffer-storage-class-extension-name+ "VK_KHR_storage_buffer_storage_class"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_storage_buffer_storage_class](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_storage_buffer_storage_class.html).")
(alexandria:define-constant +khr-surface-extension-name+ "VK_KHR_surface"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_surface](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_surface.html).")
(alexandria:define-constant +khr-surface-protected-capabilities-extension-name+ "VK_KHR_surface_protected_capabilities"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_surface_protected_capabilities](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_surface_protected_capabilities.html).")
(alexandria:define-constant +khr-swapchain-extension-name+ "VK_KHR_swapchain"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_swapchain](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_swapchain.html).")
(alexandria:define-constant +khr-swapchain-mutable-format-extension-name+ "VK_KHR_swapchain_mutable_format"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_swapchain_mutable_format](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_swapchain_mutable_format.html).")
(alexandria:define-constant +khr-synchronization-2-extension-name+ "VK_KHR_synchronization2"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_synchronization2](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_synchronization2.html).")
(alexandria:define-constant +khr-timeline-semaphore-extension-name+ "VK_KHR_timeline_semaphore"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_timeline_semaphore](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_timeline_semaphore.html).")
(alexandria:define-constant +khr-uniform-buffer-standard-layout-extension-name+ "VK_KHR_uniform_buffer_standard_layout"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_uniform_buffer_standard_layout](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_uniform_buffer_standard_layout.html).")
(alexandria:define-constant +khr-variable-pointers-extension-name+ "VK_KHR_variable_pointers"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_variable_pointers](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_variable_pointers.html).")
(alexandria:define-constant +khr-video-decode-queue-extension-name+ "VK_KHR_video_decode_queue"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_video_decode_queue](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_video_decode_queue.html).")
(alexandria:define-constant +khr-video-encode-queue-extension-name+ "VK_KHR_video_encode_queue"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_video_encode_queue](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_video_encode_queue.html).")
(alexandria:define-constant +khr-video-queue-extension-name+ "VK_KHR_video_queue"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_video_queue](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_video_queue.html).")
(alexandria:define-constant +khr-vulkan-memory-model-extension-name+ "VK_KHR_vulkan_memory_model"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_vulkan_memory_model](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_vulkan_memory_model.html).")
(alexandria:define-constant +khr-wayland-surface-extension-name+ "VK_KHR_wayland_surface"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_wayland_surface](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_wayland_surface.html).")
(alexandria:define-constant +khr-win32-keyed-mutex-extension-name+ "VK_KHR_win32_keyed_mutex"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_win32_keyed_mutex](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_win32_keyed_mutex.html).")
(alexandria:define-constant +khr-win32-surface-extension-name+ "VK_KHR_win32_surface"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_win32_surface](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_win32_surface.html).")
(alexandria:define-constant +khr-workgroup-memory-explicit-layout-extension-name+ "VK_KHR_workgroup_memory_explicit_layout"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_workgroup_memory_explicit_layout](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_workgroup_memory_explicit_layout.html).")
(alexandria:define-constant +khr-xcb-surface-extension-name+ "VK_KHR_xcb_surface"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_xcb_surface](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_xcb_surface.html).")
(alexandria:define-constant +khr-xlib-surface-extension-name+ "VK_KHR_xlib_surface"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_xlib_surface](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_xlib_surface.html).")
(alexandria:define-constant +khr-zero-initialize-workgroup-memory-extension-name+ "VK_KHR_zero_initialize_workgroup_memory"
  :test #'string=
  :documentation "The name of the extension [VK_KHR_zero_initialize_workgroup_memory](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_KHR_zero_initialize_workgroup_memory.html).")
(alexandria:define-constant +mvk-ios-surface-extension-name+ "VK_MVK_ios_surface"
  :test #'string=
  :documentation "The name of the extension [VK_MVK_ios_surface](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_MVK_ios_surface.html).")
(alexandria:define-constant +mvk-macos-surface-extension-name+ "VK_MVK_macos_surface"
  :test #'string=
  :documentation "The name of the extension [VK_MVK_macos_surface](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_MVK_macos_surface.html).")
(alexandria:define-constant +nn-vi-surface-extension-name+ "VK_NN_vi_surface"
  :test #'string=
  :documentation "The name of the extension [VK_NN_vi_surface](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NN_vi_surface.html).")
(alexandria:define-constant +nvx-binary-import-extension-name+ "VK_NVX_binary_import"
  :test #'string=
  :documentation "The name of the extension [VK_NVX_binary_import](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NVX_binary_import.html).")
(alexandria:define-constant +nvx-image-view-handle-extension-name+ "VK_NVX_image_view_handle"
  :test #'string=
  :documentation "The name of the extension [VK_NVX_image_view_handle](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NVX_image_view_handle.html).")
(alexandria:define-constant +nvx-multiview-per-view-attributes-extension-name+ "VK_NVX_multiview_per_view_attributes"
  :test #'string=
  :documentation "The name of the extension [VK_NVX_multiview_per_view_attributes](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NVX_multiview_per_view_attributes.html).")
(alexandria:define-constant +nv-acquire-winrt-display-extension-name+ "VK_NV_acquire_winrt_display"
  :test #'string=
  :documentation "The name of the extension [VK_NV_acquire_winrt_display](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_acquire_winrt_display.html).")
(alexandria:define-constant +nv-clip-space-w-scaling-extension-name+ "VK_NV_clip_space_w_scaling"
  :test #'string=
  :documentation "The name of the extension [VK_NV_clip_space_w_scaling](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_clip_space_w_scaling.html).")
(alexandria:define-constant +nv-compute-shader-derivatives-extension-name+ "VK_NV_compute_shader_derivatives"
  :test #'string=
  :documentation "The name of the extension [VK_NV_compute_shader_derivatives](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_compute_shader_derivatives.html).")
(alexandria:define-constant +nv-cooperative-matrix-extension-name+ "VK_NV_cooperative_matrix"
  :test #'string=
  :documentation "The name of the extension [VK_NV_cooperative_matrix](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_cooperative_matrix.html).")
(alexandria:define-constant +nv-corner-sampled-image-extension-name+ "VK_NV_corner_sampled_image"
  :test #'string=
  :documentation "The name of the extension [VK_NV_corner_sampled_image](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_corner_sampled_image.html).")
(alexandria:define-constant +nv-coverage-reduction-mode-extension-name+ "VK_NV_coverage_reduction_mode"
  :test #'string=
  :documentation "The name of the extension [VK_NV_coverage_reduction_mode](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_coverage_reduction_mode.html).")
(alexandria:define-constant +nv-dedicated-allocation-extension-name+ "VK_NV_dedicated_allocation"
  :test #'string=
  :documentation "The name of the extension [VK_NV_dedicated_allocation](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_dedicated_allocation.html).")
(alexandria:define-constant +nv-dedicated-allocation-image-aliasing-extension-name+ "VK_NV_dedicated_allocation_image_aliasing"
  :test #'string=
  :documentation "The name of the extension [VK_NV_dedicated_allocation_image_aliasing](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_dedicated_allocation_image_aliasing.html).")
(alexandria:define-constant +nv-device-diagnostics-config-extension-name+ "VK_NV_device_diagnostics_config"
  :test #'string=
  :documentation "The name of the extension [VK_NV_device_diagnostics_config](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_device_diagnostics_config.html).")
(alexandria:define-constant +nv-device-diagnostic-checkpoints-extension-name+ "VK_NV_device_diagnostic_checkpoints"
  :test #'string=
  :documentation "The name of the extension [VK_NV_device_diagnostic_checkpoints](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_device_diagnostic_checkpoints.html).")
(alexandria:define-constant +nv-device-generated-commands-extension-name+ "VK_NV_device_generated_commands"
  :test #'string=
  :documentation "The name of the extension [VK_NV_device_generated_commands](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_device_generated_commands.html).")
(alexandria:define-constant +nv-external-memory-capabilities-extension-name+ "VK_NV_external_memory_capabilities"
  :test #'string=
  :documentation "The name of the extension [VK_NV_external_memory_capabilities](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_external_memory_capabilities.html).")
(alexandria:define-constant +nv-external-memory-extension-name+ "VK_NV_external_memory"
  :test #'string=
  :documentation "The name of the extension [VK_NV_external_memory](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_external_memory.html).")
(alexandria:define-constant +nv-external-memory-rdma-extension-name+ "VK_NV_external_memory_rdma"
  :test #'string=
  :documentation "The name of the extension [VK_NV_external_memory_rdma](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_external_memory_rdma.html).")
(alexandria:define-constant +nv-external-memory-win32-extension-name+ "VK_NV_external_memory_win32"
  :test #'string=
  :documentation "The name of the extension [VK_NV_external_memory_win32](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_external_memory_win32.html).")
(alexandria:define-constant +nv-fill-rectangle-extension-name+ "VK_NV_fill_rectangle"
  :test #'string=
  :documentation "The name of the extension [VK_NV_fill_rectangle](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_fill_rectangle.html).")
(alexandria:define-constant +nv-fragment-coverage-to-color-extension-name+ "VK_NV_fragment_coverage_to_color"
  :test #'string=
  :documentation "The name of the extension [VK_NV_fragment_coverage_to_color](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_fragment_coverage_to_color.html).")
(alexandria:define-constant +nv-fragment-shader-barycentric-extension-name+ "VK_NV_fragment_shader_barycentric"
  :test #'string=
  :documentation "The name of the extension [VK_NV_fragment_shader_barycentric](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_fragment_shader_barycentric.html).")
(alexandria:define-constant +nv-fragment-shading-rate-enums-extension-name+ "VK_NV_fragment_shading_rate_enums"
  :test #'string=
  :documentation "The name of the extension [VK_NV_fragment_shading_rate_enums](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_fragment_shading_rate_enums.html).")
(alexandria:define-constant +nv-framebuffer-mixed-samples-extension-name+ "VK_NV_framebuffer_mixed_samples"
  :test #'string=
  :documentation "The name of the extension [VK_NV_framebuffer_mixed_samples](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_framebuffer_mixed_samples.html).")
(alexandria:define-constant +nv-geometry-shader-passthrough-extension-name+ "VK_NV_geometry_shader_passthrough"
  :test #'string=
  :documentation "The name of the extension [VK_NV_geometry_shader_passthrough](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_geometry_shader_passthrough.html).")
(alexandria:define-constant +nv-glsl-shader-extension-name+ "VK_NV_glsl_shader"
  :test #'string=
  :documentation "The name of the extension [VK_NV_glsl_shader](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_glsl_shader.html).")
(alexandria:define-constant +nv-inherited-viewport-scissor-extension-name+ "VK_NV_inherited_viewport_scissor"
  :test #'string=
  :documentation "The name of the extension [VK_NV_inherited_viewport_scissor](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_inherited_viewport_scissor.html).")
(alexandria:define-constant +nv-mesh-shader-extension-name+ "VK_NV_mesh_shader"
  :test #'string=
  :documentation "The name of the extension [VK_NV_mesh_shader](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_mesh_shader.html).")
(alexandria:define-constant +nv-ray-tracing-extension-name+ "VK_NV_ray_tracing"
  :test #'string=
  :documentation "The name of the extension [VK_NV_ray_tracing](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_ray_tracing.html).")
(alexandria:define-constant +nv-ray-tracing-motion-blur-extension-name+ "VK_NV_ray_tracing_motion_blur"
  :test #'string=
  :documentation "The name of the extension [VK_NV_ray_tracing_motion_blur](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_ray_tracing_motion_blur.html).")
(alexandria:define-constant +nv-representative-fragment-test-extension-name+ "VK_NV_representative_fragment_test"
  :test #'string=
  :documentation "The name of the extension [VK_NV_representative_fragment_test](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_representative_fragment_test.html).")
(alexandria:define-constant +nv-sample-mask-override-coverage-extension-name+ "VK_NV_sample_mask_override_coverage"
  :test #'string=
  :documentation "The name of the extension [VK_NV_sample_mask_override_coverage](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_sample_mask_override_coverage.html).")
(alexandria:define-constant +nv-scissor-exclusive-extension-name+ "VK_NV_scissor_exclusive"
  :test #'string=
  :documentation "The name of the extension [VK_NV_scissor_exclusive](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_scissor_exclusive.html).")
(alexandria:define-constant +nv-shader-image-footprint-extension-name+ "VK_NV_shader_image_footprint"
  :test #'string=
  :documentation "The name of the extension [VK_NV_shader_image_footprint](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_shader_image_footprint.html).")
(alexandria:define-constant +nv-shader-sm-builtins-extension-name+ "VK_NV_shader_sm_builtins"
  :test #'string=
  :documentation "The name of the extension [VK_NV_shader_sm_builtins](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_shader_sm_builtins.html).")
(alexandria:define-constant +nv-shader-subgroup-partitioned-extension-name+ "VK_NV_shader_subgroup_partitioned"
  :test #'string=
  :documentation "The name of the extension [VK_NV_shader_subgroup_partitioned](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_shader_subgroup_partitioned.html).")
(alexandria:define-constant +nv-shading-rate-image-extension-name+ "VK_NV_shading_rate_image"
  :test #'string=
  :documentation "The name of the extension [VK_NV_shading_rate_image](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_shading_rate_image.html).")
(alexandria:define-constant +nv-viewport-array-2-extension-name+ "VK_NV_viewport_array2"
  :test #'string=
  :documentation "The name of the extension [VK_NV_viewport_array2](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_viewport_array2.html).")
(alexandria:define-constant +nv-viewport-swizzle-extension-name+ "VK_NV_viewport_swizzle"
  :test #'string=
  :documentation "The name of the extension [VK_NV_viewport_swizzle](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_viewport_swizzle.html).")
(alexandria:define-constant +nv-win32-keyed-mutex-extension-name+ "VK_NV_win32_keyed_mutex"
  :test #'string=
  :documentation "The name of the extension [VK_NV_win32_keyed_mutex](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_NV_win32_keyed_mutex.html).")
(alexandria:define-constant +qcom-render-pass-shader-resolve-extension-name+ "VK_QCOM_render_pass_shader_resolve"
  :test #'string=
  :documentation "The name of the extension [VK_QCOM_render_pass_shader_resolve](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_QCOM_render_pass_shader_resolve.html).")
(alexandria:define-constant +qcom-render-pass-store-ops-extension-name+ "VK_QCOM_render_pass_store_ops"
  :test #'string=
  :documentation "The name of the extension [VK_QCOM_render_pass_store_ops](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_QCOM_render_pass_store_ops.html).")
(alexandria:define-constant +qcom-render-pass-transform-extension-name+ "VK_QCOM_render_pass_transform"
  :test #'string=
  :documentation "The name of the extension [VK_QCOM_render_pass_transform](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_QCOM_render_pass_transform.html).")
(alexandria:define-constant +qcom-rotated-copy-commands-extension-name+ "VK_QCOM_rotated_copy_commands"
  :test #'string=
  :documentation "The name of the extension [VK_QCOM_rotated_copy_commands](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_QCOM_rotated_copy_commands.html).")
(alexandria:define-constant +qnx-screen-surface-extension-name+ "VK_QNX_screen_surface"
  :test #'string=
  :documentation "The name of the extension [VK_QNX_screen_surface](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_QNX_screen_surface.html).")
(alexandria:define-constant +valve-mutable-descriptor-type-extension-name+ "VK_VALVE_mutable_descriptor_type"
  :test #'string=
  :documentation "The name of the extension [VK_VALVE_mutable_descriptor_type](https://www.khronos.org/registry/vulkan/specs/1.2-extensions/man/html/VK_VALVE_mutable_descriptor_type.html).")

(defctype sample-mask :uint32)

(defctype bool32 :uint32)

(defctype flags :uint32)

(defctype flags-64 :uint64)

(defctype device-size :uint64)

(defctype device-address :uint64)

(defctype remote-address-nv :pointer)

(defctype handle :pointer)
#.(if (= 8 (foreign-type-size :pointer))
  '(defctype non-dispatch-handle :pointer)
  '(defctype non-dispatch-handle :uint64))

(defctype a-native-window :pointer)

(defctype a-hardware-buffer :pointer)

(defctype mir_connection :pointer)

(defctype mir_surface :pointer)

(defctype xcb_connection_t :pointer)

(defctype i-direct-fb :pointer)

(defctype i-direct-fb-surface :pointer)

(defctype ca-metal-layer :pointer)

(defctype display :pointer)

(defctype ggp-stream-descriptor (:pointer :void))

(defctype ggp-frame-token (:pointer :void))

(defctype hinstance (:pointer :void))

(defctype hwnd (:pointer :void))

(defctype handle (:pointer :void))

(defctype hmonitor (:pointer :void))

(defctype dword :uint32)

(defctype lpcwstr (:pointer :void))

(defctype rr-output :ulong)

(defctype xcb_window_t :uint32)

(defctype xcb_visualid_t :uint32)

(defctype zx_handle_t (:pointer :void))

(defctype window :ulong)

(defctype visual-id :ulong)

(defctype std-video-h264-profile-idc :uint32)

(defctype std-video-h264-mem-mgmt-control-op :uint32)

(defctype std-video-h264-modification-of-pic-nums-idc :uint32)

(defctype std-video-h264-picture-type :uint32)

(defctype std-video-h264-disable-deblocking-filter-idc :uint32)

(defctype std-video-h264-cabac-init-idc :uint32)

(defctype std-video-h264-slice-type :uint32)

(defctype std-video-h264-weighted-bipred-idc :uint32)

(defctype std-video-h264-aspect-ratio-idc :uint32)

(defctype std-video-h264-poc-type :uint32)

(defctype std-video-h264-chroma-format-idc :uint32)

(defctype std-video-h264-level :uint32)

(defctype std-video-h265-profile-idc :uint32)

(defctype std-video-h265-picture-type :uint32)

(defctype std-video-h265-slice-type :uint32)

(defctype std-video-h265-level :uint32)

(defctype wl_display :pointer)

(defctype wl_surface :pointer)

(defcstruct security_attributes)

(defcstruct _screen_context)

(defcstruct _screen_window)

(defcstruct std-video-decode-h264-picture-info)

(defcstruct std-video-decode-h264-reference-info)

(defcstruct std-video-decode-h264-mvc)

(defcstruct std-video-h264-sequence-parameter-set)

(defcstruct std-video-h264-picture-parameter-set)

(defcstruct std-video-encode-h264-slice-header)

(defcstruct std-video-encode-h264-picture-info)

(defcstruct std-video-encode-h264-ref-pic-marking-entry)

(defcstruct std-video-encode-h264-ref-list-mod-entry)

(defcstruct std-video-encode-h264-ref-mgmt-flags)

(defcstruct std-video-encode-h264-picture-info-flags)

(defcstruct std-video-encode-h264-ref-mem-mgmt-ctrl-operations)

(defcstruct std-video-encode-h264-slice-header-flags)

(defcstruct std-video-encode-h265-reference-modification-flags)

(defcstruct std-video-encode-h265-reference-info-flags)

(defcstruct std-video-encode-h265-slice-header-flags)

(defcstruct std-video-encode-h265-reference-modifications)

(defcstruct std-video-encode-h265-reference-info)

(defcstruct std-video-encode-h265-slice-header)

(defcstruct std-video-encode-h265-slice-segment-header)

(defcstruct std-video-encode-h265-picture-info)

(defcstruct std-video-encode-h265-picture-info-flags)

(defcstruct std-video-decode-h264-mvc-element-flags)

(defcstruct std-video-decode-h264-mvc-element)

(defcstruct std-video-decode-h264-reference-info-flags)

(defcstruct std-video-decode-h264-picture-info-flags)

(defcstruct std-video-decode-h265-picture-info)

(defcstruct std-video-decode-h265-reference-info)

(defcstruct std-video-decode-h265-reference-info-flags)

(defcstruct std-video-decode-h265-picture-info-flags)

(defcstruct std-video-h264-pps-flags)

(defcstruct std-video-h264-sps-vui-flags)

(defcstruct std-video-h264-hrd-parameters)

(defcstruct std-video-h264-sequence-parameter-set-vui)

(defcstruct std-video-h264-scaling-lists)

(defcstruct std-video-h264-sps-flags)

(defcstruct std-video-h265-video-parameter-set)

(defcstruct std-video-h265-sequence-parameter-set)

(defcstruct std-video-h265-picture-parameter-set)

(defcstruct std-video-h265-sps-vui-flags)

(defcstruct std-video-h265-hrd-flags)

(defcstruct std-video-h265-sub-layer-hrd-parameters)

(defcstruct std-video-h265-pps-flags)

(defcstruct std-video-h265-predictor-palette-entries)

(defcstruct std-video-h265-sequence-parameter-set-vui)

(defcstruct std-video-h265-scaling-lists)

(defcstruct std-video-h265-sps-flags)

(defcstruct std-video-h265-vps-flags)

(defcstruct std-video-h265-hrd-parameters)

(defcstruct std-video-h265-dec-pic-buf-mgr)

(defctype instance handle)

(defctype physical-device handle)

(defctype device handle)

(defctype queue handle)

(defctype command-buffer handle)

(defctype device-memory non-dispatch-handle)

(defctype command-pool non-dispatch-handle)

(defctype buffer non-dispatch-handle)

(defctype buffer-view non-dispatch-handle)

(defctype image non-dispatch-handle)

(defctype image-view non-dispatch-handle)

(defctype shader-module non-dispatch-handle)

(defctype pipeline non-dispatch-handle)

(defctype pipeline-layout non-dispatch-handle)

(defctype sampler non-dispatch-handle)

(defctype descriptor-set non-dispatch-handle)

(defctype descriptor-set-layout non-dispatch-handle)

(defctype descriptor-pool non-dispatch-handle)

(defctype fence non-dispatch-handle)

(defctype semaphore non-dispatch-handle)

(defctype event non-dispatch-handle)

(defctype query-pool non-dispatch-handle)

(defctype framebuffer non-dispatch-handle)

(defctype render-pass non-dispatch-handle)

(defctype pipeline-cache non-dispatch-handle)

(defctype indirect-commands-layout-nv non-dispatch-handle)

(defctype descriptor-update-template non-dispatch-handle)

(defctype descriptor-update-template-khr non-dispatch-handle)

(defctype sampler-ycbcr-conversion non-dispatch-handle)

(defctype sampler-ycbcr-conversion-khr non-dispatch-handle)

(defctype validation-cache-ext non-dispatch-handle)

(defctype acceleration-structure-khr non-dispatch-handle)

(defctype acceleration-structure-nv non-dispatch-handle)

(defctype performance-configuration-intel non-dispatch-handle)

(defctype buffer-collection-fuchsia non-dispatch-handle)

(defctype deferred-operation-khr non-dispatch-handle)

(defctype private-data-slot-ext non-dispatch-handle)

(defctype cu-module-nvx non-dispatch-handle)

(defctype cu-function-nvx non-dispatch-handle)

(defctype display-khr non-dispatch-handle)

(defctype display-mode-khr non-dispatch-handle)

(defctype surface-khr non-dispatch-handle)

(defctype swapchain-khr non-dispatch-handle)

(defctype debug-report-callback-ext non-dispatch-handle)

(defctype debug-utils-messenger-ext non-dispatch-handle)

(defctype video-session-khr non-dispatch-handle)

(defctype video-session-parameters-khr non-dispatch-handle)

(defbitfield (framebuffer-create-flags flags)
  (:imageless #x1)) ;; 

(defbitfield (query-pool-create-flags flags))

(defbitfield (render-pass-create-flags flags)
  (:transform #x2)) ;; 

(defbitfield (sampler-create-flags flags)
  (:subsampled #x1) ;; 
  (:subsampled-coarse-reconstruction #x2)) ;; 

(defbitfield (pipeline-layout-create-flags flags))

(defbitfield (pipeline-cache-create-flags flags)
  (:externally-synchronized #x1)) ;; 

(defbitfield (pipeline-depth-stencil-state-create-flags flags))

(defbitfield (pipeline-dynamic-state-create-flags flags))

(defbitfield (pipeline-color-blend-state-create-flags flags))

(defbitfield (pipeline-multisample-state-create-flags flags))

(defbitfield (pipeline-rasterization-state-create-flags flags))

(defbitfield (pipeline-viewport-state-create-flags flags))

(defbitfield (pipeline-tessellation-state-create-flags flags))

(defbitfield (pipeline-input-assembly-state-create-flags flags))

(defbitfield (pipeline-vertex-input-state-create-flags flags))

(defbitfield (pipeline-shader-stage-create-flags flags)
  (:allow-varying-subgroup-size #x1) ;; 
  (:require-full-subgroups #x2)) ;; 

(defbitfield (descriptor-set-layout-create-flags flags)
  (:push-descriptor #x1) ;; 
  (:update-after-bind-pool #x2) ;; 
  (:host-only-pool #x4)) ;; 

(defbitfield (buffer-view-create-flags flags))

(defbitfield (instance-create-flags flags))

(defbitfield (device-create-flags flags))

(defbitfield (device-queue-create-flags flags)
  (:protected #x1)) ;; 

(defbitfield (queue-flags flags)
  (:graphics #x1) ;; Queue supports graphics operations
  (:compute #x2) ;; Queue supports compute operations
  (:transfer #x4) ;; Queue supports transfer operations
  (:sparse-binding #x8) ;; Queue supports sparse resource memory management operations
  (:protected #x10) ;; 
  (:video-decode #x20) ;; 
  (:video-encode #x40)) ;; 

(defbitfield (memory-property-flags flags)
  (:device-local #x1) ;; If otherwise stated, then allocate memory on device
  (:host-visible #x2) ;; Memory is mappable by host
  (:host-coherent #x4) ;; Memory will have i/o coherency. If not set, application may need to use vkFlushMappedMemoryRanges and vkInvalidateMappedMemoryRanges to flush/invalidate host cache
  (:host-cached #x8) ;; Memory will be cached by the host
  (:lazily-allocated #x10) ;; Memory may be allocated by the driver when it is required
  (:protected #x20) ;; 
  (:device-coherent #x40) ;; 
  (:device-uncached #x80) ;; 
  (:rdma-capable #x100)) ;; 

(defbitfield (memory-heap-flags flags)
  (:device-local #x1) ;; If set, heap represents device memory
  (:multi-instance #x2)) ;; 

(defbitfield (access-flags flags)
  (:none-khr #x0) ;; 
  (:indirect-command-read #x1) ;; Controls coherency of indirect command reads
  (:index-read #x2) ;; Controls coherency of index reads
  (:vertex-attribute-read #x4) ;; Controls coherency of vertex attribute reads
  (:uniform-read #x8) ;; Controls coherency of uniform buffer reads
  (:input-attachment-read #x10) ;; Controls coherency of input attachment reads
  (:shader-read #x20) ;; Controls coherency of shader reads
  (:shader-write #x40) ;; Controls coherency of shader writes
  (:color-attachment-read #x80) ;; Controls coherency of color attachment reads
  (:color-attachment-write #x100) ;; Controls coherency of color attachment writes
  (:depth-stencil-attachment-read #x200) ;; Controls coherency of depth/stencil attachment reads
  (:depth-stencil-attachment-write #x400) ;; Controls coherency of depth/stencil attachment writes
  (:transfer-read #x800) ;; Controls coherency of transfer reads
  (:transfer-write #x1000) ;; Controls coherency of transfer writes
  (:host-read #x2000) ;; Controls coherency of host reads
  (:host-write #x4000) ;; Controls coherency of host writes
  (:memory-read #x8000) ;; Controls coherency of memory reads
  (:memory-write #x10000) ;; Controls coherency of memory writes
  (:command-preprocess-read #x20000) ;; 
  (:command-preprocess-write #x40000) ;; 
  (:color-attachment-read-noncoherent #x80000) ;; 
  (:conditional-rendering-read #x100000) ;; 
  (:acceleration-structure-read #x200000) ;; 
  (:acceleration-structure-write #x400000) ;; 
  (:fragment-shading-rate-attachment-read #x800000) ;; 
  (:fragment-density-map-read #x1000000) ;; 
  (:transform-feedback-write #x2000000) ;; 
  (:transform-feedback-counter-read #x4000000) ;; 
  (:transform-feedback-counter-write #x8000000)) ;; 

(defbitfield (buffer-usage-flags flags)
  (:transfer-src #x1) ;; Can be used as a source of transfer operations
  (:transfer-dst #x2) ;; Can be used as a destination of transfer operations
  (:uniform-texel-buffer #x4) ;; Can be used as TBO
  (:storage-texel-buffer #x8) ;; Can be used as IBO
  (:uniform-buffer #x10) ;; Can be used as UBO
  (:storage-buffer #x20) ;; Can be used as SSBO
  (:index-buffer #x40) ;; Can be used as source of fixed-function index fetch (index buffer)
  (:vertex-buffer #x80) ;; Can be used as source of fixed-function vertex fetch (VBO)
  (:indirect-buffer #x100) ;; Can be the source of indirect parameters (e.g. indirect buffer, parameter buffer)
  (:conditional-rendering #x200) ;; 
  (:shader-binding-table #x400) ;; 
  (:transform-feedback-buffer #x800) ;; 
  (:transform-feedback-counter-buffer #x1000) ;; 
  (:video-decode-src #x2000) ;; 
  (:video-decode-dst #x4000) ;; 
  (:video-encode-dst #x8000) ;; 
  (:video-encode-src #x10000) ;; 
  (:shader-device-address #x20000) ;; 
  (:acceleration-structure-build-input-read-only #x80000) ;; 
  (:acceleration-structure-storage #x100000)) ;; 

(defbitfield (buffer-create-flags flags)
  (:sparse-binding #x1) ;; Buffer should support sparse backing
  (:sparse-residency #x2) ;; Buffer should support sparse backing with partial residency
  (:sparse-aliased #x4) ;; Buffer should support constant data access to physical memory ranges mapped into multiple locations of sparse buffers
  (:protected #x8) ;; 
  (:device-address-capture-replay #x10)) ;; 

(defbitfield (shader-stage-flags flags)
  (:vertex #x1)
  (:tessellation-control #x2)
  (:tessellation-evaluation #x4)
  (:geometry #x8)
  (:fragment #x10)
  (:all-graphics #x1F)
  (:compute #x20)
  (:task #x40) ;; 
  (:mesh #x80) ;; 
  (:raygen #x100) ;; 
  (:any-hit #x200) ;; 
  (:closest-hit #x400) ;; 
  (:miss #x800) ;; 
  (:intersection #x1000) ;; 
  (:callable #x2000) ;; 
  (:subpass-shading #x4000) ;; 
  (:all #x7FFFFFFF))

(defbitfield (image-usage-flags flags)
  (:transfer-src #x1) ;; Can be used as a source of transfer operations
  (:transfer-dst #x2) ;; Can be used as a destination of transfer operations
  (:sampled #x4) ;; Can be sampled from (SAMPLED_IMAGE and COMBINED_IMAGE_SAMPLER descriptor types)
  (:storage #x8) ;; Can be used as storage image (STORAGE_IMAGE descriptor type)
  (:color-attachment #x10) ;; Can be used as framebuffer color attachment
  (:depth-stencil-attachment #x20) ;; Can be used as framebuffer depth/stencil attachment
  (:transient-attachment #x40) ;; Image data not needed outside of rendering
  (:input-attachment #x80) ;; Can be used as framebuffer input attachment
  (:fragment-shading-rate-attachment #x100) ;; 
  (:fragment-density-map #x200) ;; 
  (:video-decode-dst #x400) ;; 
  (:video-decode-src #x800) ;; 
  (:video-decode-dpb #x1000) ;; 
  (:video-encode-dst #x2000) ;; 
  (:video-encode-src #x4000) ;; 
  (:video-encode-dpb #x8000) ;; 
  (:invocation-mask #x40000)) ;; 

(defbitfield (image-create-flags flags)
  (:sparse-binding #x1) ;; Image should support sparse backing
  (:sparse-residency #x2) ;; Image should support sparse backing with partial residency
  (:sparse-aliased #x4) ;; Image should support constant data access to physical memory ranges mapped into multiple locations of sparse images
  (:mutable-format #x8) ;; Allows image views to have different format than the base image
  (:cube-compatible #x10) ;; Allows creating image views with cube type from the created image
  (:2d-array-compatible #x20) ;; 
  (:split-instance-bind-regions #x40) ;; 
  (:block-texel-view-compatible #x80) ;; 
  (:extended-usage #x100) ;; 
  (:disjoint #x200) ;; 
  (:alias #x400) ;; 
  (:protected #x800) ;; 
  (:sample-locations-compatible-depth #x1000) ;; 
  (:corner-sampled #x2000) ;; 
  (:subsampled #x4000)) ;; 

(defbitfield (image-view-create-flags flags)
  (:fragment-density-map-dynamic #x1) ;; 
  (:fragment-density-map-deferred #x2)) ;; 

(defbitfield (pipeline-create-flags flags)
  (:disable-optimization #x1)
  (:allow-derivatives #x2)
  (:derivative #x4)
  (:view-index-from-device-index #x8) ;; 
  (:dispatch-base #x10) ;; 
  (:defer-compile #x20) ;; 
  (:capture-statistics #x40) ;; 
  (:capture-internal-representations #x80) ;; 
  (:fail-on-pipeline-compile-required #x100) ;; 
  (:early-return-on-failure #x200) ;; 
  (:library #x800) ;; 
  (:ray-tracing-skip-triangles #x1000) ;; 
  (:ray-tracing-skip-aabbs #x2000) ;; 
  (:ray-tracing-no-null-any-hit-shaders #x4000) ;; 
  (:ray-tracing-no-null-closest-hit-shaders #x8000) ;; 
  (:ray-tracing-no-null-miss-shaders #x10000) ;; 
  (:ray-tracing-no-null-intersection-shaders #x20000) ;; 
  (:indirect-bindable #x40000) ;; 
  (:ray-tracing-shader-group-handle-capture-replay #x80000) ;; 
  (:ray-tracing-allow-motion #x100000) ;; 
  (:vk-pipeline-rasterization-state-create-fragment-shading-rate-attachment #x200000) ;; 
  (:vk-pipeline-rasterization-state-create-fragment-density-map-attachment #x400000)) ;; 

(defbitfield (color-component-flags flags)
  (:r #x1)
  (:g #x2)
  (:b #x4)
  (:a #x8))

(defbitfield (fence-create-flags flags)
  (:signaled #x1))

(defbitfield (semaphore-create-flags flags))

(defbitfield (format-feature-flags flags)
  (:sampled-image #x1) ;; Format can be used for sampled images (SAMPLED_IMAGE and COMBINED_IMAGE_SAMPLER descriptor types)
  (:storage-image #x2) ;; Format can be used for storage images (STORAGE_IMAGE descriptor type)
  (:storage-image-atomic #x4) ;; Format supports atomic operations in case it is used for storage images
  (:uniform-texel-buffer #x8) ;; Format can be used for uniform texel buffers (TBOs)
  (:storage-texel-buffer #x10) ;; Format can be used for storage texel buffers (IBOs)
  (:storage-texel-buffer-atomic #x20) ;; Format supports atomic operations in case it is used for storage texel buffers
  (:vertex-buffer #x40) ;; Format can be used for vertex buffers (VBOs)
  (:color-attachment #x80) ;; Format can be used for color attachment images
  (:color-attachment-blend #x100) ;; Format supports blending in case it is used for color attachment images
  (:depth-stencil-attachment #x200) ;; Format can be used for depth/stencil attachment images
  (:blit-src #x400) ;; Format can be used as the source image of blits with vkCmdBlitImage
  (:blit-dst #x800) ;; Format can be used as the destination image of blits with vkCmdBlitImage
  (:sampled-image-filter-linear #x1000) ;; Format can be filtered with VK_FILTER_LINEAR when being sampled
  (:sampled-image-filter-cubic #x2000) ;; 
  (:transfer-src #x4000) ;; 
  (:transfer-dst #x8000) ;; 
  (:sampled-image-filter-minmax #x10000) ;; 
  (:midpoint-chroma-samples #x20000) ;; 
  (:sampled-image-ycbcr-conversion-linear-filter #x40000) ;; 
  (:sampled-image-ycbcr-conversion-separate-reconstruction-filter #x80000) ;; 
  (:sampled-image-ycbcr-conversion-chroma-reconstruction-explicit #x100000) ;; 
  (:sampled-image-ycbcr-conversion-chroma-reconstruction-explicit-forceable #x200000) ;; 
  (:disjoint #x400000) ;; 
  (:cosited-chroma-samples #x800000) ;; 
  (:fragment-density-map #x1000000) ;; 
  (:video-decode-output #x2000000) ;; 
  (:video-decode-dpb #x4000000) ;; 
  (:video-encode-input #x8000000) ;; 
  (:video-encode-dpb #x10000000) ;; 
  (:acceleration-structure-vertex-buffer #x20000000) ;; 
  (:fragment-shading-rate-attachment #x40000000)) ;; 

(defbitfield (query-control-flags flags)
  (:precise #x1)) ;; Require precise results to be collected by the query

(defbitfield (query-result-flags flags)
  (:64 #x1) ;; Results of the queries are written to the destination buffer as 64-bit values
  (:wait #x2) ;; Results of the queries are waited on before proceeding with the result copy
  (:with-availability #x4) ;; Besides the results of the query, the availability of the results is also written
  (:partial #x8) ;; Copy the partial results of the query even if the final results are not available
  (:with-status #x10)) ;; 

(defbitfield (shader-module-create-flags flags))

(defbitfield (event-create-flags flags)
  (:device-only #x1)) ;; 

(defbitfield (command-pool-create-flags flags)
  (:transient #x1) ;; Command buffers have a short lifetime
  (:reset-command-buffer #x2) ;; Command buffers may release their memory individually
  (:protected #x4)) ;; 

(defbitfield (command-pool-reset-flags flags)
  (:release-resources #x1)) ;; Release resources owned by the pool

(defbitfield (command-buffer-reset-flags flags)
  (:release-resources #x1)) ;; Release resources owned by the buffer

(defbitfield (command-buffer-usage-flags flags)
  (:one-time-submit #x1)
  (:render-pass-continue #x2)
  (:simultaneous-use #x4)) ;; Command buffer may be submitted/executed more than once simultaneously

(defbitfield (query-pipeline-statistic-flags flags)
  (:input-assembly-vertices #x1) ;; Optional
  (:input-assembly-primitives #x2) ;; Optional
  (:vertex-shader-invocations #x4) ;; Optional
  (:geometry-shader-invocations #x8) ;; Optional
  (:geometry-shader-primitives #x10) ;; Optional
  (:clipping-invocations #x20) ;; Optional
  (:clipping-primitives #x40) ;; Optional
  (:fragment-shader-invocations #x80) ;; Optional
  (:tessellation-control-shader-patches #x100) ;; Optional
  (:tessellation-evaluation-shader-invocations #x200) ;; Optional
  (:compute-shader-invocations #x400)) ;; Optional

(defbitfield (memory-map-flags flags))

(defbitfield (image-aspect-flags flags)
  (:color #x1)
  (:depth #x2)
  (:stencil #x4)
  (:metadata #x8)
  (:plane-0 #x10) ;; 
  (:plane-1 #x20) ;; 
  (:plane-2 #x40) ;; 
  (:memory-plane-0 #x80) ;; 
  (:memory-plane-1 #x100) ;; 
  (:memory-plane-2 #x200) ;; 
  (:memory-plane-3 #x400)) ;; 

(defbitfield (sparse-memory-bind-flags flags)
  (:metadata #x1)) ;; Operation binds resource metadata to memory

(defbitfield (sparse-image-format-flags flags)
  (:single-miptail #x1) ;; Image uses a single mip tail region for all array layers
  (:aligned-mip-size #x2) ;; Image requires mip level dimensions to be an integer multiple of the sparse image block dimensions for non-tail mip levels.
  (:nonstandard-block-size #x4)) ;; Image uses a non-standard sparse image block dimensions

(defbitfield (subpass-description-flags flags)
  (:per-view-attributes #x1) ;; 
  (:per-view-position-x-only #x2) ;; 
  (:fragment-region #x4) ;; 
  (:shader-resolve #x8)) ;; 

(defbitfield (pipeline-stage-flags flags)
  (:none-khr #x0) ;; 
  (:top-of-pipe #x1) ;; Before subsequent commands are processed
  (:draw-indirect #x2) ;; Draw/DispatchIndirect command fetch
  (:vertex-input #x4) ;; Vertex/index fetch
  (:vertex-shader #x8) ;; Vertex shading
  (:tessellation-control-shader #x10) ;; Tessellation control shading
  (:tessellation-evaluation-shader #x20) ;; Tessellation evaluation shading
  (:geometry-shader #x40) ;; Geometry shading
  (:fragment-shader #x80) ;; Fragment shading
  (:early-fragment-tests #x100) ;; Early fragment (depth and stencil) tests
  (:late-fragment-tests #x200) ;; Late fragment (depth and stencil) tests
  (:color-attachment-output #x400) ;; Color attachment writes
  (:compute-shader #x800) ;; Compute shading
  (:transfer #x1000) ;; Transfer/copy operations
  (:bottom-of-pipe #x2000) ;; After previous commands have completed
  (:host #x4000) ;; Indicates host (CPU) is a source/sink of the dependency
  (:all-graphics #x8000) ;; All stages of the graphics pipeline
  (:all-commands #x10000) ;; All stages supported on the queue
  (:command-preprocess #x20000) ;; 
  (:conditional-rendering #x40000) ;; 
  (:task-shader #x80000) ;; 
  (:mesh-shader #x100000) ;; 
  (:ray-tracing-shader #x200000) ;; 
  (:fragment-shading-rate-attachment #x400000) ;; 
  (:fragment-density-process #x800000) ;; 
  (:transform-feedback #x1000000) ;; 
  (:acceleration-structure-build #x2000000)) ;; 

(defbitfield (sample-count-flags flags)
  (:1 #x1) ;; Sample count 1 supported
  (:2 #x2) ;; Sample count 2 supported
  (:4 #x4) ;; Sample count 4 supported
  (:8 #x8) ;; Sample count 8 supported
  (:16 #x10) ;; Sample count 16 supported
  (:32 #x20) ;; Sample count 32 supported
  (:64 #x40)) ;; Sample count 64 supported

(defbitfield (attachment-description-flags flags)
  (:may-alias #x1)) ;; The attachment may alias physical memory of another attachment in the same render pass

(defbitfield (stencil-face-flags flags)
  (:front #x1) ;; Front face
  (:back #x2) ;; Back face
  (:front-and-back #x3)) ;; Front and back faces

(defbitfield (cull-mode-flags flags)
  (:none #x0)
  (:front #x1)
  (:back #x2)
  (:front-and-back #x3))

(defbitfield (descriptor-pool-create-flags flags)
  (:free-descriptor-set #x1) ;; Descriptor sets may be freed individually
  (:update-after-bind #x2) ;; 
  (:host-only #x4)) ;; 

(defbitfield (descriptor-pool-reset-flags flags))

(defbitfield (dependency-flags flags)
  (:by-region #x1) ;; Dependency is per pixel region
  (:view-local #x2) ;; 
  (:device-group #x4)) ;; 

(defbitfield (subgroup-feature-flags flags)
  (:basic #x1) ;; Basic subgroup operations
  (:vote #x2) ;; Vote subgroup operations
  (:arithmetic #x4) ;; Arithmetic subgroup operations
  (:ballot #x8) ;; Ballot subgroup operations
  (:shuffle #x10) ;; Shuffle subgroup operations
  (:shuffle-relative #x20) ;; Shuffle relative subgroup operations
  (:clustered #x40) ;; Clustered subgroup operations
  (:quad #x80) ;; Quad subgroup operations
  (:partitioned #x100)) ;; 

(defbitfield (indirect-commands-layout-usage-flags-nv flags)
  (:explicit-preprocess #x1)
  (:indexed-sequences #x2)
  (:unordered-sequences #x4))

(defbitfield (indirect-state-flags-nv flags)
  (:flag-frontface #x1))

(defbitfield (geometry-flags-khr flags)
  (:opaque #x1)
  (:no-duplicate-any-hit-invocation #x2))

(defbitfield (geometry-flags-nv flags)
  (:opaque #x1)
  (:no-duplicate-any-hit-invocation #x2))

(defbitfield (geometry-instance-flags-khr flags)
  (:triangle-facing-cull-disable #x1)
  (:triangle-flip-facing #x2)
  (:force-opaque #x4)
  (:force-no-opaque #x8))

(defbitfield (geometry-instance-flags-nv flags)
  (:triangle-facing-cull-disable #x1)
  (:triangle-flip-facing #x2)
  (:force-opaque #x4)
  (:force-no-opaque #x8))

(defbitfield (build-acceleration-structure-flags-khr flags)
  (:allow-update #x1)
  (:allow-compaction #x2)
  (:prefer-fast-trace #x4)
  (:prefer-fast-build #x8)
  (:low-memory #x10)
  (:motion #x20)) ;; 

(defbitfield (build-acceleration-structure-flags-nv flags)
  (:allow-update #x1)
  (:allow-compaction #x2)
  (:prefer-fast-trace #x4)
  (:prefer-fast-build #x8)
  (:low-memory #x10)
  (:motion #x20)) ;; 

(defbitfield (private-data-slot-create-flags-ext flags))

(defbitfield (acceleration-structure-create-flags-khr flags)
  (:device-address-capture-replay #x1)
  (:motion #x4)) ;; 

(defbitfield (descriptor-update-template-create-flags flags))

(defbitfield (descriptor-update-template-create-flags-khr flags))

(defbitfield (pipeline-creation-feedback-flags-ext flags)
  (:valid #x1)
  (:application-pipeline-cache-hit #x2)
  (:base-pipeline-acceleration #x4))

(defbitfield (performance-counter-description-flags-khr flags)
  (:performance-impacting #x1)
  (:concurrently-impacted #x2))

(defbitfield (acquire-profiling-lock-flags-khr flags))

(defbitfield (semaphore-wait-flags flags)
  (:any #x1))

(defbitfield (semaphore-wait-flags-khr flags)
  (:any #x1))

(defbitfield (pipeline-compiler-control-flags-amd flags))

(defbitfield (shader-core-properties-flags-amd flags))

(defbitfield (device-diagnostics-config-flags-nv flags)
  (:enable-shader-debug-info #x1)
  (:enable-resource-tracking #x2)
  (:enable-automatic-checkpoints #x4))

(defbitfield (access-flags-2-khr flags-64)
  (:none-khr #x0)
  (:indirect-command-read #x1)
  (:index-read #x2)
  (:vertex-attribute-read #x4)
  (:uniform-read #x8)
  (:input-attachment-read #x10)
  (:shader-read #x20)
  (:shader-write #x40)
  (:color-attachment-read #x80)
  (:color-attachment-write #x100)
  (:depth-stencil-attachment-read #x200)
  (:depth-stencil-attachment-write #x400)
  (:transfer-read #x800)
  (:transfer-write #x1000)
  (:host-read #x2000)
  (:host-write #x4000)
  (:memory-read #x8000)
  (:memory-write #x10000)
  (:command-preprocess-read #x20000) ;; 
  (:command-preprocess-write #x40000) ;; 
  (:color-attachment-read-noncoherent #x80000) ;; 
  (:conditional-rendering-read #x100000) ;; 
  (:acceleration-structure-read #x200000) ;; 
  (:acceleration-structure-write #x400000) ;; 
  (:fragment-shading-rate-attachment-read #x800000) ;; 
  (:fragment-density-map-read #x1000000) ;; 
  (:transform-feedback-write #x2000000) ;; 
  (:transform-feedback-counter-read #x4000000) ;; 
  (:transform-feedback-counter-write #x8000000) ;; 
  (:shader-sampled-read #x100000000)
  (:shader-storage-read #x200000000)
  (:shader-storage-write #x400000000)
  (:video-decode-read #x800000000) ;; 
  (:video-decode-write #x1000000000) ;; 
  (:video-encode-read #x2000000000) ;; 
  (:video-encode-write #x4000000000) ;; 
  (:invocation-mask-read #x8000000000)) ;; 

(defbitfield (pipeline-stage-flags-2-khr flags-64)
  (:none-khr #x0)
  (:top-of-pipe #x1)
  (:draw-indirect #x2)
  (:vertex-input #x4)
  (:vertex-shader #x8)
  (:tessellation-control-shader #x10)
  (:tessellation-evaluation-shader #x20)
  (:geometry-shader #x40)
  (:fragment-shader #x80)
  (:early-fragment-tests #x100)
  (:late-fragment-tests #x200)
  (:color-attachment-output #x400)
  (:compute-shader #x800)
  (:all-transfer #x1000)
  (:bottom-of-pipe #x2000)
  (:host #x4000)
  (:all-graphics #x8000)
  (:all-commands #x10000)
  (:command-preprocess #x20000) ;; 
  (:conditional-rendering #x40000) ;; 
  (:task-shader #x80000) ;; 
  (:mesh-shader #x100000) ;; 
  (:ray-tracing-shader #x200000) ;; 
  (:fragment-shading-rate-attachment #x400000) ;; 
  (:fragment-density-process #x800000) ;; 
  (:transform-feedback #x1000000) ;; 
  (:acceleration-structure-build #x2000000) ;; 
  (:video-decode #x4000000) ;; 
  (:video-encode #x8000000) ;; 
  (:copy #x100000000)
  (:resolve #x200000000)
  (:blit #x400000000)
  (:clear #x800000000)
  (:index-input #x1000000000)
  (:vertex-attribute-input #x2000000000)
  (:pre-rasterization-shaders #x4000000000)
  (:subpass-shading #x8000000000) ;; 
  (:invocation-mask #x10000000000)) ;; 

(defbitfield (acceleration-structure-motion-info-flags-nv flags))

(defbitfield (acceleration-structure-motion-instance-flags-nv flags))

(defbitfield (format-feature-flags-2-khr flags-64)
  (:sampled-image #x1)
  (:storage-image #x2)
  (:storage-image-atomic #x4)
  (:uniform-texel-buffer #x8)
  (:storage-texel-buffer #x10)
  (:storage-texel-buffer-atomic #x20)
  (:vertex-buffer #x40)
  (:color-attachment #x80)
  (:color-attachment-blend #x100)
  (:depth-stencil-attachment #x200)
  (:blit-src #x400)
  (:blit-dst #x800)
  (:sampled-image-filter-linear #x1000)
  (:sampled-image-filter-cubic #x2000)
  (:transfer-src #x4000)
  (:transfer-dst #x8000)
  (:sampled-image-filter-minmax #x10000)
  (:midpoint-chroma-samples #x20000)
  (:sampled-image-ycbcr-conversion-linear-filter #x40000)
  (:sampled-image-ycbcr-conversion-separate-reconstruction-filter #x80000)
  (:sampled-image-ycbcr-conversion-chroma-reconstruction-explicit #x100000)
  (:sampled-image-ycbcr-conversion-chroma-reconstruction-explicit-forceable #x200000)
  (:disjoint #x400000)
  (:cosited-chroma-samples #x800000)
  (:fragment-density-map #x1000000) ;; 
  (:video-decode-output #x2000000) ;; 
  (:video-decode-dpb #x4000000) ;; 
  (:video-encode-input #x8000000) ;; 
  (:video-encode-dpb #x10000000) ;; 
  (:acceleration-structure-vertex-buffer #x20000000) ;; 
  (:fragment-shading-rate-attachment #x40000000) ;; 
  (:storage-read-without-format #x80000000)
  (:storage-write-without-format #x100000000)
  (:sampled-image-depth-comparison #x200000000))

(defbitfield (rendering-flags-khr flags)
  (:contents-secondary-command-buffers #x1)
  (:suspending #x2)
  (:resuming #x4))

(defbitfield (composite-alpha-flags-khr flags)
  (:opaque #x1)
  (:pre-multiplied #x2)
  (:post-multiplied #x4)
  (:inherit #x8))

(defbitfield (display-plane-alpha-flags-khr flags)
  (:opaque #x1)
  (:global #x2)
  (:per-pixel #x4)
  (:per-pixel-premultiplied #x8))

(defbitfield (surface-transform-flags-khr flags)
  (:identity #x1)
  (:rotate-90 #x2)
  (:rotate-180 #x4)
  (:rotate-270 #x8)
  (:horizontal-mirror #x10)
  (:horizontal-mirror-rotate-90 #x20)
  (:horizontal-mirror-rotate-180 #x40)
  (:horizontal-mirror-rotate-270 #x80)
  (:inherit #x100))

(defbitfield (swapchain-create-flags-khr flags)
  (:split-instance-bind-regions #x1) ;; 
  (:protected #x2) ;; 
  (:mutable-format #x4)) ;; 

(defbitfield (display-mode-create-flags-khr flags))

(defbitfield (display-surface-create-flags-khr flags))

(defbitfield (android-surface-create-flags-khr flags))

(defbitfield (vi-surface-create-flags-nn flags))

(defbitfield (wayland-surface-create-flags-khr flags))

(defbitfield (win32-surface-create-flags-khr flags))

(defbitfield (xlib-surface-create-flags-khr flags))

(defbitfield (xcb-surface-create-flags-khr flags))

(defbitfield (direct-fb-surface-create-flags-ext flags))

(defbitfield (ios-surface-create-flags-mvk flags))

(defbitfield (mac-os-surface-create-flags-mvk flags))

(defbitfield (metal-surface-create-flags-ext flags))

(defbitfield (image-pipe-surface-create-flags-fuchsia flags))

(defbitfield (stream-descriptor-surface-create-flags-ggp flags))

(defbitfield (headless-surface-create-flags-ext flags))

(defbitfield (screen-surface-create-flags-qnx flags))

(defbitfield (peer-memory-feature-flags flags)
  (:copy-src #x1) ;; Can read with vkCmdCopy commands
  (:copy-dst #x2) ;; Can write with vkCmdCopy commands
  (:generic-src #x4) ;; Can read with any access type/command
  (:generic-dst #x8)) ;; Can write with and access type/command

(defbitfield (peer-memory-feature-flags-khr flags)
  (:copy-src #x1) ;; Can read with vkCmdCopy commands
  (:copy-dst #x2) ;; Can write with vkCmdCopy commands
  (:generic-src #x4) ;; Can read with any access type/command
  (:generic-dst #x8)) ;; Can write with and access type/command

(defbitfield (memory-allocate-flags flags)
  (:device-mask #x1) ;; Force allocation on specific devices
  (:device-address #x2) ;; 
  (:device-address-capture-replay #x4)) ;; 

(defbitfield (memory-allocate-flags-khr flags)
  (:device-mask #x1) ;; Force allocation on specific devices
  (:device-address #x2) ;; 
  (:device-address-capture-replay #x4)) ;; 

(defbitfield (device-group-present-mode-flags-khr flags)
  (:local #x1) ;; Present from local memory
  (:remote #x2) ;; Present from remote memory
  (:sum #x4) ;; Present sum of local and/or remote memory
  (:local-multi-device #x8)) ;; Each physical device presents from local memory

(defbitfield (debug-report-flags-ext flags)
  (:information #x1)
  (:warning #x2)
  (:performance-warning #x4)
  (:error #x8)
  (:debug #x10))

(defbitfield (command-pool-trim-flags flags))

(defbitfield (command-pool-trim-flags-khr flags))

(defbitfield (external-memory-handle-type-flags-nv flags)
  (:opaque-win32 #x1)
  (:opaque-win32-kmt #x2)
  (:d3d11-image #x4)
  (:d3d11-image-kmt #x8))

(defbitfield (external-memory-feature-flags-nv flags)
  (:dedicated-only #x1)
  (:exportable #x2)
  (:importable #x4))

(defbitfield (external-memory-handle-type-flags flags)
  (:opaque-fd #x1)
  (:opaque-win32 #x2)
  (:opaque-win32-kmt #x4)
  (:d3d11-texture #x8)
  (:d3d11-texture-kmt #x10)
  (:d3d12-heap #x20)
  (:d3d12-resource #x40)
  (:host-allocation #x80) ;; 
  (:host-mapped-foreign-memory #x100) ;; 
  (:dma-buf #x200) ;; 
  (:android-hardware-buffer #x400) ;; 
  (:zircon-vmo #x800) ;; 
  (:rdma-address #x1000)) ;; 

(defbitfield (external-memory-handle-type-flags-khr flags)
  (:opaque-fd #x1)
  (:opaque-win32 #x2)
  (:opaque-win32-kmt #x4)
  (:d3d11-texture #x8)
  (:d3d11-texture-kmt #x10)
  (:d3d12-heap #x20)
  (:d3d12-resource #x40)
  (:host-allocation #x80) ;; 
  (:host-mapped-foreign-memory #x100) ;; 
  (:dma-buf #x200) ;; 
  (:android-hardware-buffer #x400) ;; 
  (:zircon-vmo #x800) ;; 
  (:rdma-address #x1000)) ;; 

(defbitfield (external-memory-feature-flags flags)
  (:dedicated-only #x1)
  (:exportable #x2)
  (:importable #x4))

(defbitfield (external-memory-feature-flags-khr flags)
  (:dedicated-only #x1)
  (:exportable #x2)
  (:importable #x4))

(defbitfield (external-semaphore-handle-type-flags flags)
  (:opaque-fd #x1)
  (:opaque-win32 #x2)
  (:opaque-win32-kmt #x4)
  (:d3d12-fence #x8)
  (:sync-fd #x10)
  (:zircon-event #x80)) ;; 

(defbitfield (external-semaphore-handle-type-flags-khr flags)
  (:opaque-fd #x1)
  (:opaque-win32 #x2)
  (:opaque-win32-kmt #x4)
  (:d3d12-fence #x8)
  (:sync-fd #x10)
  (:zircon-event #x80)) ;; 

(defbitfield (external-semaphore-feature-flags flags)
  (:exportable #x1)
  (:importable #x2))

(defbitfield (external-semaphore-feature-flags-khr flags)
  (:exportable #x1)
  (:importable #x2))

(defbitfield (semaphore-import-flags flags)
  (:temporary #x1))

(defbitfield (semaphore-import-flags-khr flags)
  (:temporary #x1))

(defbitfield (external-fence-handle-type-flags flags)
  (:opaque-fd #x1)
  (:opaque-win32 #x2)
  (:opaque-win32-kmt #x4)
  (:sync-fd #x8))

(defbitfield (external-fence-handle-type-flags-khr flags)
  (:opaque-fd #x1)
  (:opaque-win32 #x2)
  (:opaque-win32-kmt #x4)
  (:sync-fd #x8))

(defbitfield (external-fence-feature-flags flags)
  (:exportable #x1)
  (:importable #x2))

(defbitfield (external-fence-feature-flags-khr flags)
  (:exportable #x1)
  (:importable #x2))

(defbitfield (fence-import-flags flags)
  (:temporary #x1))

(defbitfield (fence-import-flags-khr flags)
  (:temporary #x1))

(defbitfield (surface-counter-flags-ext flags)
  (:vblank #x1))

(defbitfield (pipeline-viewport-swizzle-state-create-flags-nv flags))

(defbitfield (pipeline-discard-rectangle-state-create-flags-ext flags))

(defbitfield (pipeline-coverage-to-color-state-create-flags-nv flags))

(defbitfield (pipeline-coverage-modulation-state-create-flags-nv flags))

(defbitfield (pipeline-coverage-reduction-state-create-flags-nv flags))

(defbitfield (validation-cache-create-flags-ext flags))

(defbitfield (debug-utils-message-severity-flags-ext flags)
  (:verbose #x1)
  (:info #x10)
  (:warning #x100)
  (:error #x1000))

(defbitfield (debug-utils-message-type-flags-ext flags)
  (:general #x1)
  (:validation #x2)
  (:performance #x4))

(defbitfield (debug-utils-messenger-create-flags-ext flags))

(defbitfield (debug-utils-messenger-callback-data-flags-ext flags))

(defbitfield (device-memory-report-flags-ext flags))

(defbitfield (pipeline-rasterization-conservative-state-create-flags-ext flags))

(defbitfield (descriptor-binding-flags flags)
  (:update-after-bind #x1)
  (:update-unused-while-pending #x2)
  (:partially-bound #x4)
  (:variable-descriptor-count #x8))

(defbitfield (descriptor-binding-flags-ext flags)
  (:update-after-bind #x1)
  (:update-unused-while-pending #x2)
  (:partially-bound #x4)
  (:variable-descriptor-count #x8))

(defbitfield (conditional-rendering-flags-ext flags)
  (:inverted #x1))

(defbitfield (resolve-mode-flags flags)
  (:none #x0)
  (:sample-zero #x1)
  (:average #x2)
  (:min #x4)
  (:max #x8))

(defbitfield (resolve-mode-flags-khr flags)
  (:none #x0)
  (:sample-zero #x1)
  (:average #x2)
  (:min #x4)
  (:max #x8))

(defbitfield (pipeline-rasterization-state-stream-create-flags-ext flags))

(defbitfield (pipeline-rasterization-depth-clip-state-create-flags-ext flags))

(defbitfield (tool-purpose-flags-ext flags)
  (:validation #x1)
  (:profiling #x2)
  (:tracing #x4)
  (:additional-features #x8)
  (:modifying-features #x10)
  (:debug-reporting #x20) ;; 
  (:debug-markers #x40)) ;; 

(defbitfield (submit-flags-khr flags)
  (:protected #x1))

(defbitfield (image-format-constraints-flags-fuchsia flags))

(defbitfield (image-constraints-info-flags-fuchsia flags)
  (:cpu-read-rarely-fuchsia #x1)
  (:cpu-read-often-fuchsia #x2)
  (:cpu-write-rarely-fuchsia #x4)
  (:cpu-write-often-fuchsia #x8)
  (:protected-optional-fuchsia #x10))

(defbitfield (video-codec-operation-flags-khr flags)
  (:invalid #x0)
  (:decode-h264 #x1) ;; 
  (:decode-h265 #x2) ;; 
  (:encode-h264 #x10000) ;; 
  (:encode-h265 #x20000)) ;; 

(defbitfield (video-capability-flags-khr flags)
  (:protected-content #x1)
  (:separate-reference-images #x2))

(defbitfield (video-session-create-flags-khr flags)
  (:default-khr #x0)
  (:protected-content #x1))

(defbitfield (video-begin-coding-flags-khr flags))

(defbitfield (video-end-coding-flags-khr flags))

(defbitfield (video-coding-quality-preset-flags-khr flags)
  (:normal #x1)
  (:power #x2)
  (:quality #x4))

(defbitfield (video-coding-control-flags-khr flags)
  (:default-khr #x0)
  (:reset #x1))

(defbitfield (video-decode-flags-khr flags)
  (:default-khr #x0)
  (:reserved-0 #x1))

(defbitfield (video-decode-h264-picture-layout-flags-ext flags)
  (:progressive-ext #x0)
  (:interlaced-interleaved-lines #x1)
  (:interlaced-separate-planes #x2))

(defbitfield (video-decode-h264-create-flags-ext flags))

(defbitfield (video-decode-h265-create-flags-ext flags))

(defbitfield (video-encode-flags-khr flags)
  (:default-khr #x0)
  (:reserved-0 #x1))

(defbitfield (video-encode-rate-control-flags-khr flags)
  (:default-khr #x0)
  (:reset #x1))

(defbitfield (video-encode-rate-control-mode-flags-khr flags)
  (:none #x0)
  (:cbr #x1)
  (:vbr #x2))

(defbitfield (video-chroma-subsampling-flags-khr flags)
  (:invalid #x0)
  (:monochrome #x1)
  (:420 #x2)
  (:422 #x4)
  (:444 #x8))

(defbitfield (video-component-bit-depth-flags-khr flags)
  (:invalid-khr #x0)
  (:8 #x1)
  (:10 #x4)
  (:12 #x10))

(defbitfield (video-encode-h264-capability-flags-ext flags)
  (:cabac #x1)
  (:cavlc #x2)
  (:weighted-bi-pred-implicit #x4)
  (:transform-8x8 #x8)
  (:chroma-qp-offset #x10)
  (:second-chroma-qp-offset #x20)
  (:deblocking-filter-disabled #x40)
  (:deblocking-filter-enabled #x80)
  (:deblocking-filter-partial #x100)
  (:multiple-slice-per-frame #x200)
  (:evenly-distributed-slice-size #x400))

(defbitfield (video-encode-h264-input-mode-flags-ext flags)
  (:frame #x1)
  (:slice #x2)
  (:non-vcl #x4))

(defbitfield (video-encode-h264-output-mode-flags-ext flags)
  (:frame #x1)
  (:slice #x2)
  (:non-vcl #x4))

(defbitfield (video-encode-h264-create-flags-ext flags)
  (:default-ext #x0)
  (:reserved-0 #x1))

(defbitfield (video-encode-h265-capability-flags-ext flags))

(defbitfield (video-encode-h265-input-mode-flags-ext flags)
  (:frame #x1)
  (:slice #x2)
  (:non-vcl #x4))

(defbitfield (video-encode-h265-output-mode-flags-ext flags)
  (:frame #x1)
  (:slice #x2)
  (:non-vcl #x4))

(defbitfield (video-encode-h265-create-flags-ext flags))

(defbitfield (video-encode-h265-ctb-size-flags-ext flags)
  (:8 #x1)
  (:16 #x2)
  (:32 #x4)
  (:64 #x8))

(defcenum (attachment-load-op)
  (:load #x0)
  (:clear #x1)
  (:dont-care #x2)
  (:none-ext #x3BA0E480)) ;; 

(defcenum (attachment-store-op)
  (:store #x0)
  (:dont-care #x1)
  (:none-khr #x3B9F61C8)) ;; 

(defcenum (blend-factor)
  (:zero #x0)
  (:one #x1)
  (:src-color #x2)
  (:one-minus-src-color #x3)
  (:dst-color #x4)
  (:one-minus-dst-color #x5)
  (:src-alpha #x6)
  (:one-minus-src-alpha #x7)
  (:dst-alpha #x8)
  (:one-minus-dst-alpha #x9)
  (:constant-color #xA)
  (:one-minus-constant-color #xB)
  (:constant-alpha #xC)
  (:one-minus-constant-alpha #xD)
  (:src-alpha-saturate #xE)
  (:src1-color #xF)
  (:one-minus-src1-color #x10)
  (:src1-alpha #x11)
  (:one-minus-src1-alpha #x12))

(defcenum (blend-op)
  (:add #x0)
  (:subtract #x1)
  (:reverse-subtract #x2)
  (:min #x3)
  (:max #x4)
  (:zero-ext #x3B9D0C20) ;; 
  (:src-ext #x3B9D0C21) ;; 
  (:dst-ext #x3B9D0C22) ;; 
  (:src-over-ext #x3B9D0C23) ;; 
  (:dst-over-ext #x3B9D0C24) ;; 
  (:src-in-ext #x3B9D0C25) ;; 
  (:dst-in-ext #x3B9D0C26) ;; 
  (:src-out-ext #x3B9D0C27) ;; 
  (:dst-out-ext #x3B9D0C28) ;; 
  (:src-atop-ext #x3B9D0C29) ;; 
  (:dst-atop-ext #x3B9D0C2A) ;; 
  (:xor-ext #x3B9D0C2B) ;; 
  (:multiply-ext #x3B9D0C2C) ;; 
  (:screen-ext #x3B9D0C2D) ;; 
  (:overlay-ext #x3B9D0C2E) ;; 
  (:darken-ext #x3B9D0C2F) ;; 
  (:lighten-ext #x3B9D0C30) ;; 
  (:colordodge-ext #x3B9D0C31) ;; 
  (:colorburn-ext #x3B9D0C32) ;; 
  (:hardlight-ext #x3B9D0C33) ;; 
  (:softlight-ext #x3B9D0C34) ;; 
  (:difference-ext #x3B9D0C35) ;; 
  (:exclusion-ext #x3B9D0C36) ;; 
  (:invert-ext #x3B9D0C37) ;; 
  (:invert-rgb-ext #x3B9D0C38) ;; 
  (:lineardodge-ext #x3B9D0C39) ;; 
  (:linearburn-ext #x3B9D0C3A) ;; 
  (:vividlight-ext #x3B9D0C3B) ;; 
  (:linearlight-ext #x3B9D0C3C) ;; 
  (:pinlight-ext #x3B9D0C3D) ;; 
  (:hardmix-ext #x3B9D0C3E) ;; 
  (:hsl-hue-ext #x3B9D0C3F) ;; 
  (:hsl-saturation-ext #x3B9D0C40) ;; 
  (:hsl-color-ext #x3B9D0C41) ;; 
  (:hsl-luminosity-ext #x3B9D0C42) ;; 
  (:plus-ext #x3B9D0C43) ;; 
  (:plus-clamped-ext #x3B9D0C44) ;; 
  (:plus-clamped-alpha-ext #x3B9D0C45) ;; 
  (:plus-darker-ext #x3B9D0C46) ;; 
  (:minus-ext #x3B9D0C47) ;; 
  (:minus-clamped-ext #x3B9D0C48) ;; 
  (:contrast-ext #x3B9D0C49) ;; 
  (:invert-ovg-ext #x3B9D0C4A) ;; 
  (:red-ext #x3B9D0C4B) ;; 
  (:green-ext #x3B9D0C4C) ;; 
  (:blue-ext #x3B9D0C4D)) ;; 

(defcenum (border-color)
  (:float-transparent-black #x0)
  (:int-transparent-black #x1)
  (:float-opaque-black #x2)
  (:int-opaque-black #x3)
  (:float-opaque-white #x4)
  (:int-opaque-white #x5)
  (:float-custom-ext #x3B9F2B1B) ;; 
  (:int-custom-ext #x3B9F2B1C)) ;; 

(defcenum (framebuffer-create-flag-bits)
  (:imageless #x1)) ;; 

(defcenum (query-pool-create-flag-bits))

(defcenum (render-pass-create-flag-bits)
  (:transform #x2)) ;; 

(defcenum (sampler-create-flag-bits)
  (:subsampled #x1) ;; 
  (:subsampled-coarse-reconstruction #x2)) ;; 

(defcenum (pipeline-cache-header-version)
  (:one #x1))

(defcenum (pipeline-cache-create-flag-bits)
  (:externally-synchronized #x1)) ;; 

(defcenum (pipeline-shader-stage-create-flag-bits)
  (:allow-varying-subgroup-size #x1) ;; 
  (:require-full-subgroups #x2)) ;; 

(defcenum (descriptor-set-layout-create-flag-bits)
  (:push-descriptor #x1) ;; 
  (:update-after-bind-pool #x2) ;; 
  (:host-only-pool #x4)) ;; 

(defcenum (instance-create-flag-bits))

(defcenum (device-queue-create-flag-bits)
  (:protected #x1)) ;; 

(defcenum (buffer-create-flag-bits)
  (:sparse-binding #x1) ;; Buffer should support sparse backing
  (:sparse-residency #x2) ;; Buffer should support sparse backing with partial residency
  (:sparse-aliased #x4) ;; Buffer should support constant data access to physical memory ranges mapped into multiple locations of sparse buffers
  (:protected #x8) ;; 
  (:device-address-capture-replay #x10)) ;; 

(defcenum (buffer-usage-flag-bits)
  (:transfer-src #x1) ;; Can be used as a source of transfer operations
  (:transfer-dst #x2) ;; Can be used as a destination of transfer operations
  (:uniform-texel-buffer #x4) ;; Can be used as TBO
  (:storage-texel-buffer #x8) ;; Can be used as IBO
  (:uniform-buffer #x10) ;; Can be used as UBO
  (:storage-buffer #x20) ;; Can be used as SSBO
  (:index-buffer #x40) ;; Can be used as source of fixed-function index fetch (index buffer)
  (:vertex-buffer #x80) ;; Can be used as source of fixed-function vertex fetch (VBO)
  (:indirect-buffer #x100) ;; Can be the source of indirect parameters (e.g. indirect buffer, parameter buffer)
  (:conditional-rendering #x200) ;; 
  (:shader-binding-table #x400) ;; 
  (:transform-feedback-buffer #x800) ;; 
  (:transform-feedback-counter-buffer #x1000) ;; 
  (:video-decode-src #x2000) ;; 
  (:video-decode-dst #x4000) ;; 
  (:video-encode-dst #x8000) ;; 
  (:video-encode-src #x10000) ;; 
  (:shader-device-address #x20000) ;; 
  (:acceleration-structure-build-input-read-only #x80000) ;; 
  (:acceleration-structure-storage #x100000)) ;; 

(defcenum (color-component-flag-bits)
  (:r #x1)
  (:g #x2)
  (:b #x4)
  (:a #x8))

(defcenum (component-swizzle)
  (:identity #x0)
  (:zero #x1)
  (:one #x2)
  (:r #x3)
  (:g #x4)
  (:b #x5)
  (:a #x6))

(defcenum (command-pool-create-flag-bits)
  (:transient #x1) ;; Command buffers have a short lifetime
  (:reset-command-buffer #x2) ;; Command buffers may release their memory individually
  (:protected #x4)) ;; 

(defcenum (command-pool-reset-flag-bits)
  (:release-resources #x1)) ;; Release resources owned by the pool

(defcenum (command-buffer-reset-flag-bits)
  (:release-resources #x1)) ;; Release resources owned by the buffer

(defcenum (command-buffer-level)
  (:primary #x0)
  (:secondary #x1))

(defcenum (command-buffer-usage-flag-bits)
  (:one-time-submit #x1)
  (:render-pass-continue #x2)
  (:simultaneous-use #x4)) ;; Command buffer may be submitted/executed more than once simultaneously

(defcenum (compare-op)
  (:never #x0)
  (:less #x1)
  (:equal #x2)
  (:less-or-equal #x3)
  (:greater #x4)
  (:not-equal #x5)
  (:greater-or-equal #x6)
  (:always #x7))

(defcenum (cull-mode-flag-bits)
  (:none #x0)
  (:front #x1)
  (:back #x2)
  (:front-and-back #x3))

(defcenum (descriptor-type)
  (:sampler #x0)
  (:combined-image-sampler #x1)
  (:sampled-image #x2)
  (:storage-image #x3)
  (:uniform-texel-buffer #x4)
  (:storage-texel-buffer #x5)
  (:uniform-buffer #x6)
  (:storage-buffer #x7)
  (:uniform-buffer-dynamic #x8)
  (:storage-buffer-dynamic #x9)
  (:input-attachment #xA)
  (:inline-uniform-block-ext #x3B9CE510) ;; 
  (:acceleration-structure-khr #x3B9D13F0) ;; 
  (:acceleration-structure-nv #x3B9D4E88) ;; 
  (:mutable-valve #x3BA02518)) ;; 

(defcenum (device-create-flag-bits))

(defcenum (dynamic-state)
  (:viewport #x0)
  (:scissor #x1)
  (:line-width #x2)
  (:depth-bias #x3)
  (:blend-constants #x4)
  (:depth-bounds #x5)
  (:stencil-compare-mask #x6)
  (:stencil-write-mask #x7)
  (:stencil-reference #x8)
  (:viewport-w-scaling-nv #x3B9C1DD8) ;; 
  (:discard-rectangle-ext #x3B9C4CB8) ;; 
  (:sample-locations-ext #x3B9CF898) ;; 
  (:viewport-shading-rate-palette-nv #x3B9D4AA4) ;; 
  (:viewport-coarse-sample-order-nv #x3B9D4AA6) ;; 
  (:exclusive-scissor-nv #x3B9DEAC9) ;; 
  (:fragment-shading-rate-khr #x3B9E3CD0) ;; 
  (:line-stipple-ext #x3B9EBDB8) ;; 
  (:cull-mode-ext #x3B9EDCF8) ;; 
  (:front-face-ext #x3B9EDCF9) ;; 
  (:primitive-topology-ext #x3B9EDCFA) ;; 
  (:viewport-with-count-ext #x3B9EDCFB) ;; 
  (:scissor-with-count-ext #x3B9EDCFC) ;; 
  (:vertex-input-binding-stride-ext #x3B9EDCFD) ;; 
  (:depth-test-enable-ext #x3B9EDCFE) ;; 
  (:depth-write-enable-ext #x3B9EDCFF) ;; 
  (:depth-compare-op-ext #x3B9EDD00) ;; 
  (:depth-bounds-test-enable-ext #x3B9EDD01) ;; 
  (:stencil-test-enable-ext #x3B9EDD02) ;; 
  (:stencil-op-ext #x3B9EDD03) ;; 
  (:ray-tracing-pipeline-stack-size-khr #x3BA01578) ;; 
  (:vertex-input-ext #x3BA02900) ;; 
  (:patch-control-points-ext #x3BA08AA8) ;; 
  (:rasterizer-discard-enable-ext #x3BA08AA9) ;; 
  (:depth-bias-enable-ext #x3BA08AAA) ;; 
  (:logic-op-ext #x3BA08AAB) ;; 
  (:primitive-restart-enable-ext #x3BA08AAC) ;; 
  (:color-write-enable-ext #x3BA09A48)) ;; 

(defcenum (fence-create-flag-bits)
  (:signaled #x1))

(defcenum (polygon-mode)
  (:fill #x0)
  (:line #x1)
  (:point #x2)
  (:fill-rectangle-nv #x3B9D1FA8)) ;; 

(defcenum (format)
  (:undefined #x0)
  (:r4g4-unorm-pack8 #x1)
  (:r4g4b4a4-unorm-pack16 #x2)
  (:b4g4r4a4-unorm-pack16 #x3)
  (:r5g6b5-unorm-pack16 #x4)
  (:b5g6r5-unorm-pack16 #x5)
  (:r5g5b5a1-unorm-pack16 #x6)
  (:b5g5r5a1-unorm-pack16 #x7)
  (:a1r5g5b5-unorm-pack16 #x8)
  (:r8-unorm #x9)
  (:r8-snorm #xA)
  (:r8-uscaled #xB)
  (:r8-sscaled #xC)
  (:r8-uint #xD)
  (:r8-sint #xE)
  (:r8-srgb #xF)
  (:r8g8-unorm #x10)
  (:r8g8-snorm #x11)
  (:r8g8-uscaled #x12)
  (:r8g8-sscaled #x13)
  (:r8g8-uint #x14)
  (:r8g8-sint #x15)
  (:r8g8-srgb #x16)
  (:r8g8b8-unorm #x17)
  (:r8g8b8-snorm #x18)
  (:r8g8b8-uscaled #x19)
  (:r8g8b8-sscaled #x1A)
  (:r8g8b8-uint #x1B)
  (:r8g8b8-sint #x1C)
  (:r8g8b8-srgb #x1D)
  (:b8g8r8-unorm #x1E)
  (:b8g8r8-snorm #x1F)
  (:b8g8r8-uscaled #x20)
  (:b8g8r8-sscaled #x21)
  (:b8g8r8-uint #x22)
  (:b8g8r8-sint #x23)
  (:b8g8r8-srgb #x24)
  (:r8g8b8a8-unorm #x25)
  (:r8g8b8a8-snorm #x26)
  (:r8g8b8a8-uscaled #x27)
  (:r8g8b8a8-sscaled #x28)
  (:r8g8b8a8-uint #x29)
  (:r8g8b8a8-sint #x2A)
  (:r8g8b8a8-srgb #x2B)
  (:b8g8r8a8-unorm #x2C)
  (:b8g8r8a8-snorm #x2D)
  (:b8g8r8a8-uscaled #x2E)
  (:b8g8r8a8-sscaled #x2F)
  (:b8g8r8a8-uint #x30)
  (:b8g8r8a8-sint #x31)
  (:b8g8r8a8-srgb #x32)
  (:a8b8g8r8-unorm-pack32 #x33)
  (:a8b8g8r8-snorm-pack32 #x34)
  (:a8b8g8r8-uscaled-pack32 #x35)
  (:a8b8g8r8-sscaled-pack32 #x36)
  (:a8b8g8r8-uint-pack32 #x37)
  (:a8b8g8r8-sint-pack32 #x38)
  (:a8b8g8r8-srgb-pack32 #x39)
  (:a2r10g10b10-unorm-pack32 #x3A)
  (:a2r10g10b10-snorm-pack32 #x3B)
  (:a2r10g10b10-uscaled-pack32 #x3C)
  (:a2r10g10b10-sscaled-pack32 #x3D)
  (:a2r10g10b10-uint-pack32 #x3E)
  (:a2r10g10b10-sint-pack32 #x3F)
  (:a2b10g10r10-unorm-pack32 #x40)
  (:a2b10g10r10-snorm-pack32 #x41)
  (:a2b10g10r10-uscaled-pack32 #x42)
  (:a2b10g10r10-sscaled-pack32 #x43)
  (:a2b10g10r10-uint-pack32 #x44)
  (:a2b10g10r10-sint-pack32 #x45)
  (:r16-unorm #x46)
  (:r16-snorm #x47)
  (:r16-uscaled #x48)
  (:r16-sscaled #x49)
  (:r16-uint #x4A)
  (:r16-sint #x4B)
  (:r16-sfloat #x4C)
  (:r16g16-unorm #x4D)
  (:r16g16-snorm #x4E)
  (:r16g16-uscaled #x4F)
  (:r16g16-sscaled #x50)
  (:r16g16-uint #x51)
  (:r16g16-sint #x52)
  (:r16g16-sfloat #x53)
  (:r16g16b16-unorm #x54)
  (:r16g16b16-snorm #x55)
  (:r16g16b16-uscaled #x56)
  (:r16g16b16-sscaled #x57)
  (:r16g16b16-uint #x58)
  (:r16g16b16-sint #x59)
  (:r16g16b16-sfloat #x5A)
  (:r16g16b16a16-unorm #x5B)
  (:r16g16b16a16-snorm #x5C)
  (:r16g16b16a16-uscaled #x5D)
  (:r16g16b16a16-sscaled #x5E)
  (:r16g16b16a16-uint #x5F)
  (:r16g16b16a16-sint #x60)
  (:r16g16b16a16-sfloat #x61)
  (:r32-uint #x62)
  (:r32-sint #x63)
  (:r32-sfloat #x64)
  (:r32g32-uint #x65)
  (:r32g32-sint #x66)
  (:r32g32-sfloat #x67)
  (:r32g32b32-uint #x68)
  (:r32g32b32-sint #x69)
  (:r32g32b32-sfloat #x6A)
  (:r32g32b32a32-uint #x6B)
  (:r32g32b32a32-sint #x6C)
  (:r32g32b32a32-sfloat #x6D)
  (:r64-uint #x6E)
  (:r64-sint #x6F)
  (:r64-sfloat #x70)
  (:r64g64-uint #x71)
  (:r64g64-sint #x72)
  (:r64g64-sfloat #x73)
  (:r64g64b64-uint #x74)
  (:r64g64b64-sint #x75)
  (:r64g64b64-sfloat #x76)
  (:r64g64b64a64-uint #x77)
  (:r64g64b64a64-sint #x78)
  (:r64g64b64a64-sfloat #x79)
  (:b10g11r11-ufloat-pack32 #x7A)
  (:e5b9g9r9-ufloat-pack32 #x7B)
  (:d16-unorm #x7C)
  (:x8-d24-unorm-pack32 #x7D)
  (:d32-sfloat #x7E)
  (:s8-uint #x7F)
  (:d16-unorm-s8-uint #x80)
  (:d24-unorm-s8-uint #x81)
  (:d32-sfloat-s8-uint #x82)
  (:bc1-rgb-unorm-block #x83)
  (:bc1-rgb-srgb-block #x84)
  (:bc1-rgba-unorm-block #x85)
  (:bc1-rgba-srgb-block #x86)
  (:bc2-unorm-block #x87)
  (:bc2-srgb-block #x88)
  (:bc3-unorm-block #x89)
  (:bc3-srgb-block #x8A)
  (:bc4-unorm-block #x8B)
  (:bc4-snorm-block #x8C)
  (:bc5-unorm-block #x8D)
  (:bc5-snorm-block #x8E)
  (:bc6h-ufloat-block #x8F)
  (:bc6h-sfloat-block #x90)
  (:bc7-unorm-block #x91)
  (:bc7-srgb-block #x92)
  (:etc2-r8g8b8-unorm-block #x93)
  (:etc2-r8g8b8-srgb-block #x94)
  (:etc2-r8g8b8a1-unorm-block #x95)
  (:etc2-r8g8b8a1-srgb-block #x96)
  (:etc2-r8g8b8a8-unorm-block #x97)
  (:etc2-r8g8b8a8-srgb-block #x98)
  (:eac-r11-unorm-block #x99)
  (:eac-r11-snorm-block #x9A)
  (:eac-r11g11-unorm-block #x9B)
  (:eac-r11g11-snorm-block #x9C)
  (:astc-4x4-unorm-block #x9D)
  (:astc-4x4-srgb-block #x9E)
  (:astc-5x4-unorm-block #x9F)
  (:astc-5x4-srgb-block #xA0)
  (:astc-5x5-unorm-block #xA1)
  (:astc-5x5-srgb-block #xA2)
  (:astc-6x5-unorm-block #xA3)
  (:astc-6x5-srgb-block #xA4)
  (:astc-6x6-unorm-block #xA5)
  (:astc-6x6-srgb-block #xA6)
  (:astc-8x5-unorm-block #xA7)
  (:astc-8x5-srgb-block #xA8)
  (:astc-8x6-unorm-block #xA9)
  (:astc-8x6-srgb-block #xAA)
  (:astc-8x8-unorm-block #xAB)
  (:astc-8x8-srgb-block #xAC)
  (:astc-10x5-unorm-block #xAD)
  (:astc-10x5-srgb-block #xAE)
  (:astc-10x6-unorm-block #xAF)
  (:astc-10x6-srgb-block #xB0)
  (:astc-10x8-unorm-block #xB1)
  (:astc-10x8-srgb-block #xB2)
  (:astc-10x10-unorm-block #xB3)
  (:astc-10x10-srgb-block #xB4)
  (:astc-12x10-unorm-block #xB5)
  (:astc-12x10-srgb-block #xB6)
  (:astc-12x12-unorm-block #xB7)
  (:astc-12x12-srgb-block #xB8)
  (:pvrtc1-2bpp-unorm-block-img #x3B9B9CF0) ;; 
  (:pvrtc1-4bpp-unorm-block-img #x3B9B9CF1) ;; 
  (:pvrtc2-2bpp-unorm-block-img #x3B9B9CF2) ;; 
  (:pvrtc2-4bpp-unorm-block-img #x3B9B9CF3) ;; 
  (:pvrtc1-2bpp-srgb-block-img #x3B9B9CF4) ;; 
  (:pvrtc1-4bpp-srgb-block-img #x3B9B9CF5) ;; 
  (:pvrtc2-2bpp-srgb-block-img #x3B9B9CF6) ;; 
  (:pvrtc2-4bpp-srgb-block-img #x3B9B9CF7) ;; 
  (:astc-4x4-sfloat-block-ext #x3B9BCBD0) ;; 
  (:astc-5x4-sfloat-block-ext #x3B9BCBD1) ;; 
  (:astc-5x5-sfloat-block-ext #x3B9BCBD2) ;; 
  (:astc-6x5-sfloat-block-ext #x3B9BCBD3) ;; 
  (:astc-6x6-sfloat-block-ext #x3B9BCBD4) ;; 
  (:astc-8x5-sfloat-block-ext #x3B9BCBD5) ;; 
  (:astc-8x6-sfloat-block-ext #x3B9BCBD6) ;; 
  (:astc-8x8-sfloat-block-ext #x3B9BCBD7) ;; 
  (:astc-10x5-sfloat-block-ext #x3B9BCBD8) ;; 
  (:astc-10x6-sfloat-block-ext #x3B9BCBD9) ;; 
  (:astc-10x8-sfloat-block-ext #x3B9BCBDA) ;; 
  (:astc-10x10-sfloat-block-ext #x3B9BCBDB) ;; 
  (:astc-12x10-sfloat-block-ext #x3B9BCBDC) ;; 
  (:astc-12x12-sfloat-block-ext #x3B9BCBDD) ;; 
  (:g8b8g8r8-422-unorm #x3B9D2B60) ;; 
  (:b8g8r8g8-422-unorm #x3B9D2B61) ;; 
  (:g8-b8-r8-3plane-420-unorm #x3B9D2B62) ;; 
  (:g8-b8r8-2plane-420-unorm #x3B9D2B63) ;; 
  (:g8-b8-r8-3plane-422-unorm #x3B9D2B64) ;; 
  (:g8-b8r8-2plane-422-unorm #x3B9D2B65) ;; 
  (:g8-b8-r8-3plane-444-unorm #x3B9D2B66) ;; 
  (:r10x6-unorm-pack16 #x3B9D2B67) ;; 
  (:r10x6g10x6-unorm-2pack16 #x3B9D2B68) ;; 
  (:r10x6g10x6b10x6a10x6-unorm-4pack16 #x3B9D2B69) ;; 
  (:g10x6b10x6g10x6r10x6-422-unorm-4pack16 #x3B9D2B6A) ;; 
  (:b10x6g10x6r10x6g10x6-422-unorm-4pack16 #x3B9D2B6B) ;; 
  (:g10x6-b10x6-r10x6-3plane-420-unorm-3pack16 #x3B9D2B6C) ;; 
  (:g10x6-b10x6r10x6-2plane-420-unorm-3pack16 #x3B9D2B6D) ;; 
  (:g10x6-b10x6-r10x6-3plane-422-unorm-3pack16 #x3B9D2B6E) ;; 
  (:g10x6-b10x6r10x6-2plane-422-unorm-3pack16 #x3B9D2B6F) ;; 
  (:g10x6-b10x6-r10x6-3plane-444-unorm-3pack16 #x3B9D2B70) ;; 
  (:r12x4-unorm-pack16 #x3B9D2B71) ;; 
  (:r12x4g12x4-unorm-2pack16 #x3B9D2B72) ;; 
  (:r12x4g12x4b12x4a12x4-unorm-4pack16 #x3B9D2B73) ;; 
  (:g12x4b12x4g12x4r12x4-422-unorm-4pack16 #x3B9D2B74) ;; 
  (:b12x4g12x4r12x4g12x4-422-unorm-4pack16 #x3B9D2B75) ;; 
  (:g12x4-b12x4-r12x4-3plane-420-unorm-3pack16 #x3B9D2B76) ;; 
  (:g12x4-b12x4r12x4-2plane-420-unorm-3pack16 #x3B9D2B77) ;; 
  (:g12x4-b12x4-r12x4-3plane-422-unorm-3pack16 #x3B9D2B78) ;; 
  (:g12x4-b12x4r12x4-2plane-422-unorm-3pack16 #x3B9D2B79) ;; 
  (:g12x4-b12x4-r12x4-3plane-444-unorm-3pack16 #x3B9D2B7A) ;; 
  (:g16b16g16r16-422-unorm #x3B9D2B7B) ;; 
  (:b16g16r16g16-422-unorm #x3B9D2B7C) ;; 
  (:g16-b16-r16-3plane-420-unorm #x3B9D2B7D) ;; 
  (:g16-b16r16-2plane-420-unorm #x3B9D2B7E) ;; 
  (:g16-b16-r16-3plane-422-unorm #x3B9D2B7F) ;; 
  (:g16-b16r16-2plane-422-unorm #x3B9D2B80) ;; 
  (:g16-b16-r16-3plane-444-unorm #x3B9D2B81) ;; 
  (:g8-b8r8-2plane-444-unorm-ext #x3B9FD310) ;; 
  (:g10x6-b10x6r10x6-2plane-444-unorm-3pack16-ext #x3B9FD311) ;; 
  (:g12x4-b12x4r12x4-2plane-444-unorm-3pack16-ext #x3B9FD312) ;; 
  (:g16-b16r16-2plane-444-unorm-ext #x3B9FD313) ;; 
  (:a4r4g4b4-unorm-pack16-ext #x3B9FFA20) ;; 
  (:a4b4g4r4-unorm-pack16-ext #x3B9FFA21)) ;; 

(defcenum (format-feature-flag-bits)
  (:sampled-image #x1) ;; Format can be used for sampled images (SAMPLED_IMAGE and COMBINED_IMAGE_SAMPLER descriptor types)
  (:storage-image #x2) ;; Format can be used for storage images (STORAGE_IMAGE descriptor type)
  (:storage-image-atomic #x4) ;; Format supports atomic operations in case it is used for storage images
  (:uniform-texel-buffer #x8) ;; Format can be used for uniform texel buffers (TBOs)
  (:storage-texel-buffer #x10) ;; Format can be used for storage texel buffers (IBOs)
  (:storage-texel-buffer-atomic #x20) ;; Format supports atomic operations in case it is used for storage texel buffers
  (:vertex-buffer #x40) ;; Format can be used for vertex buffers (VBOs)
  (:color-attachment #x80) ;; Format can be used for color attachment images
  (:color-attachment-blend #x100) ;; Format supports blending in case it is used for color attachment images
  (:depth-stencil-attachment #x200) ;; Format can be used for depth/stencil attachment images
  (:blit-src #x400) ;; Format can be used as the source image of blits with vkCmdBlitImage
  (:blit-dst #x800) ;; Format can be used as the destination image of blits with vkCmdBlitImage
  (:sampled-image-filter-linear #x1000) ;; Format can be filtered with VK_FILTER_LINEAR when being sampled
  (:sampled-image-filter-cubic #x2000) ;; 
  (:transfer-src #x4000) ;; 
  (:transfer-dst #x8000) ;; 
  (:sampled-image-filter-minmax #x10000) ;; 
  (:midpoint-chroma-samples #x20000) ;; 
  (:sampled-image-ycbcr-conversion-linear-filter #x40000) ;; 
  (:sampled-image-ycbcr-conversion-separate-reconstruction-filter #x80000) ;; 
  (:sampled-image-ycbcr-conversion-chroma-reconstruction-explicit #x100000) ;; 
  (:sampled-image-ycbcr-conversion-chroma-reconstruction-explicit-forceable #x200000) ;; 
  (:disjoint #x400000) ;; 
  (:cosited-chroma-samples #x800000) ;; 
  (:fragment-density-map #x1000000) ;; 
  (:video-decode-output #x2000000) ;; 
  (:video-decode-dpb #x4000000) ;; 
  (:video-encode-input #x8000000) ;; 
  (:video-encode-dpb #x10000000) ;; 
  (:acceleration-structure-vertex-buffer #x20000000) ;; 
  (:fragment-shading-rate-attachment #x40000000)) ;; 

(defcenum (front-face)
  (:counter-clockwise #x0)
  (:clockwise #x1))

(defcenum (image-aspect-flag-bits)
  (:color #x1)
  (:depth #x2)
  (:stencil #x4)
  (:metadata #x8)
  (:plane-0 #x10) ;; 
  (:plane-1 #x20) ;; 
  (:plane-2 #x40) ;; 
  (:memory-plane-0 #x80) ;; 
  (:memory-plane-1 #x100) ;; 
  (:memory-plane-2 #x200) ;; 
  (:memory-plane-3 #x400)) ;; 

(defcenum (image-create-flag-bits)
  (:sparse-binding #x1) ;; Image should support sparse backing
  (:sparse-residency #x2) ;; Image should support sparse backing with partial residency
  (:sparse-aliased #x4) ;; Image should support constant data access to physical memory ranges mapped into multiple locations of sparse images
  (:mutable-format #x8) ;; Allows image views to have different format than the base image
  (:cube-compatible #x10) ;; Allows creating image views with cube type from the created image
  (:2d-array-compatible #x20) ;; 
  (:split-instance-bind-regions #x40) ;; 
  (:block-texel-view-compatible #x80) ;; 
  (:extended-usage #x100) ;; 
  (:disjoint #x200) ;; 
  (:alias #x400) ;; 
  (:protected #x800) ;; 
  (:sample-locations-compatible-depth #x1000) ;; 
  (:corner-sampled #x2000) ;; 
  (:subsampled #x4000)) ;; 

(defcenum (image-layout)
  (:undefined #x0) ;; Implicit layout an image is when its contents are undefined due to various reasons (e.g. right after creation)
  (:general #x1) ;; General layout when image can be used for any kind of access
  (:color-attachment-optimal #x2) ;; Optimal layout when image is only used for color attachment read/write
  (:depth-stencil-attachment-optimal #x3) ;; Optimal layout when image is only used for depth/stencil attachment read/write
  (:depth-stencil-read-only-optimal #x4) ;; Optimal layout when image is used for read only depth/stencil attachment and shader access
  (:shader-read-only-optimal #x5) ;; Optimal layout when image is used for read only shader access
  (:transfer-src-optimal #x6) ;; Optimal layout when image is used only as source of transfer operations
  (:transfer-dst-optimal #x7) ;; Optimal layout when image is used only as destination of transfer operations
  (:preinitialized #x8) ;; Initial layout used when the data is populated by the CPU
  (:present-src-khr #x3B9ACDEA) ;; 
  (:video-decode-dst-khr #x3B9B27C0) ;; 
  (:video-decode-src-khr #x3B9B27C1) ;; 
  (:video-decode-dpb-khr #x3B9B27C2) ;; 
  (:shared-present-khr #x3B9C7B98) ;; 
  (:depth-read-only-stencil-attachment-optimal #x3B9C9308) ;; 
  (:depth-attachment-stencil-read-only-optimal #x3B9C9309) ;; 
  (:fragment-shading-rate-attachment-optimal-khr #x3B9D4AA3) ;; 
  (:fragment-density-map-optimal-ext #x3B9E1D90) ;; 
  (:depth-attachment-optimal #x3B9E7768) ;; 
  (:depth-read-only-optimal #x3B9E7769) ;; 
  (:stencil-attachment-optimal #x3B9E776A) ;; 
  (:stencil-read-only-optimal #x3B9E776B) ;; 
  (:video-encode-dst-khr #x3B9F59F8) ;; 
  (:video-encode-src-khr #x3B9F59F9) ;; 
  (:video-encode-dpb-khr #x3B9F59FA) ;; 
  (:read-only-optimal-khr #x3B9F9490) ;; 
  (:attachment-optimal-khr #x3B9F9491)) ;; 

(defcenum (image-tiling)
  (:optimal #x0)
  (:linear #x1)
  (:drm-format-modifier-ext #x3B9D3330)) ;; 

(defcenum (image-type)
  (:1d #x0)
  (:2d #x1)
  (:3d #x2))

(defcenum (image-usage-flag-bits)
  (:transfer-src #x1) ;; Can be used as a source of transfer operations
  (:transfer-dst #x2) ;; Can be used as a destination of transfer operations
  (:sampled #x4) ;; Can be sampled from (SAMPLED_IMAGE and COMBINED_IMAGE_SAMPLER descriptor types)
  (:storage #x8) ;; Can be used as storage image (STORAGE_IMAGE descriptor type)
  (:color-attachment #x10) ;; Can be used as framebuffer color attachment
  (:depth-stencil-attachment #x20) ;; Can be used as framebuffer depth/stencil attachment
  (:transient-attachment #x40) ;; Image data not needed outside of rendering
  (:input-attachment #x80) ;; Can be used as framebuffer input attachment
  (:fragment-shading-rate-attachment #x100) ;; 
  (:fragment-density-map #x200) ;; 
  (:video-decode-dst #x400) ;; 
  (:video-decode-src #x800) ;; 
  (:video-decode-dpb #x1000) ;; 
  (:video-encode-dst #x2000) ;; 
  (:video-encode-src #x4000) ;; 
  (:video-encode-dpb #x8000) ;; 
  (:invocation-mask #x40000)) ;; 

(defcenum (image-view-create-flag-bits)
  (:ragment-density-map-dynamic #x1) ;; 
  (:ragment-density-map-deferred #x2)) ;; 

(defcenum (image-view-type)
  (:1d #x0)
  (:2d #x1)
  (:3d #x2)
  (:cube #x3)
  (:1d-array #x4)
  (:2d-array #x5)
  (:cube-array #x6))

(defcenum (sharing-mode)
  (:exclusive #x0)
  (:concurrent #x1))

(defcenum (index-type)
  (:uint16 #x0)
  (:uint32 #x1)
  (:none-khr #x3B9D4E88) ;; 
  (:uint8-ext #x3B9ED528)) ;; 

(defcenum (logic-op)
  (:clear #x0)
  (:and #x1)
  (:and-reverse #x2)
  (:copy #x3)
  (:and-inverted #x4)
  (:no-op #x5)
  (:xor #x6)
  (:or #x7)
  (:nor #x8)
  (:equivalent #x9)
  (:invert #xA)
  (:or-reverse #xB)
  (:copy-inverted #xC)
  (:or-inverted #xD)
  (:nand #xE)
  (:set #xF))

(defcenum (memory-heap-flag-bits)
  (:device-local #x1) ;; If set, heap represents device memory
  (:multi-instance #x2)) ;; 

(defcenum (access-flag-bits)
  (:none-khr #x0) ;; 
  (:indirect-command-read #x1) ;; Controls coherency of indirect command reads
  (:index-read #x2) ;; Controls coherency of index reads
  (:vertex-attribute-read #x4) ;; Controls coherency of vertex attribute reads
  (:uniform-read #x8) ;; Controls coherency of uniform buffer reads
  (:input-attachment-read #x10) ;; Controls coherency of input attachment reads
  (:shader-read #x20) ;; Controls coherency of shader reads
  (:shader-write #x40) ;; Controls coherency of shader writes
  (:color-attachment-read #x80) ;; Controls coherency of color attachment reads
  (:color-attachment-write #x100) ;; Controls coherency of color attachment writes
  (:depth-stencil-attachment-read #x200) ;; Controls coherency of depth/stencil attachment reads
  (:depth-stencil-attachment-write #x400) ;; Controls coherency of depth/stencil attachment writes
  (:transfer-read #x800) ;; Controls coherency of transfer reads
  (:transfer-write #x1000) ;; Controls coherency of transfer writes
  (:host-read #x2000) ;; Controls coherency of host reads
  (:host-write #x4000) ;; Controls coherency of host writes
  (:memory-read #x8000) ;; Controls coherency of memory reads
  (:memory-write #x10000) ;; Controls coherency of memory writes
  (:command-preprocess-read #x20000) ;; 
  (:command-preprocess-write #x40000) ;; 
  (:color-attachment-read-noncoherent #x80000) ;; 
  (:conditional-rendering-read #x100000) ;; 
  (:acceleration-structure-read #x200000) ;; 
  (:acceleration-structure-write #x400000) ;; 
  (:fragment-shading-rate-attachment-read #x800000) ;; 
  (:fragment-density-map-read #x1000000) ;; 
  (:transform-feedback-write #x2000000) ;; 
  (:transform-feedback-counter-read #x4000000) ;; 
  (:transform-feedback-counter-write #x8000000)) ;; 

(defcenum (memory-property-flag-bits)
  (:device-local #x1) ;; If otherwise stated, then allocate memory on device
  (:host-visible #x2) ;; Memory is mappable by host
  (:host-coherent #x4) ;; Memory will have i/o coherency. If not set, application may need to use vkFlushMappedMemoryRanges and vkInvalidateMappedMemoryRanges to flush/invalidate host cache
  (:host-cached #x8) ;; Memory will be cached by the host
  (:lazily-allocated #x10) ;; Memory may be allocated by the driver when it is required
  (:protected #x20) ;; 
  (:device-coherent #x40) ;; 
  (:device-uncached #x80) ;; 
  (:rdma-capable #x100)) ;; 

(defcenum (physical-device-type)
  (:other #x0)
  (:integrated-gpu #x1)
  (:discrete-gpu #x2)
  (:virtual-gpu #x3)
  (:cpu #x4))

(defcenum (pipeline-bind-point)
  (:graphics #x0)
  (:compute #x1)
  (:ray-tracing-khr #x3B9D4E88) ;; 
  (:subpass-shading-huawei #x3BA06B6B)) ;; 

(defcenum (pipeline-create-flag-bits)
  (:disable-optimization #x1)
  (:allow-derivatives #x2)
  (:derivative #x4)
  (:view-index-from-device-index #x8) ;; 
  (:dispatch-base #x10) ;; 
  (:defer-compile #x20) ;; 
  (:capture-statistics #x40) ;; 
  (:capture-internal-representations #x80) ;; 
  (:fail-on-pipeline-compile-required #x100) ;; 
  (:early-return-on-failure #x200) ;; 
  (:library #x800) ;; 
  (:ray-tracing-skip-triangles #x1000) ;; 
  (:ray-tracing-skip-aabbs #x2000) ;; 
  (:ray-tracing-no-null-any-hit-shaders #x4000) ;; 
  (:ray-tracing-no-null-closest-hit-shaders #x8000) ;; 
  (:ray-tracing-no-null-miss-shaders #x10000) ;; 
  (:ray-tracing-no-null-intersection-shaders #x20000) ;; 
  (:indirect-bindable #x40000) ;; 
  (:ray-tracing-shader-group-handle-capture-replay #x80000) ;; 
  (:ray-tracing-allow-motion #x100000) ;; 
  (:rasterization-state-create-fragment-shading-rate-attachment #x200000) ;; 
  (:rasterization-state-create-fragment-density-map-attachment #x400000)) ;; 

(defcenum (primitive-topology)
  (:point-list #x0)
  (:line-list #x1)
  (:line-strip #x2)
  (:triangle-list #x3)
  (:triangle-strip #x4)
  (:triangle-fan #x5)
  (:line-list-with-adjacency #x6)
  (:line-strip-with-adjacency #x7)
  (:triangle-list-with-adjacency #x8)
  (:triangle-strip-with-adjacency #x9)
  (:patch-list #xA))

(defcenum (query-control-flag-bits)
  (:precise #x1)) ;; Require precise results to be collected by the query

(defcenum (query-pipeline-statistic-flag-bits)
  (:input-assembly-vertices #x1) ;; Optional
  (:input-assembly-primitives #x2) ;; Optional
  (:vertex-shader-invocations #x4) ;; Optional
  (:geometry-shader-invocations #x8) ;; Optional
  (:geometry-shader-primitives #x10) ;; Optional
  (:clipping-invocations #x20) ;; Optional
  (:clipping-primitives #x40) ;; Optional
  (:fragment-shader-invocations #x80) ;; Optional
  (:tessellation-control-shader-patches #x100) ;; Optional
  (:tessellation-evaluation-shader-invocations #x200) ;; Optional
  (:compute-shader-invocations #x400)) ;; Optional

(defcenum (query-result-flag-bits)
  (:64 #x1) ;; Results of the queries are written to the destination buffer as 64-bit values
  (:wait #x2) ;; Results of the queries are waited on before proceeding with the result copy
  (:with-availability #x4) ;; Besides the results of the query, the availability of the results is also written
  (:partial #x8) ;; Copy the partial results of the query even if the final results are not available
  (:with-status #x10)) ;; 

(defcenum (query-type)
  (:occlusion #x0)
  (:pipeline-statistics #x1) ;; Optional
  (:timestamp #x2)
  (:result-status-only-khr #x3B9B23D8) ;; 
  (:transform-feedback-stream-ext #x3B9B3764) ;; 
  (:performance-query-khr #x3B9C8F20) ;; 
  (:acceleration-structure-compacted-size-khr #x3B9D13F0) ;; 
  (:acceleration-structure-serialization-size-khr #x3B9D13F1) ;; 
  (:acceleration-structure-compacted-size-nv #x3B9D4E88) ;; 
  (:performance-query-intel #x3B9DFE50) ;; 
  (:video-encode-bitstream-buffer-range-khr #x3B9F59F8)) ;; 

(defcenum (queue-flag-bits)
  (:graphics #x1) ;; Queue supports graphics operations
  (:compute #x2) ;; Queue supports compute operations
  (:transfer #x4) ;; Queue supports transfer operations
  (:sparse-binding #x8) ;; Queue supports sparse resource memory management operations
  (:protected #x10) ;; 
  (:video-decode #x20) ;; 
  (:video-encode #x40)) ;; 

(defcenum (subpass-contents)
  (:inline #x0)
  (:secondary-command-buffers #x1))

(defcenum (result :int)
  (:error-invalid-opaque-capture-address -1000257000) ;; 
  (:error-full-screen-exclusive-mode-lost-ext -1000255000) ;; 
  (:error-not-permitted-ext -1000174001) ;; 
  (:error-fragmentation -1000161000) ;; 
  (:error-invalid-drm-format-modifier-plane-layout-ext -1000158000) ;; 
  (:error-invalid-external-handle -1000072003) ;; 
  (:error-out-of-pool-memory -1000069000) ;; 
  (:error-invalid-shader-nv -1000012000) ;; 
  (:error-validation-failed-ext -1000011001) ;; 
  (:error-incompatible-display-khr -1000003001) ;; 
  (:error-out-of-date-khr -1000001004) ;; 
  (:error-native-window-in-use-khr -1000000001) ;; 
  (:error-surface-lost-khr -1000000000) ;; 
  (:error-unknown -13) ;; An unknown error has occurred, due to an implementation or application bug
  (:error-fragmented-pool -12) ;; A requested pool allocation has failed due to fragmentation of the pool's memory
  (:error-format-not-supported -11) ;; Requested format is not supported on this device
  (:error-too-many-objects -10) ;; Too many objects of the type have already been created
  (:error-incompatible-driver -9) ;; Unable to find a Vulkan driver
  (:error-feature-not-present -8) ;; Requested feature is not available on this device
  (:error-extension-not-present -7) ;; Extension specified does not exist
  (:error-layer-not-present -6) ;; Layer specified does not exist
  (:error-memory-map-failed -5) ;; Mapping of a memory object has failed
  (:error-device-lost -4) ;; The logical device has been lost. See <<devsandqueues-lost-device>>
  (:error-initialization-failed -3) ;; Initialization of a object has failed
  (:error-out-of-device-memory -2) ;; A device memory allocation has failed
  (:error-out-of-host-memory -1) ;; A host memory allocation has failed
  (:success #x0) ;; Command completed successfully
  (:not-ready #x1) ;; A fence or query has not yet completed
  (:timeout #x2) ;; A wait operation has not completed in the specified time
  (:event-set #x3) ;; An event is signaled
  (:event-reset #x4) ;; An event is unsignaled
  (:incomplete #x5) ;; A return array was too small for the result
  (:suboptimal-khr #x3B9ACDEB) ;; 
  (:thread-idle-khr #x3B9EE0E0) ;; 
  (:thread-done-khr #x3B9EE0E1) ;; 
  (:operation-deferred-khr #x3B9EE0E2) ;; 
  (:operation-not-deferred-khr #x3B9EE0E3) ;; 
  (:pipeline-compile-required-ext #x3B9F5228)) ;; 

(defparameter *result-comments*
  (alexandria:plist-hash-table
    '(:error-invalid-opaque-capture-address ""
     :error-full-screen-exclusive-mode-lost-ext ""
     :error-not-permitted-ext ""
     :error-fragmentation ""
     :error-invalid-drm-format-modifier-plane-layout-ext ""
     :error-invalid-external-handle ""
     :error-out-of-pool-memory ""
     :error-invalid-shader-nv ""
     :error-validation-failed-ext ""
     :error-incompatible-display-khr ""
     :error-out-of-date-khr ""
     :error-native-window-in-use-khr ""
     :error-surface-lost-khr ""
     :error-unknown "An unknown error has occurred, due to an implementation or application bug"
     :error-fragmented-pool "A requested pool allocation has failed due to fragmentation of the pool's memory"
     :error-format-not-supported "Requested format is not supported on this device"
     :error-too-many-objects "Too many objects of the type have already been created"
     :error-incompatible-driver "Unable to find a Vulkan driver"
     :error-feature-not-present "Requested feature is not available on this device"
     :error-extension-not-present "Extension specified does not exist"
     :error-layer-not-present "Layer specified does not exist"
     :error-memory-map-failed "Mapping of a memory object has failed"
     :error-device-lost "The logical device has been lost. See <<devsandqueues-lost-device>>"
     :error-initialization-failed "Initialization of a object has failed"
     :error-out-of-device-memory "A device memory allocation has failed"
     :error-out-of-host-memory "A host memory allocation has failed"
     :success "Command completed successfully"
     :not-ready "A fence or query has not yet completed"
     :timeout "A wait operation has not completed in the specified time"
     :event-set "An event is signaled"
     :event-reset "An event is unsignaled"
     :incomplete "A return array was too small for the result"
     :suboptimal-khr ""
     :thread-idle-khr ""
     :thread-done-khr ""
     :operation-deferred-khr ""
     :operation-not-deferred-khr ""
     :pipeline-compile-required-ext "")))

(defcenum (shader-stage-flag-bits)
  (:vertex #x1)
  (:tessellation-control #x2)
  (:tessellation-evaluation #x4)
  (:geometry #x8)
  (:fragment #x10)
  (:all-graphics #x1F)
  (:compute #x20)
  (:task #x40) ;; 
  (:mesh #x80) ;; 
  (:raygen #x100) ;; 
  (:any-hit #x200) ;; 
  (:closest-hit #x400) ;; 
  (:miss #x800) ;; 
  (:intersection #x1000) ;; 
  (:callable #x2000) ;; 
  (:subpass-shading #x4000) ;; 
  (:all #x7FFFFFFF))

(defcenum (sparse-memory-bind-flag-bits)
  (:metadata #x1)) ;; Operation binds resource metadata to memory

(defcenum (stencil-face-flag-bits)
  (:front #x1) ;; Front face
  (:back #x2) ;; Back face
  (:front-and-back #x3)) ;; Front and back faces

(defcenum (stencil-op)
  (:keep #x0)
  (:zero #x1)
  (:replace #x2)
  (:increment-and-clamp #x3)
  (:decrement-and-clamp #x4)
  (:invert #x5)
  (:increment-and-wrap #x6)
  (:decrement-and-wrap #x7))

(defcenum (structure-type)
  (:application-info #x0)
  (:instance-create-info #x1)
  (:device-queue-create-info #x2)
  (:device-create-info #x3)
  (:submit-info #x4)
  (:memory-allocate-info #x5)
  (:mapped-memory-range #x6)
  (:bind-sparse-info #x7)
  (:fence-create-info #x8)
  (:semaphore-create-info #x9)
  (:event-create-info #xA)
  (:query-pool-create-info #xB)
  (:buffer-create-info #xC)
  (:buffer-view-create-info #xD)
  (:image-create-info #xE)
  (:image-view-create-info #xF)
  (:shader-module-create-info #x10)
  (:pipeline-cache-create-info #x11)
  (:pipeline-shader-stage-create-info #x12)
  (:pipeline-vertex-input-state-create-info #x13)
  (:pipeline-input-assembly-state-create-info #x14)
  (:pipeline-tessellation-state-create-info #x15)
  (:pipeline-viewport-state-create-info #x16)
  (:pipeline-rasterization-state-create-info #x17)
  (:pipeline-multisample-state-create-info #x18)
  (:pipeline-depth-stencil-state-create-info #x19)
  (:pipeline-color-blend-state-create-info #x1A)
  (:pipeline-dynamic-state-create-info #x1B)
  (:graphics-pipeline-create-info #x1C)
  (:compute-pipeline-create-info #x1D)
  (:pipeline-layout-create-info #x1E)
  (:sampler-create-info #x1F)
  (:descriptor-set-layout-create-info #x20)
  (:descriptor-pool-create-info #x21)
  (:descriptor-set-allocate-info #x22)
  (:write-descriptor-set #x23)
  (:copy-descriptor-set #x24)
  (:framebuffer-create-info #x25)
  (:render-pass-create-info #x26)
  (:command-pool-create-info #x27)
  (:command-buffer-allocate-info #x28)
  (:command-buffer-inheritance-info #x29)
  (:command-buffer-begin-info #x2A)
  (:render-pass-begin-info #x2B)
  (:buffer-memory-barrier #x2C)
  (:image-memory-barrier #x2D)
  (:memory-barrier #x2E)
  (:loader-instance-create-info #x2F) ;; Reserved for internal use by the loader, layers, and ICDs
  (:loader-device-create-info #x30) ;; Reserved for internal use by the loader, layers, and ICDs
  (:physical-device-vulkan-1-1-features #x31) ;; 
  (:physical-device-vulkan-1-1-properties #x32) ;; 
  (:physical-device-vulkan-1-2-features #x33) ;; 
  (:physical-device-vulkan-1-2-properties #x34) ;; 
  (:swapchain-create-info-khr #x3B9ACDE8) ;; 
  (:present-info-khr #x3B9ACDE9) ;; 
  (:display-mode-create-info-khr #x3B9AD1D0) ;; 
  (:display-surface-create-info-khr #x3B9AD1D1) ;; 
  (:display-present-info-khr #x3B9AD5B8) ;; 
  (:xlib-surface-create-info-khr #x3B9AD9A0) ;; 
  (:xcb-surface-create-info-khr #x3B9ADD88) ;; 
  (:wayland-surface-create-info-khr #x3B9AE170) ;; 
  (:android-surface-create-info-khr #x3B9AE940) ;; 
  (:win32-surface-create-info-khr #x3B9AED28) ;; 
  (:debug-report-callback-create-info-ext #x3B9AF4F8) ;; 
  (:pipeline-rasterization-state-rasterization-order-amd #x3B9B1050) ;; 
  (:debug-marker-object-name-info-ext #x3B9B1FF0) ;; 
  (:debug-marker-object-tag-info-ext #x3B9B1FF1) ;; 
  (:debug-marker-marker-info-ext #x3B9B1FF2) ;; 
  (:video-profile-khr #x3B9B23D8) ;; 
  (:video-capabilities-khr #x3B9B23D9) ;; 
  (:video-picture-resource-khr #x3B9B23DA) ;; 
  (:video-get-memory-properties-khr #x3B9B23DB) ;; 
  (:video-bind-memory-khr #x3B9B23DC) ;; 
  (:video-session-create-info-khr #x3B9B23DD) ;; 
  (:video-session-parameters-create-info-khr #x3B9B23DE) ;; 
  (:video-session-parameters-update-info-khr #x3B9B23DF) ;; 
  (:video-begin-coding-info-khr #x3B9B23E0) ;; 
  (:video-end-coding-info-khr #x3B9B23E1) ;; 
  (:video-coding-control-info-khr #x3B9B23E2) ;; 
  (:video-reference-slot-khr #x3B9B23E3) ;; 
  (:video-queue-family-properties-2-khr #x3B9B23E4) ;; 
  (:video-profiles-khr #x3B9B23E5) ;; 
  (:physical-device-video-format-info-khr #x3B9B23E6) ;; 
  (:video-format-properties-khr #x3B9B23E7) ;; 
  (:video-decode-info-khr #x3B9B27C0) ;; 
  (:dedicated-allocation-image-create-info-nv #x3B9B2F90) ;; 
  (:dedicated-allocation-buffer-create-info-nv #x3B9B2F91) ;; 
  (:dedicated-allocation-memory-allocate-info-nv #x3B9B2F92) ;; 
  (:physical-device-transform-feedback-features-ext #x3B9B3760) ;; 
  (:physical-device-transform-feedback-properties-ext #x3B9B3761) ;; 
  (:pipeline-rasterization-state-stream-create-info-ext #x3B9B3762) ;; 
  (:cu-module-create-info-nvx #x3B9B3B48) ;; 
  (:cu-function-create-info-nvx #x3B9B3B49) ;; 
  (:cu-launch-info-nvx #x3B9B3B4A) ;; 
  (:image-view-handle-info-nvx #x3B9B3F30) ;; 
  (:image-view-address-properties-nvx #x3B9B3F31) ;; 
  (:video-encode-h264-capabilities-ext #x3B9B5E70) ;; 
  (:video-encode-h264-session-create-info-ext #x3B9B5E71) ;; 
  (:video-encode-h264-session-parameters-create-info-ext #x3B9B5E72) ;; 
  (:video-encode-h264-session-parameters-add-info-ext #x3B9B5E73) ;; 
  (:video-encode-h264-vcl-frame-info-ext #x3B9B5E74) ;; 
  (:video-encode-h264-dpb-slot-info-ext #x3B9B5E75) ;; 
  (:video-encode-h264-nalu-slice-ext #x3B9B5E76) ;; 
  (:video-encode-h264-emit-picture-parameters-ext #x3B9B5E77) ;; 
  (:video-encode-h264-profile-ext #x3B9B5E78) ;; 
  (:video-encode-h265-capabilities-ext #x3B9B6258) ;; 
  (:video-encode-h265-session-create-info-ext #x3B9B6259) ;; 
  (:video-encode-h265-session-parameters-create-info-ext #x3B9B625A) ;; 
  (:video-encode-h265-session-parameters-add-info-ext #x3B9B625B) ;; 
  (:video-encode-h265-vcl-frame-info-ext #x3B9B625C) ;; 
  (:video-encode-h265-dpb-slot-info-ext #x3B9B625D) ;; 
  (:video-encode-h265-nalu-slice-ext #x3B9B625E) ;; 
  (:video-encode-h265-emit-picture-parameters-ext #x3B9B625F) ;; 
  (:video-encode-h265-profile-ext #x3B9B6260) ;; 
  (:video-encode-h265-reference-lists-ext #x3B9B6261) ;; 
  (:video-decode-h264-capabilities-ext #x3B9B6640) ;; 
  (:video-decode-h264-session-create-info-ext #x3B9B6641) ;; 
  (:video-decode-h264-picture-info-ext #x3B9B6642) ;; 
  (:video-decode-h264-mvc-ext #x3B9B6643) ;; 
  (:video-decode-h264-profile-ext #x3B9B6644) ;; 
  (:video-decode-h264-session-parameters-create-info-ext #x3B9B6645) ;; 
  (:video-decode-h264-session-parameters-add-info-ext #x3B9B6646) ;; 
  (:video-decode-h264-dpb-slot-info-ext #x3B9B6647) ;; 
  (:texture-lod-gather-format-properties-amd #x3B9B6A28) ;; 
  (:rendering-info-khr #x3B9B75E0) ;; 
  (:rendering-attachment-info-khr #x3B9B75E1) ;; 
  (:pipeline-rendering-create-info-khr #x3B9B75E2) ;; 
  (:physical-device-dynamic-rendering-features-khr #x3B9B75E3) ;; 
  (:command-buffer-inheritance-rendering-info-khr #x3B9B75E4) ;; 
  (:rendering-fragment-shading-rate-attachment-info-khr #x3B9B75E6) ;; 
  (:rendering-fragment-density-map-attachment-info-ext #x3B9B75E7) ;; 
  (:attachment-sample-count-info-amd #x3B9B75E8) ;; 
  (:multiview-per-view-attributes-info-nvx #x3B9B75E9) ;; 
  (:stream-descriptor-surface-create-info-ggp #x3B9B8968) ;; 
  (:physical-device-corner-sampled-image-features-nv #x3B9B8D50) ;; 
  (:render-pass-multiview-create-info #x3B9B9908) ;; 
  (:physical-device-multiview-features #x3B9B9909) ;; 
  (:physical-device-multiview-properties #x3B9B990A) ;; 
  (:external-memory-image-create-info-nv #x3B9BA4C0) ;; 
  (:export-memory-allocate-info-nv #x3B9BA4C1) ;; 
  (:import-memory-win32-handle-info-nv #x3B9BA8A8) ;; 
  (:export-memory-win32-handle-info-nv #x3B9BA8A9) ;; 
  (:win32-keyed-mutex-acquire-release-info-nv #x3B9BAC90) ;; 
  (:physical-device-features-2 #x3B9BB078) ;; 
  (:physical-device-properties-2 #x3B9BB079) ;; 
  (:format-properties-2 #x3B9BB07A) ;; 
  (:image-format-properties-2 #x3B9BB07B) ;; 
  (:physical-device-image-format-info-2 #x3B9BB07C) ;; 
  (:queue-family-properties-2 #x3B9BB07D) ;; 
  (:physical-device-memory-properties-2 #x3B9BB07E) ;; 
  (:sparse-image-format-properties-2 #x3B9BB07F) ;; 
  (:physical-device-sparse-image-format-info-2 #x3B9BB080) ;; 
  (:memory-allocate-flags-info #x3B9BB460) ;; 
  (:device-group-render-pass-begin-info #x3B9BB463) ;; 
  (:device-group-command-buffer-begin-info #x3B9BB464) ;; 
  (:device-group-submit-info #x3B9BB465) ;; 
  (:device-group-bind-sparse-info #x3B9BB466) ;; 
  (:device-group-present-capabilities-khr #x3B9BB467) ;; 
  (:image-swapchain-create-info-khr #x3B9BB468) ;; 
  (:bind-image-memory-swapchain-info-khr #x3B9BB469) ;; 
  (:acquire-next-image-info-khr #x3B9BB46A) ;; 
  (:device-group-present-info-khr #x3B9BB46B) ;; 
  (:device-group-swapchain-create-info-khr #x3B9BB46C) ;; 
  (:bind-buffer-memory-device-group-info #x3B9BB46D) ;; 
  (:bind-image-memory-device-group-info #x3B9BB46E) ;; 
  (:validation-flags-ext #x3B9BB848) ;; 
  (:vi-surface-create-info-nn #x3B9BBC30) ;; 
  (:physical-device-shader-draw-parameters-features #x3B9BC018) ;; 
  (:physical-device-texture-compression-astc-hdr-features-ext #x3B9BCBD0) ;; 
  (:image-view-astc-decode-mode-ext #x3B9BCFB8) ;; 
  (:physical-device-astc-decode-features-ext #x3B9BCFB9) ;; 
  (:physical-device-group-properties #x3B9BDB70) ;; 
  (:device-group-device-create-info #x3B9BDB71) ;; 
  (:physical-device-external-image-format-info #x3B9BDF58) ;; 
  (:external-image-format-properties #x3B9BDF59) ;; 
  (:physical-device-external-buffer-info #x3B9BDF5A) ;; 
  (:external-buffer-properties #x3B9BDF5B) ;; 
  (:physical-device-id-properties #x3B9BDF5C) ;; 
  (:external-memory-buffer-create-info #x3B9BE340) ;; 
  (:external-memory-image-create-info #x3B9BE341) ;; 
  (:export-memory-allocate-info #x3B9BE342) ;; 
  (:import-memory-win32-handle-info-khr #x3B9BE728) ;; 
  (:export-memory-win32-handle-info-khr #x3B9BE729) ;; 
  (:memory-win32-handle-properties-khr #x3B9BE72A) ;; 
  (:memory-get-win32-handle-info-khr #x3B9BE72B) ;; 
  (:import-memory-fd-info-khr #x3B9BEB10) ;; 
  (:memory-fd-properties-khr #x3B9BEB11) ;; 
  (:memory-get-fd-info-khr #x3B9BEB12) ;; 
  (:win32-keyed-mutex-acquire-release-info-khr #x3B9BEEF8) ;; 
  (:physical-device-external-semaphore-info #x3B9BF2E0) ;; 
  (:external-semaphore-properties #x3B9BF2E1) ;; 
  (:export-semaphore-create-info #x3B9BF6C8) ;; 
  (:import-semaphore-win32-handle-info-khr #x3B9BFAB0) ;; 
  (:export-semaphore-win32-handle-info-khr #x3B9BFAB1) ;; 
  (:d3d12-fence-submit-info-khr #x3B9BFAB2) ;; 
  (:semaphore-get-win32-handle-info-khr #x3B9BFAB3) ;; 
  (:import-semaphore-fd-info-khr #x3B9BFE98) ;; 
  (:semaphore-get-fd-info-khr #x3B9BFE99) ;; 
  (:physical-device-push-descriptor-properties-khr #x3B9C0280) ;; 
  (:command-buffer-inheritance-conditional-rendering-info-ext #x3B9C0668) ;; 
  (:physical-device-conditional-rendering-features-ext #x3B9C0669) ;; 
  (:conditional-rendering-begin-info-ext #x3B9C066A) ;; 
  (:physical-device-shader-float16-int8-features #x3B9C0A50) ;; 
  (:physical-device-16bit-storage-features #x3B9C0E38) ;; 
  (:present-regions-khr #x3B9C1220) ;; 
  (:descriptor-update-template-create-info #x3B9C1608) ;; 
  (:pipeline-viewport-w-scaling-state-create-info-nv #x3B9C1DD8) ;; 
  (:surface-capabilities-2-ext #x3B9C2990) ;; 
  (:display-power-info-ext #x3B9C2D78) ;; 
  (:device-event-info-ext #x3B9C2D79) ;; 
  (:display-event-info-ext #x3B9C2D7A) ;; 
  (:swapchain-counter-create-info-ext #x3B9C2D7B) ;; 
  (:present-times-info-google #x3B9C3160) ;; 
  (:physical-device-subgroup-properties #x3B9C3930) ;; 
  (:physical-device-multiview-per-view-attributes-properties-nvx #x3B9C44E8) ;; 
  (:pipeline-viewport-swizzle-state-create-info-nv #x3B9C48D0) ;; 
  (:physical-device-discard-rectangle-properties-ext #x3B9C4CB8) ;; 
  (:pipeline-discard-rectangle-state-create-info-ext #x3B9C4CB9) ;; 
  (:physical-device-conservative-rasterization-properties-ext #x3B9C5488) ;; 
  (:pipeline-rasterization-conservative-state-create-info-ext #x3B9C5489) ;; 
  (:physical-device-depth-clip-enable-features-ext #x3B9C5870) ;; 
  (:pipeline-rasterization-depth-clip-state-create-info-ext #x3B9C5871) ;; 
  (:hdr-metadata-ext #x3B9C6428) ;; 
  (:physical-device-imageless-framebuffer-features #x3B9C6FE0) ;; 
  (:framebuffer-attachments-create-info #x3B9C6FE1) ;; 
  (:framebuffer-attachment-image-info #x3B9C6FE2) ;; 
  (:render-pass-attachment-begin-info #x3B9C6FE3) ;; 
  (:attachment-description-2 #x3B9C73C8) ;; 
  (:attachment-reference-2 #x3B9C73C9) ;; 
  (:subpass-description-2 #x3B9C73CA) ;; 
  (:subpass-dependency-2 #x3B9C73CB) ;; 
  (:render-pass-create-info-2 #x3B9C73CC) ;; 
  (:subpass-begin-info #x3B9C73CD) ;; 
  (:subpass-end-info #x3B9C73CE) ;; 
  (:shared-present-surface-capabilities-khr #x3B9C7B98) ;; 
  (:physical-device-external-fence-info #x3B9C7F80) ;; 
  (:external-fence-properties #x3B9C7F81) ;; 
  (:export-fence-create-info #x3B9C8368) ;; 
  (:import-fence-win32-handle-info-khr #x3B9C8750) ;; 
  (:export-fence-win32-handle-info-khr #x3B9C8751) ;; 
  (:fence-get-win32-handle-info-khr #x3B9C8752) ;; 
  (:import-fence-fd-info-khr #x3B9C8B38) ;; 
  (:fence-get-fd-info-khr #x3B9C8B39) ;; 
  (:physical-device-performance-query-features-khr #x3B9C8F20) ;; 
  (:physical-device-performance-query-properties-khr #x3B9C8F21) ;; 
  (:query-pool-performance-create-info-khr #x3B9C8F22) ;; 
  (:performance-query-submit-info-khr #x3B9C8F23) ;; 
  (:acquire-profiling-lock-info-khr #x3B9C8F24) ;; 
  (:performance-counter-khr #x3B9C8F25) ;; 
  (:performance-counter-description-khr #x3B9C8F26) ;; 
  (:physical-device-point-clipping-properties #x3B9C9308) ;; 
  (:render-pass-input-attachment-aspect-create-info #x3B9C9309) ;; 
  (:image-view-usage-create-info #x3B9C930A) ;; 
  (:pipeline-tessellation-domain-origin-state-create-info #x3B9C930B) ;; 
  (:physical-device-surface-info-2-khr #x3B9C9AD8) ;; 
  (:surface-capabilities-2-khr #x3B9C9AD9) ;; 
  (:surface-format-2-khr #x3B9C9ADA) ;; 
  (:physical-device-variable-pointers-features #x3B9C9EC0) ;; 
  (:display-properties-2-khr #x3B9CA2A8) ;; 
  (:display-plane-properties-2-khr #x3B9CA2A9) ;; 
  (:display-mode-properties-2-khr #x3B9CA2AA) ;; 
  (:display-plane-info-2-khr #x3B9CA2AB) ;; 
  (:display-plane-capabilities-2-khr #x3B9CA2AC) ;; 
  (:ios-surface-create-info-mvk #x3B9CA690) ;; 
  (:macos-surface-create-info-mvk #x3B9CAA78) ;; 
  (:memory-dedicated-requirements #x3B9CBA18) ;; 
  (:memory-dedicated-allocate-info #x3B9CBA19) ;; 
  (:debug-utils-object-name-info-ext #x3B9CBE00) ;; 
  (:debug-utils-object-tag-info-ext #x3B9CBE01) ;; 
  (:debug-utils-label-ext #x3B9CBE02) ;; 
  (:debug-utils-messenger-callback-data-ext #x3B9CBE03) ;; 
  (:debug-utils-messenger-create-info-ext #x3B9CBE04) ;; 
  (:android-hardware-buffer-usage-android #x3B9CC1E8) ;; 
  (:android-hardware-buffer-properties-android #x3B9CC1E9) ;; 
  (:android-hardware-buffer-format-properties-android #x3B9CC1EA) ;; 
  (:import-android-hardware-buffer-info-android #x3B9CC1EB) ;; 
  (:memory-get-android-hardware-buffer-info-android #x3B9CC1EC) ;; 
  (:external-format-android #x3B9CC1ED) ;; 
  (:android-hardware-buffer-format-properties-2-android #x3B9CC1EE) ;; 
  (:physical-device-sampler-filter-minmax-properties #x3B9CC5D0) ;; 
  (:sampler-reduction-mode-create-info #x3B9CC5D1) ;; 
  (:physical-device-inline-uniform-block-features-ext #x3B9CE510) ;; 
  (:physical-device-inline-uniform-block-properties-ext #x3B9CE511) ;; 
  (:write-descriptor-set-inline-uniform-block-ext #x3B9CE512) ;; 
  (:descriptor-pool-inline-uniform-block-create-info-ext #x3B9CE513) ;; 
  (:sample-locations-info-ext #x3B9CF898) ;; 
  (:render-pass-sample-locations-begin-info-ext #x3B9CF899) ;; 
  (:pipeline-sample-locations-state-create-info-ext #x3B9CF89A) ;; 
  (:physical-device-sample-locations-properties-ext #x3B9CF89B) ;; 
  (:multisample-properties-ext #x3B9CF89C) ;; 
  (:protected-submit-info #x3B9D0068) ;; 
  (:physical-device-protected-memory-features #x3B9D0069) ;; 
  (:physical-device-protected-memory-properties #x3B9D006A) ;; 
  (:device-queue-info-2 #x3B9D006B) ;; 
  (:buffer-memory-requirements-info-2 #x3B9D0450) ;; 
  (:image-memory-requirements-info-2 #x3B9D0451) ;; 
  (:image-sparse-memory-requirements-info-2 #x3B9D0452) ;; 
  (:memory-requirements-2 #x3B9D0453) ;; 
  (:sparse-image-memory-requirements-2 #x3B9D0454) ;; 
  (:image-format-list-create-info #x3B9D0838) ;; 
  (:physical-device-blend-operation-advanced-features-ext #x3B9D0C20) ;; 
  (:physical-device-blend-operation-advanced-properties-ext #x3B9D0C21) ;; 
  (:pipeline-color-blend-advanced-state-create-info-ext #x3B9D0C22) ;; 
  (:pipeline-coverage-to-color-state-create-info-nv #x3B9D1008) ;; 
  (:acceleration-structure-build-geometry-info-khr #x3B9D13F0) ;; 
  (:acceleration-structure-device-address-info-khr #x3B9D13F2) ;; 
  (:acceleration-structure-geometry-aabbs-data-khr #x3B9D13F3) ;; 
  (:acceleration-structure-geometry-instances-data-khr #x3B9D13F4) ;; 
  (:acceleration-structure-geometry-triangles-data-khr #x3B9D13F5) ;; 
  (:acceleration-structure-geometry-khr #x3B9D13F6) ;; 
  (:write-descriptor-set-acceleration-structure-khr #x3B9D13F7) ;; 
  (:acceleration-structure-version-info-khr #x3B9D13F9) ;; 
  (:copy-acceleration-structure-info-khr #x3B9D13FA) ;; 
  (:copy-acceleration-structure-to-memory-info-khr #x3B9D13FB) ;; 
  (:copy-memory-to-acceleration-structure-info-khr #x3B9D13FC) ;; 
  (:physical-device-acceleration-structure-features-khr #x3B9D13FD) ;; 
  (:physical-device-acceleration-structure-properties-khr #x3B9D13FE) ;; 
  (:ray-tracing-pipeline-create-info-khr #x3B9D13FF) ;; 
  (:ray-tracing-shader-group-create-info-khr #x3B9D1400) ;; 
  (:acceleration-structure-create-info-khr #x3B9D1401) ;; 
  (:ray-tracing-pipeline-interface-create-info-khr #x3B9D1402) ;; 
  (:acceleration-structure-build-sizes-info-khr #x3B9D1404) ;; 
  (:pipeline-coverage-modulation-state-create-info-nv #x3B9D1BC0) ;; 
  (:physical-device-shader-sm-builtins-features-nv #x3B9D2390) ;; 
  (:physical-device-shader-sm-builtins-properties-nv #x3B9D2391) ;; 
  (:sampler-ycbcr-conversion-create-info #x3B9D2B60) ;; 
  (:sampler-ycbcr-conversion-info #x3B9D2B61) ;; 
  (:bind-image-plane-memory-info #x3B9D2B62) ;; 
  (:image-plane-memory-requirements-info #x3B9D2B63) ;; 
  (:physical-device-sampler-ycbcr-conversion-features #x3B9D2B64) ;; 
  (:sampler-ycbcr-conversion-image-format-properties #x3B9D2B65) ;; 
  (:bind-buffer-memory-info #x3B9D2F48) ;; 
  (:bind-image-memory-info #x3B9D2F49) ;; 
  (:drm-format-modifier-properties-list-ext #x3B9D3330) ;; 
  (:physical-device-image-drm-format-modifier-info-ext #x3B9D3332) ;; 
  (:image-drm-format-modifier-list-create-info-ext #x3B9D3333) ;; 
  (:image-drm-format-modifier-explicit-create-info-ext #x3B9D3334) ;; 
  (:image-drm-format-modifier-properties-ext #x3B9D3335) ;; 
  (:drm-format-modifier-properties-list-2-ext #x3B9D3336) ;; 
  (:validation-cache-create-info-ext #x3B9D3B00) ;; 
  (:shader-module-validation-cache-create-info-ext #x3B9D3B01) ;; 
  (:descriptor-set-layout-binding-flags-create-info #x3B9D3EE8) ;; 
  (:physical-device-descriptor-indexing-features #x3B9D3EE9) ;; 
  (:physical-device-descriptor-indexing-properties #x3B9D3EEA) ;; 
  (:descriptor-set-variable-descriptor-count-allocate-info #x3B9D3EEB) ;; 
  (:descriptor-set-variable-descriptor-count-layout-support #x3B9D3EEC) ;; 
  (:physical-device-portability-subset-features-khr #x3B9D46B8) ;; 
  (:physical-device-portability-subset-properties-khr #x3B9D46B9) ;; 
  (:pipeline-viewport-shading-rate-image-state-create-info-nv #x3B9D4AA0) ;; 
  (:physical-device-shading-rate-image-features-nv #x3B9D4AA1) ;; 
  (:physical-device-shading-rate-image-properties-nv #x3B9D4AA2) ;; 
  (:pipeline-viewport-coarse-sample-order-state-create-info-nv #x3B9D4AA5) ;; 
  (:ray-tracing-pipeline-create-info-nv #x3B9D4E88) ;; 
  (:acceleration-structure-create-info-nv #x3B9D4E89) ;; 
  (:geometry-nv #x3B9D4E8B) ;; 
  (:geometry-triangles-nv #x3B9D4E8C) ;; 
  (:geometry-aabb-nv #x3B9D4E8D) ;; 
  (:bind-acceleration-structure-memory-info-nv #x3B9D4E8E) ;; 
  (:write-descriptor-set-acceleration-structure-nv #x3B9D4E8F) ;; 
  (:acceleration-structure-memory-requirements-info-nv #x3B9D4E90) ;; 
  (:physical-device-ray-tracing-properties-nv #x3B9D4E91) ;; 
  (:ray-tracing-shader-group-create-info-nv #x3B9D4E93) ;; 
  (:acceleration-structure-info-nv #x3B9D4E94) ;; 
  (:physical-device-representative-fragment-test-features-nv #x3B9D5270) ;; 
  (:pipeline-representative-fragment-test-state-create-info-nv #x3B9D5271) ;; 
  (:physical-device-maintenance-3-properties #x3B9D5A40) ;; 
  (:descriptor-set-layout-support #x3B9D5A41) ;; 
  (:physical-device-image-view-image-format-info-ext #x3B9D6210) ;; 
  (:filter-cubic-image-view-image-format-properties-ext #x3B9D6211) ;; 
  (:device-queue-global-priority-create-info-ext #x3B9D71B0) ;; 
  (:physical-device-shader-subgroup-extended-types-features #x3B9D7598) ;; 
  (:physical-device-8bit-storage-features #x3B9D7D68) ;; 
  (:import-memory-host-pointer-info-ext #x3B9D8150) ;; 
  (:memory-host-pointer-properties-ext #x3B9D8151) ;; 
  (:physical-device-external-memory-host-properties-ext #x3B9D8152) ;; 
  (:physical-device-shader-atomic-int64-features #x3B9D8920) ;; 
  (:physical-device-shader-clock-features-khr #x3B9D8D08) ;; 
  (:pipeline-compiler-control-create-info-amd #x3B9D94D8) ;; 
  (:calibrated-timestamp-info-ext #x3B9D98C0) ;; 
  (:physical-device-shader-core-properties-amd #x3B9D9CA8) ;; 
  (:video-decode-h265-capabilities-ext #x3B9DA478) ;; 
  (:video-decode-h265-session-create-info-ext #x3B9DA479) ;; 
  (:video-decode-h265-session-parameters-create-info-ext #x3B9DA47A) ;; 
  (:video-decode-h265-session-parameters-add-info-ext #x3B9DA47B) ;; 
  (:video-decode-h265-profile-ext #x3B9DA47C) ;; 
  (:video-decode-h265-picture-info-ext #x3B9DA47D) ;; 
  (:video-decode-h265-dpb-slot-info-ext #x3B9DA47E) ;; 
  (:device-memory-overallocation-create-info-amd #x3B9DAC48) ;; 
  (:physical-device-vertex-attribute-divisor-properties-ext #x3B9DB030) ;; 
  (:pipeline-vertex-input-divisor-state-create-info-ext #x3B9DB031) ;; 
  (:physical-device-vertex-attribute-divisor-features-ext #x3B9DB032) ;; 
  (:present-frame-token-ggp #x3B9DB418) ;; 
  (:pipeline-creation-feedback-create-info-ext #x3B9DB800) ;; 
  (:physical-device-driver-properties #x3B9DC7A0) ;; 
  (:physical-device-float-controls-properties #x3B9DCB88) ;; 
  (:physical-device-depth-stencil-resolve-properties #x3B9DD358) ;; 
  (:subpass-description-depth-stencil-resolve #x3B9DD359) ;; 
  (:physical-device-compute-shader-derivatives-features-nv #x3B9DDB28) ;; 
  (:physical-device-mesh-shader-features-nv #x3B9DDF10) ;; 
  (:physical-device-mesh-shader-properties-nv #x3B9DDF11) ;; 
  (:physical-device-fragment-shader-barycentric-features-nv #x3B9DE2F8) ;; 
  (:physical-device-shader-image-footprint-features-nv #x3B9DE6E0) ;; 
  (:pipeline-viewport-exclusive-scissor-state-create-info-nv #x3B9DEAC8) ;; 
  (:physical-device-exclusive-scissor-features-nv #x3B9DEACA) ;; 
  (:checkpoint-data-nv #x3B9DEEB0) ;; 
  (:queue-family-checkpoint-properties-nv #x3B9DEEB1) ;; 
  (:physical-device-timeline-semaphore-features #x3B9DF298) ;; 
  (:physical-device-timeline-semaphore-properties #x3B9DF299) ;; 
  (:semaphore-type-create-info #x3B9DF29A) ;; 
  (:timeline-semaphore-submit-info #x3B9DF29B) ;; 
  (:semaphore-wait-info #x3B9DF29C) ;; 
  (:semaphore-signal-info #x3B9DF29D) ;; 
  (:physical-device-shader-integer-functions-2-features-intel #x3B9DFA68) ;; 
  (:query-pool-performance-query-create-info-intel #x3B9DFE50) ;; 
  (:initialize-performance-api-info-intel #x3B9DFE51) ;; 
  (:performance-marker-info-intel #x3B9DFE52) ;; 
  (:performance-stream-marker-info-intel #x3B9DFE53) ;; 
  (:performance-override-info-intel #x3B9DFE54) ;; 
  (:performance-configuration-acquire-info-intel #x3B9DFE55) ;; 
  (:physical-device-vulkan-memory-model-features #x3B9E0238) ;; 
  (:physical-device-pci-bus-info-properties-ext #x3B9E0620) ;; 
  (:display-native-hdr-surface-capabilities-amd #x3B9E0A08) ;; 
  (:swapchain-display-native-hdr-create-info-amd #x3B9E0A09) ;; 
  (:imagepipe-surface-create-info-fuchsia #x3B9E0DF0) ;; 
  (:physical-device-shader-terminate-invocation-features-khr #x3B9E11D8) ;; 
  (:metal-surface-create-info-ext #x3B9E19A8) ;; 
  (:physical-device-fragment-density-map-features-ext #x3B9E1D90) ;; 
  (:physical-device-fragment-density-map-properties-ext #x3B9E1D91) ;; 
  (:render-pass-fragment-density-map-create-info-ext #x3B9E1D92) ;; 
  (:physical-device-scalar-block-layout-features #x3B9E2948) ;; 
  (:physical-device-subgroup-size-control-properties-ext #x3B9E38E8) ;; 
  (:pipeline-shader-stage-required-subgroup-size-create-info-ext #x3B9E38E9) ;; 
  (:physical-device-subgroup-size-control-features-ext #x3B9E38EA) ;; 
  (:fragment-shading-rate-attachment-info-khr #x3B9E3CD0) ;; 
  (:pipeline-fragment-shading-rate-state-create-info-khr #x3B9E3CD1) ;; 
  (:physical-device-fragment-shading-rate-properties-khr #x3B9E3CD2) ;; 
  (:physical-device-fragment-shading-rate-features-khr #x3B9E3CD3) ;; 
  (:physical-device-fragment-shading-rate-khr #x3B9E3CD4) ;; 
  (:physical-device-shader-core-properties-2-amd #x3B9E40B8) ;; 
  (:physical-device-coherent-memory-features-amd #x3B9E4888) ;; 
  (:physical-device-shader-image-atomic-int64-features-ext #x3B9E5C10) ;; 
  (:physical-device-memory-budget-properties-ext #x3B9E67C8) ;; 
  (:physical-device-memory-priority-features-ext #x3B9E6BB0) ;; 
  (:memory-priority-allocate-info-ext #x3B9E6BB1) ;; 
  (:surface-protected-capabilities-khr #x3B9E6F98) ;; 
  (:physical-device-dedicated-allocation-image-aliasing-features-nv #x3B9E7380) ;; 
  (:physical-device-separate-depth-stencil-layouts-features #x3B9E7768) ;; 
  (:attachment-reference-stencil-layout #x3B9E7769) ;; 
  (:attachment-description-stencil-layout #x3B9E776A) ;; 
  (:physical-device-buffer-device-address-features-ext #x3B9E8320) ;; 
  (:buffer-device-address-info #x3B9E8321) ;; 
  (:buffer-device-address-create-info-ext #x3B9E8322) ;; 
  (:physical-device-tool-properties-ext #x3B9E8708) ;; 
  (:image-stencil-usage-create-info #x3B9E8AF0) ;; 
  (:validation-features-ext #x3B9E8ED8) ;; 
  (:physical-device-present-wait-features-khr #x3B9E92C0) ;; 
  (:physical-device-cooperative-matrix-features-nv #x3B9E96A8) ;; 
  (:cooperative-matrix-properties-nv #x3B9E96A9) ;; 
  (:physical-device-cooperative-matrix-properties-nv #x3B9E96AA) ;; 
  (:physical-device-coverage-reduction-mode-features-nv #x3B9E9A90) ;; 
  (:pipeline-coverage-reduction-state-create-info-nv #x3B9E9A91) ;; 
  (:framebuffer-mixed-samples-combination-nv #x3B9E9A92) ;; 
  (:physical-device-fragment-shader-interlock-features-ext #x3B9E9E78) ;; 
  (:physical-device-ycbcr-image-arrays-features-ext #x3B9EA260) ;; 
  (:physical-device-uniform-buffer-standard-layout-features #x3B9EA648) ;; 
  (:physical-device-provoking-vertex-features-ext #x3B9EAA30) ;; 
  (:pipeline-rasterization-provoking-vertex-state-create-info-ext #x3B9EAA31) ;; 
  (:physical-device-provoking-vertex-properties-ext #x3B9EAA32) ;; 
  (:surface-full-screen-exclusive-info-ext #x3B9EAE18) ;; 
  (:surface-full-screen-exclusive-win32-info-ext #x3B9EAE19) ;; 
  (:surface-capabilities-full-screen-exclusive-ext #x3B9EAE1A) ;; 
  (:headless-surface-create-info-ext #x3B9EB200) ;; 
  (:physical-device-buffer-device-address-features #x3B9EB5E8) ;; 
  (:buffer-opaque-capture-address-create-info #x3B9EB5EA) ;; 
  (:memory-opaque-capture-address-allocate-info #x3B9EB5EB) ;; 
  (:device-memory-opaque-capture-address-info #x3B9EB5EC) ;; 
  (:physical-device-line-rasterization-features-ext #x3B9EBDB8) ;; 
  (:pipeline-rasterization-line-state-create-info-ext #x3B9EBDB9) ;; 
  (:physical-device-line-rasterization-properties-ext #x3B9EBDBA) ;; 
  (:physical-device-shader-atomic-float-features-ext #x3B9EC1A0) ;; 
  (:physical-device-host-query-reset-features #x3B9EC588) ;; 
  (:physical-device-index-type-uint8-features-ext #x3B9ED528) ;; 
  (:physical-device-extended-dynamic-state-features-ext #x3B9EDCF8) ;; 
  (:physical-device-pipeline-executable-properties-features-khr #x3B9EE4C8) ;; 
  (:pipeline-info-khr #x3B9EE4C9) ;; 
  (:pipeline-executable-properties-khr #x3B9EE4CA) ;; 
  (:pipeline-executable-info-khr #x3B9EE4CB) ;; 
  (:pipeline-executable-statistic-khr #x3B9EE4CC) ;; 
  (:pipeline-executable-internal-representation-khr #x3B9EE4CD) ;; 
  (:physical-device-shader-atomic-float-2-features-ext #x3B9EF468) ;; 
  (:physical-device-shader-demote-to-helper-invocation-features-ext #x3B9F0020) ;; 
  (:physical-device-device-generated-commands-properties-nv #x3B9F0408) ;; 
  (:graphics-shader-group-create-info-nv #x3B9F0409) ;; 
  (:graphics-pipeline-shader-groups-create-info-nv #x3B9F040A) ;; 
  (:indirect-commands-layout-token-nv #x3B9F040B) ;; 
  (:indirect-commands-layout-create-info-nv #x3B9F040C) ;; 
  (:generated-commands-info-nv #x3B9F040D) ;; 
  (:generated-commands-memory-requirements-info-nv #x3B9F040E) ;; 
  (:physical-device-device-generated-commands-features-nv #x3B9F040F) ;; 
  (:physical-device-inherited-viewport-scissor-features-nv #x3B9F07F0) ;; 
  (:command-buffer-inheritance-viewport-scissor-info-nv #x3B9F07F1) ;; 
  (:physical-device-shader-integer-dot-product-features-khr #x3B9F0FC0) ;; 
  (:physical-device-shader-integer-dot-product-properties-khr #x3B9F0FC1) ;; 
  (:physical-device-texel-buffer-alignment-features-ext #x3B9F13A8) ;; 
  (:physical-device-texel-buffer-alignment-properties-ext #x3B9F13A9) ;; 
  (:command-buffer-inheritance-render-pass-transform-info-qcom #x3B9F1790) ;; 
  (:render-pass-transform-begin-info-qcom #x3B9F1791) ;; 
  (:physical-device-device-memory-report-features-ext #x3B9F1F60) ;; 
  (:device-device-memory-report-create-info-ext #x3B9F1F61) ;; 
  (:device-memory-report-callback-data-ext #x3B9F1F62) ;; 
  (:physical-device-robustness-2-features-ext #x3B9F2730) ;; 
  (:physical-device-robustness-2-properties-ext #x3B9F2731) ;; 
  (:sampler-custom-border-color-create-info-ext #x3B9F2B18) ;; 
  (:physical-device-custom-border-color-properties-ext #x3B9F2B19) ;; 
  (:physical-device-custom-border-color-features-ext #x3B9F2B1A) ;; 
  (:pipeline-library-create-info-khr #x3B9F36D0) ;; 
  (:present-id-khr #x3B9F4670) ;; 
  (:physical-device-present-id-features-khr #x3B9F4671) ;; 
  (:physical-device-private-data-features-ext #x3B9F4A58) ;; 
  (:device-private-data-create-info-ext #x3B9F4A59) ;; 
  (:private-data-slot-create-info-ext #x3B9F4A5A) ;; 
  (:physical-device-pipeline-creation-cache-control-features-ext #x3B9F5228) ;; 
  (:video-encode-info-khr #x3B9F59F8) ;; 
  (:video-encode-rate-control-info-khr #x3B9F59F9) ;; 
  (:physical-device-diagnostics-config-features-nv #x3B9F5DE0) ;; 
  (:device-diagnostics-config-create-info-nv #x3B9F5DE1) ;; 
  (:memory-barrier-2-khr #x3B9F9490) ;; 
  (:buffer-memory-barrier-2-khr #x3B9F9491) ;; 
  (:image-memory-barrier-2-khr #x3B9F9492) ;; 
  (:dependency-info-khr #x3B9F9493) ;; 
  (:submit-info-2-khr #x3B9F9494) ;; 
  (:semaphore-submit-info-khr #x3B9F9495) ;; 
  (:command-buffer-submit-info-khr #x3B9F9496) ;; 
  (:physical-device-synchronization-2-features-khr #x3B9F9497) ;; 
  (:queue-family-checkpoint-properties-2-nv #x3B9F9498) ;; 
  (:checkpoint-data-2-nv #x3B9F9499) ;; 
  (:physical-device-shader-subgroup-uniform-control-flow-features-khr #x3B9FB7B8) ;; 
  (:physical-device-zero-initialize-workgroup-memory-features-khr #x3B9FBF88) ;; 
  (:physical-device-fragment-shading-rate-enums-properties-nv #x3B9FC370) ;; 
  (:physical-device-fragment-shading-rate-enums-features-nv #x3B9FC371) ;; 
  (:pipeline-fragment-shading-rate-enum-state-create-info-nv #x3B9FC372) ;; 
  (:acceleration-structure-geometry-motion-triangles-data-nv #x3B9FC758) ;; 
  (:physical-device-ray-tracing-motion-blur-features-nv #x3B9FC759) ;; 
  (:acceleration-structure-motion-info-nv #x3B9FC75A) ;; 
  (:physical-device-ycbcr-2-plane-444-formats-features-ext #x3B9FD310) ;; 
  (:physical-device-fragment-density-map-2-features-ext #x3B9FDAE0) ;; 
  (:physical-device-fragment-density-map-2-properties-ext #x3B9FDAE1) ;; 
  (:copy-command-transform-info-qcom #x3B9FDEC8) ;; 
  (:physical-device-image-robustness-features-ext #x3B9FE698) ;; 
  (:physical-device-workgroup-memory-explicit-layout-features-khr #x3B9FEA80) ;; 
  (:copy-buffer-info-2-khr #x3B9FEE68) ;; 
  (:copy-image-info-2-khr #x3B9FEE69) ;; 
  (:copy-buffer-to-image-info-2-khr #x3B9FEE6A) ;; 
  (:copy-image-to-buffer-info-2-khr #x3B9FEE6B) ;; 
  (:blit-image-info-2-khr #x3B9FEE6C) ;; 
  (:resolve-image-info-2-khr #x3B9FEE6D) ;; 
  (:buffer-copy-2-khr #x3B9FEE6E) ;; 
  (:image-copy-2-khr #x3B9FEE6F) ;; 
  (:image-blit-2-khr #x3B9FEE70) ;; 
  (:buffer-image-copy-2-khr #x3B9FEE71) ;; 
  (:image-resolve-2-khr #x3B9FEE72) ;; 
  (:physical-device-4444-formats-features-ext #x3B9FFA20) ;; 
  (:physical-device-rgba10x6-formats-features-ext #x3BA009C0) ;; 
  (:directfb-surface-create-info-ext #x3BA01190) ;; 
  (:physical-device-ray-tracing-pipeline-features-khr #x3BA01578) ;; 
  (:physical-device-ray-tracing-pipeline-properties-khr #x3BA01579) ;; 
  (:physical-device-ray-query-features-khr #x3BA0196D) ;; 
  (:physical-device-mutable-descriptor-type-features-valve #x3BA02518) ;; 
  (:mutable-descriptor-type-create-info-valve #x3BA0251A) ;; 
  (:physical-device-vertex-input-dynamic-state-features-ext #x3BA02900) ;; 
  (:vertex-input-binding-description-2-ext #x3BA02901) ;; 
  (:vertex-input-attribute-description-2-ext #x3BA02902) ;; 
  (:physical-device-drm-properties-ext #x3BA02CE8) ;; 
  (:physical-device-primitive-topology-list-restart-features-ext #x3BA038A0) ;; 
  (:format-properties-3-khr #x3BA04840) ;; 
  (:import-memory-zircon-handle-info-fuchsia #x3BA057E0) ;; 
  (:memory-zircon-handle-properties-fuchsia #x3BA057E1) ;; 
  (:memory-get-zircon-handle-info-fuchsia #x3BA057E2) ;; 
  (:import-semaphore-zircon-handle-info-fuchsia #x3BA05BC8) ;; 
  (:semaphore-get-zircon-handle-info-fuchsia #x3BA05BC9) ;; 
  (:buffer-collection-create-info-fuchsia #x3BA05FB0) ;; 
  (:import-memory-buffer-collection-fuchsia #x3BA05FB1) ;; 
  (:buffer-collection-image-create-info-fuchsia #x3BA05FB2) ;; 
  (:buffer-collection-properties-fuchsia #x3BA05FB3) ;; 
  (:buffer-constraints-info-fuchsia #x3BA05FB4) ;; 
  (:buffer-collection-buffer-create-info-fuchsia #x3BA05FB5) ;; 
  (:image-constraints-info-fuchsia #x3BA05FB6) ;; 
  (:image-format-constraints-info-fuchsia #x3BA05FB7) ;; 
  (:sysmem-color-space-fuchsia #x3BA05FB8) ;; 
  (:buffer-collection-constraints-info-fuchsia #x3BA05FB9) ;; 
  (:subpass-shading-pipeline-create-info-huawei #x3BA06B68) ;; 
  (:physical-device-subpass-shading-features-huawei #x3BA06B69) ;; 
  (:physical-device-subpass-shading-properties-huawei #x3BA06B6A) ;; 
  (:physical-device-invocation-mask-features-huawei #x3BA06F50) ;; 
  (:memory-get-remote-address-info-nv #x3BA07338) ;; 
  (:physical-device-external-memory-rdma-features-nv #x3BA07339) ;; 
  (:physical-device-extended-dynamic-state-2-features-ext #x3BA08AA8) ;; 
  (:screen-surface-create-info-qnx #x3BA08E90) ;; 
  (:physical-device-color-write-enable-features-ext #x3BA09A48) ;; 
  (:pipeline-color-write-create-info-ext #x3BA09A49) ;; 
  (:physical-device-global-priority-query-features-ext #x3BA0B5A0) ;; 
  (:queue-family-global-priority-properties-ext #x3BA0B5A1) ;; 
  (:physical-device-multi-draw-features-ext #x3BA0C540) ;; 
  (:physical-device-multi-draw-properties-ext #x3BA0C541) ;; 
  (:physical-device-border-color-swizzle-features-ext #x3BA10F78) ;; 
  (:sampler-border-color-component-mapping-create-info-ext #x3BA10F79) ;; 
  (:physical-device-pageable-device-local-memory-features-ext #x3BA11360) ;; 
  (:physical-device-maintenance-4-features-khr #x3BA11748) ;; 
  (:physical-device-maintenance-4-properties-khr #x3BA11749) ;; 
  (:device-buffer-memory-requirements-khr #x3BA1174A) ;; 
  (:device-image-memory-requirements-khr #x3BA1174B)) ;; 

(defcenum (system-allocation-scope)
  (:command #x0)
  (:object #x1)
  (:cache #x2)
  (:device #x3)
  (:instance #x4))

(defcenum (internal-allocation-type)
  (:executable #x0))

(defcenum (sampler-address-mode)
  (:repeat #x0)
  (:mirrored-repeat #x1)
  (:clamp-to-edge #x2)
  (:clamp-to-border #x3)
  (:mirror-clamp-to-edge #x4)) ;; 

(defcenum (filter)
  (:nearest #x0)
  (:linear #x1)
  (:cubic-img #x3B9B0498)) ;; 

(defcenum (sampler-mipmap-mode)
  (:nearest #x0) ;; Choose nearest mip level
  (:linear #x1)) ;; Linear filter between mip levels

(defcenum (vertex-input-rate)
  (:vertex #x0)
  (:instance #x1))

(defcenum (pipeline-stage-flag-bits)
  (:none-khr #x0) ;; 
  (:top-of-pipe #x1) ;; Before subsequent commands are processed
  (:draw-indirect #x2) ;; Draw/DispatchIndirect command fetch
  (:vertex-input #x4) ;; Vertex/index fetch
  (:vertex-shader #x8) ;; Vertex shading
  (:tessellation-control-shader #x10) ;; Tessellation control shading
  (:tessellation-evaluation-shader #x20) ;; Tessellation evaluation shading
  (:geometry-shader #x40) ;; Geometry shading
  (:fragment-shader #x80) ;; Fragment shading
  (:early-fragment-tests #x100) ;; Early fragment (depth and stencil) tests
  (:late-fragment-tests #x200) ;; Late fragment (depth and stencil) tests
  (:color-attachment-output #x400) ;; Color attachment writes
  (:compute-shader #x800) ;; Compute shading
  (:transfer #x1000) ;; Transfer/copy operations
  (:bottom-of-pipe #x2000) ;; After previous commands have completed
  (:host #x4000) ;; Indicates host (CPU) is a source/sink of the dependency
  (:all-graphics #x8000) ;; All stages of the graphics pipeline
  (:all-commands #x10000) ;; All stages supported on the queue
  (:command-preprocess #x20000) ;; 
  (:conditional-rendering #x40000) ;; 
  (:task-shader #x80000) ;; 
  (:mesh-shader #x100000) ;; 
  (:ray-tracing-shader #x200000) ;; 
  (:fragment-shading-rate-attachment #x400000) ;; 
  (:fragment-density-process #x800000) ;; 
  (:transform-feedback #x1000000) ;; 
  (:acceleration-structure-build #x2000000)) ;; 

(defcenum (sparse-image-format-flag-bits)
  (:single-miptail #x1) ;; Image uses a single mip tail region for all array layers
  (:aligned-mip-size #x2) ;; Image requires mip level dimensions to be an integer multiple of the sparse image block dimensions for non-tail mip levels.
  (:nonstandard-block-size #x4)) ;; Image uses a non-standard sparse image block dimensions

(defcenum (sample-count-flag-bits)
  (:1 #x1) ;; Sample count 1 supported
  (:2 #x2) ;; Sample count 2 supported
  (:4 #x4) ;; Sample count 4 supported
  (:8 #x8) ;; Sample count 8 supported
  (:16 #x10) ;; Sample count 16 supported
  (:32 #x20) ;; Sample count 32 supported
  (:64 #x40)) ;; Sample count 64 supported

(defcenum (attachment-description-flag-bits)
  (:may-alias #x1)) ;; The attachment may alias physical memory of another attachment in the same render pass

(defcenum (descriptor-pool-create-flag-bits)
  (:free-descriptor-set #x1) ;; Descriptor sets may be freed individually
  (:update-after-bind #x2) ;; 
  (:host-only #x4)) ;; 

(defcenum (dependency-flag-bits)
  (:by-region #x1) ;; Dependency is per pixel region
  (:view-local #x2) ;; 
  (:device-group #x4)) ;; 

(defcenum (object-type)
  (:unknown #x0)
  (:instance #x1)
  (:physical-device #x2)
  (:device #x3)
  (:queue #x4)
  (:semaphore #x5)
  (:command-buffer #x6)
  (:fence #x7)
  (:device-memory #x8)
  (:buffer #x9)
  (:image #xA)
  (:event #xB)
  (:query-pool #xC)
  (:buffer-view #xD)
  (:image-view #xE)
  (:shader-module #xF)
  (:pipeline-cache #x10)
  (:pipeline-layout #x11)
  (:render-pass #x12)
  (:pipeline #x13)
  (:descriptor-set-layout #x14)
  (:sampler #x15)
  (:descriptor-pool #x16)
  (:descriptor-set #x17)
  (:framebuffer #x18)
  (:command-pool #x19)
  (:surface-khr #x3B9ACA00) ;; 
  (:swapchain-khr #x3B9ACDE8) ;; 
  (:display-khr #x3B9AD1D0) ;; 
  (:display-mode-khr #x3B9AD1D1) ;; 
  (:debug-report-callback-ext #x3B9AF4F8) ;; 
  (:video-session-khr #x3B9B23D8) ;; 
  (:video-session-parameters-khr #x3B9B23D9) ;; 
  (:cu-module-nvx #x3B9B3B48) ;; 
  (:cu-function-nvx #x3B9B3B49) ;; 
  (:descriptor-update-template #x3B9C1608) ;; 
  (:debug-utils-messenger-ext #x3B9CBE00) ;; 
  (:acceleration-structure-khr #x3B9D13F0) ;; 
  (:sampler-ycbcr-conversion #x3B9D2B60) ;; 
  (:validation-cache-ext #x3B9D3B00) ;; 
  (:acceleration-structure-nv #x3B9D4E88) ;; 
  (:performance-configuration-intel #x3B9DFE50) ;; 
  (:deferred-operation-khr #x3B9EE0E0) ;; 
  (:indirect-commands-layout-nv #x3B9F0408) ;; 
  (:private-data-slot-ext #x3B9F4A58) ;; 
  (:buffer-collection-fuchsia #x3BA05FB0)) ;; 

(defcenum (event-create-flag-bits)
  (:device-only #x1)) ;; 

(defcenum (pipeline-layout-create-flag-bits))

(defcenum (semaphore-create-flag-bits))

(defcenum (indirect-commands-layout-usage-flag-bits-nv)
  (:explicit-preprocess #x1)
  (:indexed-sequences #x2)
  (:unordered-sequences #x4))

(defcenum (indirect-commands-token-type-nv)
  (:shader-group-nv #x0)
  (:state-flags-nv #x1)
  (:index-buffer-nv #x2)
  (:vertex-buffer-nv #x3)
  (:push-constant-nv #x4)
  (:draw-indexed-nv #x5)
  (:draw-nv #x6)
  (:draw-tasks-nv #x7))

(defcenum (indirect-state-flag-bits-nv)
  (:frontface #x1))

(defcenum (private-data-slot-create-flag-bits-ext))

(defcenum (descriptor-update-template-type)
  (:descriptor-set #x0) ;; Create descriptor update template for descriptor set updates
  (:push-descriptors-khr #x1)) ;; 

(defcenum (descriptor-update-template-type-khr)
  (:descriptor-set #x0) ;; Create descriptor update template for descriptor set updates
  (:push-descriptors-khr #x1)) ;; 

(defcenum (viewport-coordinate-swizzle-nv)
  (:positive-x-nv #x0)
  (:negative-x-nv #x1)
  (:positive-y-nv #x2)
  (:negative-y-nv #x3)
  (:positive-z-nv #x4)
  (:negative-z-nv #x5)
  (:positive-w-nv #x6)
  (:negative-w-nv #x7))

(defcenum (discard-rectangle-mode-ext)
  (:inclusive-ext #x0)
  (:exclusive-ext #x1))

(defcenum (subpass-description-flag-bits)
  (:per-view-attributes #x1) ;; 
  (:per-view-position-x-only #x2) ;; 
  (:fragment-region #x4) ;; 
  (:shader-resolve #x8)) ;; 

(defcenum (point-clipping-behavior)
  (:all-clip-planes #x0)
  (:user-clip-planes-only #x1))

(defcenum (point-clipping-behavior-khr)
  (:all-clip-planes #x0)
  (:user-clip-planes-only #x1))

(defcenum (coverage-modulation-mode-nv)
  (:none-nv #x0)
  (:rgb-nv #x1)
  (:alpha-nv #x2)
  (:rgba-nv #x3))

(defcenum (coverage-reduction-mode-nv)
  (:merge-nv #x0)
  (:truncate-nv #x1))

(defcenum (validation-cache-header-version-ext)
  (:one-ext #x1))

(defcenum (shader-info-type-amd)
  (:statistics-amd #x0)
  (:binary-amd #x1)
  (:disassembly-amd #x2))

(defcenum (queue-global-priority-ext)
  (:low-ext #x80)
  (:medium-ext #x100)
  (:high-ext #x200)
  (:realtime-ext #x400))

(defcenum (time-domain-ext)
  (:device-ext #x0)
  (:clock-monotonic-ext #x1)
  (:clock-monotonic-raw-ext #x2)
  (:query-performance-counter-ext #x3))

(defcenum (conservative-rasterization-mode-ext)
  (:disabled-ext #x0)
  (:overestimate-ext #x1)
  (:underestimate-ext #x2))

(defcenum (resolve-mode-flag-bits)
  (:none #x0)
  (:sample-zero #x1)
  (:average #x2)
  (:min #x4)
  (:max #x8))

(defcenum (resolve-mode-flag-bits-khr)
  (:none #x0)
  (:sample-zero #x1)
  (:average #x2)
  (:min #x4)
  (:max #x8))

(defcenum (descriptor-binding-flag-bits)
  (:update-after-bind #x1)
  (:update-unused-while-pending #x2)
  (:partially-bound #x4)
  (:variable-descriptor-count #x8))

(defcenum (descriptor-binding-flag-bits-ext)
  (:update-after-bind #x1)
  (:update-unused-while-pending #x2)
  (:partially-bound #x4)
  (:variable-descriptor-count #x8))

(defcenum (conditional-rendering-flag-bits-ext)
  (:inverted #x1))

(defcenum (semaphore-type)
  (:binary #x0)
  (:timeline #x1))

(defcenum (semaphore-type-khr)
  (:binary #x0)
  (:timeline #x1))

(defcenum (geometry-flag-bits-khr)
  (:opaque #x1)
  (:no-duplicate-any-hit-invocation #x2))

(defcenum (geometry-flag-bits-nv)
  (:opaque #x1)
  (:no-duplicate-any-hit-invocation #x2))

(defcenum (geometry-instance-flag-bits-khr)
  (:triangle-facing-cull-disable #x1)
  (:triangle-flip-facing #x2)
  (:force-opaque #x4)
  (:force-no-opaque #x8))

(defcenum (geometry-instance-flag-bits-nv)
  (:triangle-facing-cull-disable #x1)
  (:triangle-flip-facing #x2)
  (:force-opaque #x4)
  (:force-no-opaque #x8))

(defcenum (build-acceleration-structure-flag-bits-khr)
  (:allow-update #x1)
  (:allow-compaction #x2)
  (:prefer-fast-trace #x4)
  (:prefer-fast-build #x8)
  (:low-memory #x10)
  (:motion #x20)) ;; 

(defcenum (build-acceleration-structure-flag-bits-nv)
  (:allow-update #x1)
  (:allow-compaction #x2)
  (:prefer-fast-trace #x4)
  (:prefer-fast-build #x8)
  (:low-memory #x10)
  (:motion #x20)) ;; 

(defcenum (acceleration-structure-create-flag-bits-khr)
  (:device-address-capture-replay #x1)
  (:motion #x4)) ;; 

(defcenum (build-acceleration-structure-mode-khr)
  (:build-khr #x0)
  (:update-khr #x1))

(defcenum (copy-acceleration-structure-mode-khr)
  (:clone-khr #x0)
  (:compact-khr #x1)
  (:serialize-khr #x2)
  (:deserialize-khr #x3))

(defcenum (copy-acceleration-structure-mode-nv)
  (:clone-khr #x0)
  (:compact-khr #x1)
  (:serialize-khr #x2)
  (:deserialize-khr #x3))

(defcenum (acceleration-structure-type-khr)
  (:top-level-khr #x0)
  (:bottom-level-khr #x1)
  (:generic-khr #x2))

(defcenum (acceleration-structure-type-nv)
  (:top-level-khr #x0)
  (:bottom-level-khr #x1)
  (:generic-khr #x2))

(defcenum (geometry-type-khr)
  (:triangles-khr #x0)
  (:aabbs-khr #x1)
  (:instances-khr #x2))

(defcenum (geometry-type-nv)
  (:triangles-khr #x0)
  (:aabbs-khr #x1)
  (:instances-khr #x2))

(defcenum (ray-tracing-shader-group-type-khr)
  (:general-khr #x0)
  (:triangles-hit-group-khr #x1)
  (:procedural-hit-group-khr #x2))

(defcenum (ray-tracing-shader-group-type-nv)
  (:general-khr #x0)
  (:triangles-hit-group-khr #x1)
  (:procedural-hit-group-khr #x2))

(defcenum (acceleration-structure-memory-requirements-type-nv)
  (:object-nv #x0)
  (:build-scratch-nv #x1)
  (:update-scratch-nv #x2))

(defcenum (acceleration-structure-build-type-khr)
  (:host-khr #x0)
  (:device-khr #x1)
  (:host-or-device-khr #x2))

(defcenum (acceleration-structure-compatibility-khr)
  (:compatible-khr #x0)
  (:incompatible-khr #x1))

(defcenum (shader-group-shader-khr)
  (:general-khr #x0)
  (:closest-hit-khr #x1)
  (:any-hit-khr #x2)
  (:intersection-khr #x3))

(defcenum (memory-overallocation-behavior-amd)
  (:default-amd #x0)
  (:allowed-amd #x1)
  (:disallowed-amd #x2))

(defcenum (scope-nv)
  (:device-nv #x1)
  (:workgroup-nv #x2)
  (:subgroup-nv #x3)
  (:queue-family-nv #x5))

(defcenum (component-type-nv)
  (:float16-nv #x0)
  (:float32-nv #x1)
  (:float64-nv #x2)
  (:sint8-nv #x3)
  (:sint16-nv #x4)
  (:sint32-nv #x5)
  (:sint64-nv #x6)
  (:uint8-nv #x7)
  (:uint16-nv #x8)
  (:uint32-nv #x9)
  (:uint64-nv #xA))

(defcenum (device-diagnostics-config-flag-bits-nv)
  (:enable-shader-debug-info #x1)
  (:enable-resource-tracking #x2)
  (:enable-automatic-checkpoints #x4))

(defcenum (pipeline-creation-feedback-flag-bits-ext)
  (:valid #x1)
  (:application-pipeline-cache-hit #x2)
  (:base-pipeline-acceleration #x4))

(defcenum (performance-counter-scope-khr)
  (:command-buffer-khr #x0)
  (:render-pass-khr #x1)
  (:command-khr #x2))

(defcenum (performance-counter-unit-khr)
  (:generic-khr #x0)
  (:percentage-khr #x1)
  (:nanoseconds-khr #x2)
  (:bytes-khr #x3)
  (:bytes-per-second-khr #x4)
  (:kelvin-khr #x5)
  (:watts-khr #x6)
  (:volts-khr #x7)
  (:amps-khr #x8)
  (:hertz-khr #x9)
  (:cycles-khr #xA))

(defcenum (performance-counter-storage-khr)
  (:int32-khr #x0)
  (:int64-khr #x1)
  (:uint32-khr #x2)
  (:uint64-khr #x3)
  (:float32-khr #x4)
  (:float64-khr #x5))

(defcenum (performance-counter-description-flag-bits-khr)
  (:performance-impacting #x1)
  (:concurrently-impacted #x2))

(defcenum (acquire-profiling-lock-flag-bits-khr))

(defcenum (semaphore-wait-flag-bits)
  (:any #x1))

(defcenum (semaphore-wait-flag-bits-khr)
  (:any #x1))

(defcenum (performance-configuration-type-intel)
  (:command-queue-metrics-discovery-activated-intel #x0))

(defcenum (query-pool-sampling-mode-intel)
  (:manual-intel #x0))

(defcenum (performance-override-type-intel)
  (:null-hardware-intel #x0)
  (:flush-gpu-caches-intel #x1))

(defcenum (performance-parameter-type-intel)
  (:hw-counters-supported-intel #x0)
  (:stream-marker-valid-bits-intel #x1))

(defcenum (performance-value-type-intel)
  (:uint32-intel #x0)
  (:uint64-intel #x1)
  (:float-intel #x2)
  (:bool-intel #x3)
  (:string-intel #x4))

(defcenum (line-rasterization-mode-ext)
  (:default-ext #x0)
  (:rectangular-ext #x1)
  (:bresenham-ext #x2)
  (:rectangular-smooth-ext #x3))

(defcenum (shader-module-create-flag-bits))

(defcenum (pipeline-compiler-control-flag-bits-amd))

(defcenum (shader-core-properties-flag-bits-amd))

(defcenum (tool-purpose-flag-bits-ext)
  (:validation #x1)
  (:profiling #x2)
  (:tracing #x4)
  (:additional-features #x8)
  (:modifying-features #x10)
  (:debug-reporting #x20) ;; 
  (:debug-markers #x40)) ;; 

(defcenum (fragment-shading-rate-nv)
  (:1-invocation-per-pixel-nv #x0)
  (:1-invocation-per-1x2-pixels-nv #x1)
  (:1-invocation-per-2x1-pixels-nv #x4)
  (:1-invocation-per-2x2-pixels-nv #x5)
  (:1-invocation-per-2x4-pixels-nv #x6)
  (:1-invocation-per-4x2-pixels-nv #x9)
  (:1-invocation-per-4x4-pixels-nv #xA)
  (:2-invocations-per-pixel-nv #xB)
  (:4-invocations-per-pixel-nv #xC)
  (:8-invocations-per-pixel-nv #xD)
  (:16-invocations-per-pixel-nv #xE)
  (:no-invocations-nv #xF))

(defcenum (fragment-shading-rate-type-nv)
  (:fragment-size-nv #x0)
  (:enums-nv #x1))

(defcenum (access-flag-bits-2-khr)
  (:none-khr #x0)
  (:indirect-command-read #x1)
  (:index-read #x2)
  (:vertex-attribute-read #x4)
  (:uniform-read #x8)
  (:input-attachment-read #x10)
  (:shader-read #x20)
  (:shader-write #x40)
  (:color-attachment-read #x80)
  (:color-attachment-write #x100)
  (:depth-stencil-attachment-read #x200)
  (:depth-stencil-attachment-write #x400)
  (:transfer-read #x800)
  (:transfer-write #x1000)
  (:host-read #x2000)
  (:host-write #x4000)
  (:memory-read #x8000)
  (:memory-write #x10000)
  (:command-preprocess-read #x20000) ;; 
  (:command-preprocess-write #x40000) ;; 
  (:color-attachment-read-noncoherent #x80000) ;; 
  (:conditional-rendering-read #x100000) ;; 
  (:acceleration-structure-read #x200000) ;; 
  (:acceleration-structure-write #x400000) ;; 
  (:fragment-shading-rate-attachment-read #x800000) ;; 
  (:fragment-density-map-read #x1000000) ;; 
  (:transform-feedback-write #x2000000) ;; 
  (:transform-feedback-counter-read #x4000000) ;; 
  (:transform-feedback-counter-write #x8000000) ;; 
  (:shader-sampled-read #x100000000)
  (:shader-storage-read #x200000000)
  (:shader-storage-write #x400000000)
  (:video-decode-read #x800000000) ;; 
  (:video-decode-write #x1000000000) ;; 
  (:video-encode-read #x2000000000) ;; 
  (:video-encode-write #x4000000000) ;; 
  (:invocation-mask-read #x8000000000)) ;; 

(defcenum (pipeline-stage-flag-bits-2-khr)
  (:none-khr #x0)
  (:top-of-pipe #x1)
  (:draw-indirect #x2)
  (:vertex-input #x4)
  (:vertex-shader #x8)
  (:tessellation-control-shader #x10)
  (:tessellation-evaluation-shader #x20)
  (:geometry-shader #x40)
  (:fragment-shader #x80)
  (:early-fragment-tests #x100)
  (:late-fragment-tests #x200)
  (:color-attachment-output #x400)
  (:compute-shader #x800)
  (:all-transfer #x1000)
  (:bottom-of-pipe #x2000)
  (:host #x4000)
  (:all-graphics #x8000)
  (:all-commands #x10000)
  (:command-preprocess #x20000) ;; 
  (:conditional-rendering #x40000) ;; 
  (:task-shader #x80000) ;; 
  (:mesh-shader #x100000) ;; 
  (:ray-tracing-shader #x200000) ;; 
  (:fragment-shading-rate-attachment #x400000) ;; 
  (:fragment-density-process #x800000) ;; 
  (:transform-feedback #x1000000) ;; 
  (:acceleration-structure-build #x2000000) ;; 
  (:video-decode #x4000000) ;; 
  (:video-encode #x8000000) ;; 
  (:copy #x100000000)
  (:resolve #x200000000)
  (:blit #x400000000)
  (:clear #x800000000)
  (:index-input #x1000000000)
  (:vertex-attribute-input #x2000000000)
  (:pre-rasterization-shaders #x4000000000)
  (:subpass-shading #x8000000000) ;; 
  (:invocation-mask #x10000000000)) ;; 

(defcenum (provoking-vertex-mode-ext)
  (:first-vertex-ext #x0)
  (:last-vertex-ext #x1))

(defcenum (image-format-constraints-flag-bits-fuchsia))

(defcenum (image-constraints-info-flag-bits-fuchsia)
  (:cpu-read-rarely-fuchsia #x1)
  (:cpu-read-often-fuchsia #x2)
  (:cpu-write-rarely-fuchsia #x4)
  (:cpu-write-often-fuchsia #x8)
  (:protected-optional-fuchsia #x10))

(defcenum (format-feature-flag-bits-2-khr)
  (:sampled-image #x1)
  (:storage-image #x2)
  (:storage-image-atomic #x4)
  (:uniform-texel-buffer #x8)
  (:storage-texel-buffer #x10)
  (:storage-texel-buffer-atomic #x20)
  (:vertex-buffer #x40)
  (:color-attachment #x80)
  (:color-attachment-blend #x100)
  (:depth-stencil-attachment #x200)
  (:blit-src #x400)
  (:blit-dst #x800)
  (:sampled-image-filter-linear #x1000)
  (:sampled-image-filter-cubic #x2000)
  (:transfer-src #x4000)
  (:transfer-dst #x8000)
  (:sampled-image-filter-minmax #x10000)
  (:midpoint-chroma-samples #x20000)
  (:sampled-image-ycbcr-conversion-linear-filter #x40000)
  (:sampled-image-ycbcr-conversion-separate-reconstruction-filter #x80000)
  (:sampled-image-ycbcr-conversion-chroma-reconstruction-explicit #x100000)
  (:sampled-image-ycbcr-conversion-chroma-reconstruction-explicit-forceable #x200000)
  (:disjoint #x400000)
  (:cosited-chroma-samples #x800000)
  (:fragment-density-map #x1000000) ;; 
  (:video-decode-output #x2000000) ;; 
  (:video-decode-dpb #x4000000) ;; 
  (:video-encode-input #x8000000) ;; 
  (:video-encode-dpb #x10000000) ;; 
  (:acceleration-structure-vertex-buffer #x20000000) ;; 
  (:fragment-shading-rate-attachment #x40000000) ;; 
  (:storage-read-without-format #x80000000)
  (:storage-write-without-format #x100000000)
  (:sampled-image-depth-comparison #x200000000))

(defcenum (rendering-flag-bits-khr)
  (:contents-secondary-command-buffers #x1)
  (:suspending #x2)
  (:resuming #x4))

(defcenum (color-space-khr)
  (:srgb-nonlinear-khr #x0)
  (:display-p3-nonlinear-ext #x3B9C6041) ;; 
  (:extended-srgb-linear-ext #x3B9C6042) ;; 
  (:display-p3-linear-ext #x3B9C6043) ;; 
  (:dci-p3-nonlinear-ext #x3B9C6044) ;; 
  (:bt709-linear-ext #x3B9C6045) ;; 
  (:bt709-nonlinear-ext #x3B9C6046) ;; 
  (:bt2020-linear-ext #x3B9C6047) ;; 
  (:hdr10-st2084-ext #x3B9C6048) ;; 
  (:dolbyvision-ext #x3B9C6049) ;; 
  (:hdr10-hlg-ext #x3B9C604A) ;; 
  (:adobergb-linear-ext #x3B9C604B) ;; 
  (:adobergb-nonlinear-ext #x3B9C604C) ;; 
  (:pass-through-ext #x3B9C604D) ;; 
  (:extended-srgb-nonlinear-ext #x3B9C604E) ;; 
  (:display-native-amd #x3B9E0A08)) ;; 

(defcenum (composite-alpha-flag-bits-khr)
  (:opaque #x1)
  (:pre-multiplied #x2)
  (:post-multiplied #x4)
  (:inherit #x8))

(defcenum (display-plane-alpha-flag-bits-khr)
  (:opaque #x1)
  (:global #x2)
  (:per-pixel #x4)
  (:per-pixel-premultiplied #x8))

(defcenum (present-mode-khr)
  (:immediate-khr #x0)
  (:mailbox-khr #x1)
  (:fifo-khr #x2)
  (:fifo-relaxed-khr #x3)
  (:shared-demand-refresh-khr #x3B9C7B98) ;; 
  (:shared-continuous-refresh-khr #x3B9C7B99)) ;; 

(defcenum (surface-transform-flag-bits-khr)
  (:identity #x1)
  (:rotate-90 #x2)
  (:rotate-180 #x4)
  (:rotate-270 #x8)
  (:horizontal-mirror #x10)
  (:horizontal-mirror-rotate-90 #x20)
  (:horizontal-mirror-rotate-180 #x40)
  (:horizontal-mirror-rotate-270 #x80)
  (:inherit #x100))

(defcenum (debug-report-flag-bits-ext)
  (:information #x1)
  (:warning #x2)
  (:performance-warning #x4)
  (:error #x8)
  (:debug #x10))

(defcenum (debug-report-object-type-ext)
  (:unknown-ext #x0)
  (:instance-ext #x1)
  (:physical-device-ext #x2)
  (:device-ext #x3)
  (:queue-ext #x4)
  (:semaphore-ext #x5)
  (:command-buffer-ext #x6)
  (:fence-ext #x7)
  (:device-memory-ext #x8)
  (:buffer-ext #x9)
  (:image-ext #xA)
  (:event-ext #xB)
  (:query-pool-ext #xC)
  (:buffer-view-ext #xD)
  (:image-view-ext #xE)
  (:shader-module-ext #xF)
  (:pipeline-cache-ext #x10)
  (:pipeline-layout-ext #x11)
  (:render-pass-ext #x12)
  (:pipeline-ext #x13)
  (:descriptor-set-layout-ext #x14)
  (:sampler-ext #x15)
  (:descriptor-pool-ext #x16)
  (:descriptor-set-ext #x17)
  (:framebuffer-ext #x18)
  (:command-pool-ext #x19)
  (:surface-khr-ext #x1A)
  (:swapchain-khr-ext #x1B)
  (:debug-report-callback-ext-ext #x1C)
  (:display-khr-ext #x1D)
  (:display-mode-khr-ext #x1E)
  (:validation-cache-ext-ext #x21)
  (:cu-module-nvx-ext #x3B9B3B48) ;; 
  (:cu-function-nvx-ext #x3B9B3B49) ;; 
  (:descriptor-update-template-ext #x3B9C1608) ;; 
  (:acceleration-structure-khr-ext #x3B9D13F0) ;; 
  (:sampler-ycbcr-conversion-ext #x3B9D2B60) ;; 
  (:acceleration-structure-nv-ext #x3B9D4E88) ;; 
  (:buffer-collection-fuchsia-ext #x3BA05FB0)) ;; 

(defcenum (device-memory-report-event-type-ext)
  (:allocate-ext #x0)
  (:free-ext #x1)
  (:import-ext #x2)
  (:unimport-ext #x3)
  (:allocation-failed-ext #x4))

(defcenum (rasterization-order-amd)
  (:strict-amd #x0)
  (:relaxed-amd #x1))

(defcenum (external-memory-handle-type-flag-bits-nv)
  (:opaque-win32 #x1)
  (:opaque-win32-kmt #x2)
  (:d3d11-image #x4)
  (:d3d11-image-kmt #x8))

(defcenum (external-memory-feature-flag-bits-nv)
  (:dedicated-only #x1)
  (:exportable #x2)
  (:importable #x4))

(defcenum (validation-check-ext)
  (:all-ext #x0)
  (:shaders-ext #x1))

(defcenum (validation-feature-enable-ext)
  (:gpu-assisted-ext #x0)
  (:gpu-assisted-reserve-binding-slot-ext #x1)
  (:best-practices-ext #x2)
  (:debug-printf-ext #x3)
  (:synchronization-validation-ext #x4))

(defcenum (validation-feature-disable-ext)
  (:all-ext #x0)
  (:shaders-ext #x1)
  (:thread-safety-ext #x2)
  (:api-parameters-ext #x3)
  (:object-lifetimes-ext #x4)
  (:core-checks-ext #x5)
  (:unique-handles-ext #x6)
  (:shader-validation-cache-ext #x7))

(defcenum (external-memory-handle-type-flag-bits)
  (:opaque-fd #x1)
  (:opaque-win32 #x2)
  (:opaque-win32-kmt #x4)
  (:d3d11-texture #x8)
  (:d3d11-texture-kmt #x10)
  (:d3d12-heap #x20)
  (:d3d12-resource #x40)
  (:host-allocation #x80) ;; 
  (:host-mapped-foreign-memory #x100) ;; 
  (:dma-buf #x200) ;; 
  (:android-hardware-buffer #x400) ;; 
  (:zircon-vmo #x800) ;; 
  (:rdma-address #x1000)) ;; 

(defcenum (external-memory-handle-type-flag-bits-khr)
  (:opaque-fd #x1)
  (:opaque-win32 #x2)
  (:opaque-win32-kmt #x4)
  (:d3d11-texture #x8)
  (:d3d11-texture-kmt #x10)
  (:d3d12-heap #x20)
  (:d3d12-resource #x40)
  (:host-allocation #x80) ;; 
  (:host-mapped-foreign-memory #x100) ;; 
  (:dma-buf #x200) ;; 
  (:android-hardware-buffer #x400) ;; 
  (:zircon-vmo #x800) ;; 
  (:rdma-address #x1000)) ;; 

(defcenum (external-memory-feature-flag-bits)
  (:dedicated-only #x1)
  (:exportable #x2)
  (:importable #x4))

(defcenum (external-memory-feature-flag-bits-khr)
  (:dedicated-only #x1)
  (:exportable #x2)
  (:importable #x4))

(defcenum (external-semaphore-handle-type-flag-bits)
  (:opaque-fd #x1)
  (:opaque-win32 #x2)
  (:opaque-win32-kmt #x4)
  (:d3d12-fence #x8)
  (:sync-fd #x10)
  (:zircon-event #x80)) ;; 

(defcenum (external-semaphore-handle-type-flag-bits-khr)
  (:opaque-fd #x1)
  (:opaque-win32 #x2)
  (:opaque-win32-kmt #x4)
  (:d3d12-fence #x8)
  (:sync-fd #x10)
  (:zircon-event #x80)) ;; 

(defcenum (external-semaphore-feature-flag-bits)
  (:exportable #x1)
  (:importable #x2))

(defcenum (external-semaphore-feature-flag-bits-khr)
  (:exportable #x1)
  (:importable #x2))

(defcenum (semaphore-import-flag-bits)
  (:temporary #x1))

(defcenum (semaphore-import-flag-bits-khr)
  (:temporary #x1))

(defcenum (external-fence-handle-type-flag-bits)
  (:opaque-fd #x1)
  (:opaque-win32 #x2)
  (:opaque-win32-kmt #x4)
  (:sync-fd #x8))

(defcenum (external-fence-handle-type-flag-bits-khr)
  (:opaque-fd #x1)
  (:opaque-win32 #x2)
  (:opaque-win32-kmt #x4)
  (:sync-fd #x8))

(defcenum (external-fence-feature-flag-bits)
  (:exportable #x1)
  (:importable #x2))

(defcenum (external-fence-feature-flag-bits-khr)
  (:exportable #x1)
  (:importable #x2))

(defcenum (fence-import-flag-bits)
  (:temporary #x1))

(defcenum (fence-import-flag-bits-khr)
  (:temporary #x1))

(defcenum (surface-counter-flag-bits-ext)
  (:vblank #x1))

(defcenum (display-power-state-ext)
  (:off-ext #x0)
  (:suspend-ext #x1)
  (:on-ext #x2))

(defcenum (device-event-type-ext)
  (:display-hotplug-ext #x0))

(defcenum (display-event-type-ext)
  (:first-pixel-out-ext #x0))

(defcenum (peer-memory-feature-flag-bits)
  (:copy-src #x1) ;; Can read with vkCmdCopy commands
  (:copy-dst #x2) ;; Can write with vkCmdCopy commands
  (:generic-src #x4) ;; Can read with any access type/command
  (:generic-dst #x8)) ;; Can write with and access type/command

(defcenum (peer-memory-feature-flag-bits-khr)
  (:copy-src #x1) ;; Can read with vkCmdCopy commands
  (:copy-dst #x2) ;; Can write with vkCmdCopy commands
  (:generic-src #x4) ;; Can read with any access type/command
  (:generic-dst #x8)) ;; Can write with and access type/command

(defcenum (memory-allocate-flag-bits)
  (:device-mask #x1) ;; Force allocation on specific devices
  (:device-address #x2) ;; 
  (:device-address-capture-replay #x4)) ;; 

(defcenum (memory-allocate-flag-bits-khr)
  (:device-mask #x1) ;; Force allocation on specific devices
  (:device-address #x2) ;; 
  (:device-address-capture-replay #x4)) ;; 

(defcenum (device-group-present-mode-flag-bits-khr)
  (:local #x1) ;; Present from local memory
  (:remote #x2) ;; Present from remote memory
  (:sum #x4) ;; Present sum of local and/or remote memory
  (:local-multi-device #x8)) ;; Each physical device presents from local memory

(defcenum (swapchain-create-flag-bits-khr)
  (:split-instance-bind-regions #x1) ;; 
  (:protected #x2) ;; 
  (:mutable-format #x4)) ;; 

(defcenum (subgroup-feature-flag-bits)
  (:basic #x1) ;; Basic subgroup operations
  (:vote #x2) ;; Vote subgroup operations
  (:arithmetic #x4) ;; Arithmetic subgroup operations
  (:ballot #x8) ;; Ballot subgroup operations
  (:shuffle #x10) ;; Shuffle subgroup operations
  (:shuffle-relative #x20) ;; Shuffle relative subgroup operations
  (:clustered #x40) ;; Clustered subgroup operations
  (:quad #x80) ;; Quad subgroup operations
  (:partitioned #x100)) ;; 

(defcenum (tessellation-domain-origin)
  (:upper-left #x0)
  (:lower-left #x1))

(defcenum (tessellation-domain-origin-khr)
  (:upper-left #x0)
  (:lower-left #x1))

(defcenum (sampler-ycbcr-model-conversion)
  (:rgb-identity #x0)
  (:ycbcr-identity #x1) ;; just range expansion
  (:ycbcr-709 #x2) ;; aka HD YUV
  (:ycbcr-601 #x3) ;; aka SD YUV
  (:ycbcr-2020 #x4)) ;; aka UHD YUV

(defcenum (sampler-ycbcr-model-conversion-khr)
  (:rgb-identity #x0)
  (:ycbcr-identity #x1) ;; just range expansion
  (:ycbcr-709 #x2) ;; aka HD YUV
  (:ycbcr-601 #x3) ;; aka SD YUV
  (:ycbcr-2020 #x4)) ;; aka UHD YUV

(defcenum (sampler-ycbcr-range)
  (:itu-full #x0) ;; Luma 0..1 maps to 0..255, chroma -0.5..0.5 to 1..255 (clamped)
  (:itu-narrow #x1)) ;; Luma 0..1 maps to 16..235, chroma -0.5..0.5 to 16..240

(defcenum (sampler-ycbcr-range-khr)
  (:itu-full #x0) ;; Luma 0..1 maps to 0..255, chroma -0.5..0.5 to 1..255 (clamped)
  (:itu-narrow #x1)) ;; Luma 0..1 maps to 16..235, chroma -0.5..0.5 to 16..240

(defcenum (chroma-location)
  (:cosited-even #x0)
  (:midpoint #x1))

(defcenum (chroma-location-khr)
  (:cosited-even #x0)
  (:midpoint #x1))

(defcenum (sampler-reduction-mode)
  (:weighted-average #x0)
  (:min #x1)
  (:max #x2))

(defcenum (sampler-reduction-mode-ext)
  (:weighted-average #x0)
  (:min #x1)
  (:max #x2))

(defcenum (blend-overlap-ext)
  (:uncorrelated-ext #x0)
  (:disjoint-ext #x1)
  (:conjoint-ext #x2))

(defcenum (debug-utils-message-severity-flag-bits-ext)
  (:verbose #x1)
  (:info #x10)
  (:warning #x100)
  (:error #x1000))

(defcenum (debug-utils-message-type-flag-bits-ext)
  (:general #x1)
  (:validation #x2)
  (:performance #x4))

(defcenum (full-screen-exclusive-ext)
  (:default-ext #x0)
  (:allowed-ext #x1)
  (:disallowed-ext #x2)
  (:application-controlled-ext #x3))

(defcenum (shader-float-controls-independence)
  (:32-bit-only #x0)
  (:all #x1)
  (:none #x2))

(defcenum (shader-float-controls-independence-khr)
  (:32-bit-only #x0)
  (:all #x1)
  (:none #x2))

(defcenum (fragment-shading-rate-combiner-op-khr)
  (:keep-khr #x0)
  (:replace-khr #x1)
  (:min-khr #x2)
  (:max-khr #x3)
  (:mul-khr #x4))

(defcenum (submit-flag-bits-khr)
  (:protected #x1))

(defcenum (vendor-id)
  (:viv #x10001) ;; Vivante vendor ID
  (:vsi #x10002) ;; VeriSilicon vendor ID
  (:kazan #x10003) ;; Kazan Software Renderer
  (:codeplay #x10004) ;; Codeplay Software Ltd. vendor ID
  (:mesa #x10005) ;; Mesa vendor ID
  (:pocl #x10006)) ;; PoCL vendor ID

(defcenum (driver-id)
  (:amd-proprietary #x1) ;; Advanced Micro Devices, Inc.
  (:amd-open-source #x2) ;; Advanced Micro Devices, Inc.
  (:mesa-radv #x3) ;; Mesa open source project
  (:nvidia-proprietary #x4) ;; NVIDIA Corporation
  (:intel-proprietary-windows #x5) ;; Intel Corporation
  (:intel-open-source-mesa #x6) ;; Intel Corporation
  (:imagination-proprietary #x7) ;; Imagination Technologies
  (:qualcomm-proprietary #x8) ;; Qualcomm Technologies, Inc.
  (:arm-proprietary #x9) ;; Arm Limited
  (:google-swiftshader #xA) ;; Google LLC
  (:ggp-proprietary #xB) ;; Google LLC
  (:broadcom-proprietary #xC) ;; Broadcom Inc.
  (:mesa-llvmpipe #xD) ;; Mesa
  (:moltenvk #xE) ;; MoltenVK
  (:coreavi-proprietary #xF) ;; Core Avionics & Industrial Inc.
  (:juice-proprietary #x10) ;; Juice Technologies, Inc.
  (:verisilicon-proprietary #x11) ;; Verisilicon, Inc.
  (:mesa-turnip #x12) ;; Mesa open source project
  (:mesa-v3dv #x13) ;; Mesa open source project
  (:mesa-panvk #x14)) ;; Mesa open source project

(defcenum (driver-id-khr)
  (:amd-proprietary #x1) ;; Advanced Micro Devices, Inc.
  (:amd-open-source #x2) ;; Advanced Micro Devices, Inc.
  (:mesa-radv #x3) ;; Mesa open source project
  (:nvidia-proprietary #x4) ;; NVIDIA Corporation
  (:intel-proprietary-windows #x5) ;; Intel Corporation
  (:intel-open-source-mesa #x6) ;; Intel Corporation
  (:imagination-proprietary #x7) ;; Imagination Technologies
  (:qualcomm-proprietary #x8) ;; Qualcomm Technologies, Inc.
  (:arm-proprietary #x9) ;; Arm Limited
  (:google-swiftshader #xA) ;; Google LLC
  (:ggp-proprietary #xB) ;; Google LLC
  (:broadcom-proprietary #xC) ;; Broadcom Inc.
  (:mesa-llvmpipe #xD) ;; Mesa
  (:moltenvk #xE) ;; MoltenVK
  (:coreavi-proprietary #xF) ;; Core Avionics & Industrial Inc.
  (:juice-proprietary #x10) ;; Juice Technologies, Inc.
  (:verisilicon-proprietary #x11) ;; Verisilicon, Inc.
  (:mesa-turnip #x12) ;; Mesa open source project
  (:mesa-v3dv #x13) ;; Mesa open source project
  (:mesa-panvk #x14)) ;; Mesa open source project

(defcenum (shading-rate-palette-entry-nv)
  (:no-invocations-nv #x0)
  (:16-invocations-per-pixel-nv #x1)
  (:8-invocations-per-pixel-nv #x2)
  (:4-invocations-per-pixel-nv #x3)
  (:2-invocations-per-pixel-nv #x4)
  (:1-invocation-per-pixel-nv #x5)
  (:1-invocation-per-2x1-pixels-nv #x6)
  (:1-invocation-per-1x2-pixels-nv #x7)
  (:1-invocation-per-2x2-pixels-nv #x8)
  (:1-invocation-per-4x2-pixels-nv #x9)
  (:1-invocation-per-2x4-pixels-nv #xA)
  (:1-invocation-per-4x4-pixels-nv #xB))

(defcenum (coarse-sample-order-type-nv)
  (:default-nv #x0)
  (:custom-nv #x1)
  (:pixel-major-nv #x2)
  (:sample-major-nv #x3))

(defcenum (pipeline-executable-statistic-format-khr)
  (:bool32-khr #x0)
  (:int64-khr #x1)
  (:uint64-khr #x2)
  (:float64-khr #x3))

(defcenum (video-codec-operation-flag-bits-khr)
  (:invalid #x0)
  (:decode-h264 #x1) ;; 
  (:decode-h265 #x2) ;; 
  (:encode-h264 #x10000) ;; 
  (:encode-h265 #x20000)) ;; 

(defcenum (video-chroma-subsampling-flag-bits-khr)
  (:invalid #x0)
  (:monochrome #x1)
  (:420 #x2)
  (:422 #x4)
  (:444 #x8))

(defcenum (video-component-bit-depth-flag-bits-khr)
  (:invalid-khr #x0)
  (:8 #x1)
  (:10 #x4)
  (:12 #x10))

(defcenum (video-capability-flag-bits-khr)
  (:protected-content #x1)
  (:separate-reference-images #x2))

(defcenum (video-session-create-flag-bits-khr)
  (:default-khr #x0)
  (:protected-content #x1))

(defcenum (video-coding-quality-preset-flag-bits-khr)
  (:normal #x1)
  (:power #x2)
  (:quality #x4))

(defcenum (video-coding-control-flag-bits-khr)
  (:default-khr #x0)
  (:reset #x1))

(defcenum (query-result-status-khr)
  (:error-khr -1)
  (:not-ready-khr #x0)
  (:complete-khr #x1))

(defcenum (video-decode-flag-bits-khr)
  (:default-khr #x0)
  (:reserved-0 #x1))

(defcenum (video-decode-h264-picture-layout-flag-bits-ext)
  (:progressive-ext #x0)
  (:interlaced-interleaved-lines #x1)
  (:interlaced-separate-planes #x2))

(defcenum (video-encode-flag-bits-khr)
  (:default-khr #x0)
  (:reserved-0 #x1))

(defcenum (video-encode-rate-control-flag-bits-khr)
  (:default-khr #x0)
  (:reset #x1))

(defcenum (video-encode-rate-control-mode-flag-bits-khr)
  (:none #x0)
  (:cbr #x1)
  (:vbr #x2))

(defcenum (video-encode-h264-capability-flag-bits-ext)
  (:cabac #x1)
  (:cavlc #x2)
  (:weighted-bi-pred-implicit #x4)
  (:transform-8x8 #x8)
  (:chroma-qp-offset #x10)
  (:second-chroma-qp-offset #x20)
  (:deblocking-filter-disabled #x40)
  (:deblocking-filter-enabled #x80)
  (:deblocking-filter-partial #x100)
  (:multiple-slice-per-frame #x200)
  (:evenly-distributed-slice-size #x400))

(defcenum (video-encode-h264-input-mode-flag-bits-ext)
  (:frame #x1)
  (:slice #x2)
  (:non-vcl #x4))

(defcenum (video-encode-h264-output-mode-flag-bits-ext)
  (:frame #x1)
  (:slice #x2)
  (:non-vcl #x4))

(defcenum (video-encode-h264-create-flag-bits-ext)
  (:default-ext #x0)
  (:reserved-0 #x1))

(defcenum (video-encode-h265-input-mode-flag-bits-ext)
  (:frame #x1)
  (:slice #x2)
  (:non-vcl #x4))

(defcenum (video-encode-h265-output-mode-flag-bits-ext)
  (:frame #x1)
  (:slice #x2)
  (:non-vcl #x4))

(defcenum (video-encode-h265-ctb-size-flag-bits-ext)
  (:8 #x1)
  (:16 #x2)
  (:32 #x4)
  (:64 #x8))

(defcenum (acceleration-structure-motion-instance-type-nv)
  (:static-nv #x0)
  (:matrix-motion-nv #x1)
  (:srt-motion-nv #x2))

(defcenum (descriptor-pool-reset-flag-bits))

(defcenum (pipeline-viewport-state-create-flag-bits))

(defcenum (pipeline-vertex-input-state-create-flag-bits))

(defcenum (pipeline-tessellation-state-create-flag-bits))

(defcenum (pipeline-rasterization-state-create-flag-bits))

(defcenum (pipeline-multisample-state-create-flag-bits))

(defcenum (pipeline-input-assembly-state-create-flag-bits))

(defcenum (pipeline-dynamic-state-create-flag-bits))

(defcenum (pipeline-depth-stencil-state-create-flag-bits))

(defcenum (pipeline-color-blend-state-create-flag-bits))

(defcenum (buffer-view-create-flag-bits))

(defcenum (memory-map-flag-bits))

(defcenum (descriptor-update-template-create-flag-bits))

(defcenum (command-pool-trim-flag-bits))

(defcenum (display-surface-create-flag-bits-khr))

(defcenum (display-mode-create-flag-bits-khr))

(defcenum (xlib-surface-create-flag-bits-khr))

(defcenum (xcb-surface-create-flag-bits-khr))

(defcenum (wayland-surface-create-flag-bits-khr))

(defcenum (android-surface-create-flag-bits-khr))

(defcenum (win32-surface-create-flag-bits-khr))

(defcenum (video-end-coding-flag-bits-khr))

(defcenum (video-begin-coding-flag-bits-khr))

(defcenum (pipeline-rasterization-state-stream-create-flag-bits-ext))

(defcenum (video-encode-h265-create-flag-bits-ext))

(defcenum (video-encode-h265-capability-flag-bits-ext))

(defcenum (video-decode-h264-create-flag-bits-ext))

(defcenum (stream-descriptor-surface-create-flag-bits-ggp))

(defcenum (vi-surface-create-flag-bits-nn))

(defcenum (pipeline-viewport-swizzle-state-create-flag-bits-nv))

(defcenum (pipeline-discard-rectangle-state-create-flag-bits-ext))

(defcenum (pipeline-rasterization-conservative-state-create-flag-bits-ext))

(defcenum (pipeline-rasterization-depth-clip-state-create-flag-bits-ext))

(defcenum (ios-surface-create-flag-bits-mvk))

(defcenum (mac-os-surface-create-flag-bits-mvk))

(defcenum (debug-utils-messenger-create-flag-bits-ext))

(defcenum (debug-utils-messenger-callback-data-flag-bits-ext))

(defcenum (pipeline-coverage-to-color-state-create-flag-bits-nv))

(defcenum (pipeline-coverage-modulation-state-create-flag-bits-nv))

(defcenum (validation-cache-create-flag-bits-ext))

(defcenum (video-decode-h265-create-flag-bits-ext))

(defcenum (image-pipe-surface-create-flag-bits-fuchsia))

(defcenum (metal-surface-create-flag-bits-ext))

(defcenum (pipeline-coverage-reduction-state-create-flag-bits-nv))

(defcenum (headless-surface-create-flag-bits-ext))

(defcenum (device-memory-report-flag-bits-ext))

(defcenum (acceleration-structure-motion-instance-flag-bits-nv))

(defcenum (acceleration-structure-motion-info-flag-bits-nv))

(defcenum (direct-fb-surface-create-flag-bits-ext))

(defcenum (screen-surface-create-flag-bits-qnx))

(defctype pfn-internal-allocation-notification :pointer)

(defctype pfn-internal-free-notification :pointer)

(defctype pfn-reallocation-function :pointer)

(defctype pfn-allocation-function :pointer)

(defctype pfn-free-function :pointer)

(defctype pfn-void-function :pointer)

(defctype pfn-debug-report-callback-ext :pointer)

(defctype pfn-debug-utils-messenger-callback-ext :pointer)

(defctype pfn-device-memory-report-callback-ext :pointer)

(defcstruct (base-out-structure :class c-base-out-structure)
  (s-type structure-type)
  (p-next (:pointer (:struct base-out-structure))))

(defcstruct (base-in-structure :class c-base-in-structure)
  (s-type structure-type)
  (p-next (:pointer (:struct base-in-structure))))

(defcstruct (offset-2d :class c-offset-2d)
  (x :int32)
  (y :int32))

(defcstruct (offset-3d :class c-offset-3d)
  (x :int32)
  (y :int32)
  (z :int32))

(defcstruct (extent-2d :class c-extent-2d)
  (width :uint32)
  (height :uint32))

(defcstruct (extent-3d :class c-extent-3d)
  (width :uint32)
  (height :uint32)
  (depth :uint32))

(defcstruct (viewport :class c-viewport)
  (x :float)
  (y :float)
  (width :float)
  (height :float)
  (min-depth :float)
  (max-depth :float))

(defcstruct (rect-2d :class c-rect-2d)
  (offset (:struct offset-2d))
  (extent (:struct extent-2d)))

(defcstruct (clear-rect :class c-clear-rect)
  (rect (:struct rect-2d))
  (base-array-layer :uint32)
  (layer-count :uint32))

(defcstruct (component-mapping :class c-component-mapping)
  (r component-swizzle)
  (g component-swizzle)
  (b component-swizzle)
  (a component-swizzle))

(defcstruct (physical-device-limits :class c-physical-device-limits)
  (max-image-dimension-1d :uint32)
  (max-image-dimension-2d :uint32)
  (max-image-dimension-3d :uint32)
  (max-image-dimension-cube :uint32)
  (max-image-array-layers :uint32)
  (max-texel-buffer-elements :uint32)
  (max-uniform-buffer-range :uint32)
  (max-storage-buffer-range :uint32)
  (max-push-constants-size :uint32)
  (max-memory-allocation-count :uint32)
  (max-sampler-allocation-count :uint32)
  (buffer-image-granularity device-size)
  (sparse-address-space-size device-size)
  (max-bound-descriptor-sets :uint32)
  (max-per-stage-descriptor-samplers :uint32)
  (max-per-stage-descriptor-uniform-buffers :uint32)
  (max-per-stage-descriptor-storage-buffers :uint32)
  (max-per-stage-descriptor-sampled-images :uint32)
  (max-per-stage-descriptor-storage-images :uint32)
  (max-per-stage-descriptor-input-attachments :uint32)
  (max-per-stage-resources :uint32)
  (max-descriptor-set-samplers :uint32)
  (max-descriptor-set-uniform-buffers :uint32)
  (max-descriptor-set-uniform-buffers-dynamic :uint32)
  (max-descriptor-set-storage-buffers :uint32)
  (max-descriptor-set-storage-buffers-dynamic :uint32)
  (max-descriptor-set-sampled-images :uint32)
  (max-descriptor-set-storage-images :uint32)
  (max-descriptor-set-input-attachments :uint32)
  (max-vertex-input-attributes :uint32)
  (max-vertex-input-bindings :uint32)
  (max-vertex-input-attribute-offset :uint32)
  (max-vertex-input-binding-stride :uint32)
  (max-vertex-output-components :uint32)
  (max-tessellation-generation-level :uint32)
  (max-tessellation-patch-size :uint32)
  (max-tessellation-control-per-vertex-input-components :uint32)
  (max-tessellation-control-per-vertex-output-components :uint32)
  (max-tessellation-control-per-patch-output-components :uint32)
  (max-tessellation-control-total-output-components :uint32)
  (max-tessellation-evaluation-input-components :uint32)
  (max-tessellation-evaluation-output-components :uint32)
  (max-geometry-shader-invocations :uint32)
  (max-geometry-input-components :uint32)
  (max-geometry-output-components :uint32)
  (max-geometry-output-vertices :uint32)
  (max-geometry-total-output-components :uint32)
  (max-fragment-input-components :uint32)
  (max-fragment-output-attachments :uint32)
  (max-fragment-dual-src-attachments :uint32)
  (max-fragment-combined-output-resources :uint32)
  (max-compute-shared-memory-size :uint32)
  (max-compute-work-group-count :uint32 :count 3)
  (max-compute-work-group-invocations :uint32)
  (max-compute-work-group-size :uint32 :count 3)
  (sub-pixel-precision-bits :uint32)
  (sub-texel-precision-bits :uint32)
  (mipmap-precision-bits :uint32)
  (max-draw-indexed-index-value :uint32)
  (max-draw-indirect-count :uint32)
  (max-sampler-lod-bias :float)
  (max-sampler-anisotropy :float)
  (max-viewports :uint32)
  (max-viewport-dimensions :uint32 :count 2)
  (viewport-bounds-range :float :count 2)
  (viewport-sub-pixel-bits :uint32)
  (min-memory-map-alignment :size)
  (min-texel-buffer-offset-alignment device-size)
  (min-uniform-buffer-offset-alignment device-size)
  (min-storage-buffer-offset-alignment device-size)
  (min-texel-offset :int32)
  (max-texel-offset :uint32)
  (min-texel-gather-offset :int32)
  (max-texel-gather-offset :uint32)
  (min-interpolation-offset :float)
  (max-interpolation-offset :float)
  (sub-pixel-interpolation-offset-bits :uint32)
  (max-framebuffer-width :uint32)
  (max-framebuffer-height :uint32)
  (max-framebuffer-layers :uint32)
  (framebuffer-color-sample-counts sample-count-flags)
  (framebuffer-depth-sample-counts sample-count-flags)
  (framebuffer-stencil-sample-counts sample-count-flags)
  (framebuffer-no-attachments-sample-counts sample-count-flags)
  (max-color-attachments :uint32)
  (sampled-image-color-sample-counts sample-count-flags)
  (sampled-image-integer-sample-counts sample-count-flags)
  (sampled-image-depth-sample-counts sample-count-flags)
  (sampled-image-stencil-sample-counts sample-count-flags)
  (storage-image-sample-counts sample-count-flags)
  (max-sample-mask-words :uint32)
  (timestamp-compute-and-graphics bool32)
  (timestamp-period :float)
  (max-clip-distances :uint32)
  (max-cull-distances :uint32)
  (max-combined-clip-and-cull-distances :uint32)
  (discrete-queue-priorities :uint32)
  (point-size-range :float :count 2)
  (line-width-range :float :count 2)
  (point-size-granularity :float)
  (line-width-granularity :float)
  (strict-lines bool32)
  (standard-sample-locations bool32)
  (optimal-buffer-copy-offset-alignment device-size)
  (optimal-buffer-copy-row-pitch-alignment device-size)
  (non-coherent-atom-size device-size))

(defcstruct (physical-device-sparse-properties :class c-physical-device-sparse-properties)
  (residency-standard-2d-block-shape bool32)
  (residency-standard-2d-multisample-block-shape bool32)
  (residency-standard-3d-block-shape bool32)
  (residency-aligned-mip-size bool32)
  (residency-non-resident-strict bool32))

(defcstruct (physical-device-properties :class c-physical-device-properties)
  (api-version :uint32)
  (driver-version :uint32)
  (vendor-id :uint32)
  (device-id :uint32)
  (device-type physical-device-type)
  (device-name :char :count 256)
  (pipeline-cache-uuid :uint8 :count 16)
  (limits (:struct physical-device-limits))
  (sparse-properties (:struct physical-device-sparse-properties)))

(defcstruct (extension-properties :class c-extension-properties)
  (extension-name :char :count 256)
  (spec-version :uint32))

(defcstruct (layer-properties :class c-layer-properties)
  (layer-name :char :count 256)
  (spec-version :uint32)
  (implementation-version :uint32)
  (description :char :count 256))

(defcstruct (application-info :class c-application-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (p-application-name :string)
  (application-version :uint32)
  (p-engine-name :string)
  (engine-version :uint32)
  (api-version :uint32))

(defcstruct (allocation-callbacks :class c-allocation-callbacks)
  (p-user-data (:pointer :void))
  (pfn-allocation pfn-allocation-function)
  (pfn-reallocation pfn-reallocation-function)
  (pfn-free pfn-free-function)
  (pfn-internal-allocation pfn-internal-allocation-notification)
  (pfn-internal-free pfn-internal-free-notification))

(defcstruct (device-queue-create-info :class c-device-queue-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags device-queue-create-flags)
  (queue-family-index :uint32)
  (queue-count :uint32)
  (p-queue-priorities (:pointer :float)))

(defcstruct (physical-device-features :class c-physical-device-features)
  (robust-buffer-access bool32)
  (full-draw-index-uint-32 bool32)
  (image-cube-array bool32)
  (independent-blend bool32)
  (geometry-shader bool32)
  (tessellation-shader bool32)
  (sample-rate-shading bool32)
  (dual-src-blend bool32)
  (logic-op bool32)
  (multi-draw-indirect bool32)
  (draw-indirect-first-instance bool32)
  (depth-clamp bool32)
  (depth-bias-clamp bool32)
  (fill-mode-non-solid bool32)
  (depth-bounds bool32)
  (wide-lines bool32)
  (large-points bool32)
  (alpha-to-one bool32)
  (multi-viewport bool32)
  (sampler-anisotropy bool32)
  (texture-compression-etc2 bool32)
  (texture-compression-astc_-ldr bool32)
  (texture-compression-bc bool32)
  (occlusion-query-precise bool32)
  (pipeline-statistics-query bool32)
  (vertex-pipeline-stores-and-atomics bool32)
  (fragment-stores-and-atomics bool32)
  (shader-tessellation-and-geometry-point-size bool32)
  (shader-image-gather-extended bool32)
  (shader-storage-image-extended-formats bool32)
  (shader-storage-image-multisample bool32)
  (shader-storage-image-read-without-format bool32)
  (shader-storage-image-write-without-format bool32)
  (shader-uniform-buffer-array-dynamic-indexing bool32)
  (shader-sampled-image-array-dynamic-indexing bool32)
  (shader-storage-buffer-array-dynamic-indexing bool32)
  (shader-storage-image-array-dynamic-indexing bool32)
  (shader-clip-distance bool32)
  (shader-cull-distance bool32)
  (shader-float-64 bool32)
  (shader-int-64 bool32)
  (shader-int-16 bool32)
  (shader-resource-residency bool32)
  (shader-resource-min-lod bool32)
  (sparse-binding bool32)
  (sparse-residency-buffer bool32)
  (sparse-residency-image-2d bool32)
  (sparse-residency-image-3d bool32)
  (sparse-residency-2-samples bool32)
  (sparse-residency-4-samples bool32)
  (sparse-residency-8-samples bool32)
  (sparse-residency-16-samples bool32)
  (sparse-residency-aliased bool32)
  (variable-multisample-rate bool32)
  (inherited-queries bool32))

(defcstruct (device-create-info :class c-device-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags device-create-flags)
  (queue-create-info-count :uint32)
  (p-queue-create-infos (:pointer (:struct device-queue-create-info)))
  (enabled-layer-count :uint32)
  (pp-enabled-layer-names (:pointer (:pointer :char)))
  (enabled-extension-count :uint32)
  (pp-enabled-extension-names (:pointer (:pointer :char)))
  (p-enabled-features (:pointer (:struct physical-device-features))))

(defcstruct (instance-create-info :class c-instance-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags instance-create-flags)
  (p-application-info (:pointer (:struct application-info)))
  (enabled-layer-count :uint32)
  (pp-enabled-layer-names (:pointer (:pointer :char)))
  (enabled-extension-count :uint32)
  (pp-enabled-extension-names (:pointer (:pointer :char))))

(defcstruct (queue-family-properties :class c-queue-family-properties)
  (queue-flags queue-flags)
  (queue-count :uint32)
  (timestamp-valid-bits :uint32)
  (min-image-transfer-granularity (:struct extent-3d)))

(defcstruct (memory-type :class c-memory-type)
  (property-flags memory-property-flags)
  (heap-index :uint32))

(defcstruct (memory-heap :class c-memory-heap)
  (size device-size)
  (flags memory-heap-flags))

(defcstruct (physical-device-memory-properties :class c-physical-device-memory-properties)
  (memory-type-count :uint32)
  (memory-types (:struct memory-type) :count 32)
  (memory-heap-count :uint32)
  (memory-heaps (:struct memory-heap) :count 16))

(defcstruct (memory-allocate-info :class c-memory-allocate-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (allocation-size device-size)
  (memory-type-index :uint32))

(defcstruct (memory-requirements :class c-memory-requirements)
  (size device-size)
  (alignment device-size)
  (memory-type-bits :uint32))

(defcstruct (sparse-image-format-properties :class c-sparse-image-format-properties)
  (aspect-mask image-aspect-flags)
  (image-granularity (:struct extent-3d))
  (flags sparse-image-format-flags))

(defcstruct (sparse-image-memory-requirements :class c-sparse-image-memory-requirements)
  (format-properties (:struct sparse-image-format-properties))
  (image-mip-tail-first-lod :uint32)
  (image-mip-tail-size device-size)
  (image-mip-tail-offset device-size)
  (image-mip-tail-stride device-size))

(defcstruct (mapped-memory-range :class c-mapped-memory-range)
  (s-type structure-type)
  (p-next (:pointer :void))
  (memory device-memory)
  (offset device-size)
  (size device-size))

(defcstruct (format-properties :class c-format-properties)
  (linear-tiling-features format-feature-flags)
  (optimal-tiling-features format-feature-flags)
  (buffer-features format-feature-flags))

(defcstruct (image-format-properties :class c-image-format-properties)
  (max-extent (:struct extent-3d))
  (max-mip-levels :uint32)
  (max-array-layers :uint32)
  (sample-counts sample-count-flags)
  (max-resource-size device-size))

(defcstruct (descriptor-buffer-info :class c-descriptor-buffer-info)
  (buffer buffer)
  (offset device-size)
  (range device-size))

(defcstruct (descriptor-image-info :class c-descriptor-image-info)
  (sampler sampler)
  (image-view image-view)
  (image-layout image-layout))

(defcstruct (write-descriptor-set :class c-write-descriptor-set)
  (s-type structure-type)
  (p-next (:pointer :void))
  (dst-set descriptor-set)
  (dst-binding :uint32)
  (dst-array-element :uint32)
  (descriptor-count :uint32)
  (descriptor-type descriptor-type)
  (p-image-info (:pointer (:struct descriptor-image-info)))
  (p-buffer-info (:pointer (:struct descriptor-buffer-info)))
  (p-texel-buffer-view (:pointer buffer-view)))

(defcstruct (copy-descriptor-set :class c-copy-descriptor-set)
  (s-type structure-type)
  (p-next (:pointer :void))
  (src-set descriptor-set)
  (src-binding :uint32)
  (src-array-element :uint32)
  (dst-set descriptor-set)
  (dst-binding :uint32)
  (dst-array-element :uint32)
  (descriptor-count :uint32))

(defcstruct (buffer-create-info :class c-buffer-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags buffer-create-flags)
  (size device-size)
  (usage buffer-usage-flags)
  (sharing-mode sharing-mode)
  (queue-family-index-count :uint32)
  (p-queue-family-indices (:pointer :uint32)))

(defcstruct (buffer-view-create-info :class c-buffer-view-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags buffer-view-create-flags)
  (buffer buffer)
  (format format)
  (offset device-size)
  (range device-size))

(defcstruct (image-subresource :class c-image-subresource)
  (aspect-mask image-aspect-flags)
  (mip-level :uint32)
  (array-layer :uint32))

(defcstruct (image-subresource-layers :class c-image-subresource-layers)
  (aspect-mask image-aspect-flags)
  (mip-level :uint32)
  (base-array-layer :uint32)
  (layer-count :uint32))

(defcstruct (image-subresource-range :class c-image-subresource-range)
  (aspect-mask image-aspect-flags)
  (base-mip-level :uint32)
  (level-count :uint32)
  (base-array-layer :uint32)
  (layer-count :uint32))

(defcstruct (memory-barrier :class c-memory-barrier)
  (s-type structure-type)
  (p-next (:pointer :void))
  (src-access-mask access-flags)
  (dst-access-mask access-flags))

(defcstruct (buffer-memory-barrier :class c-buffer-memory-barrier)
  (s-type structure-type)
  (p-next (:pointer :void))
  (src-access-mask access-flags)
  (dst-access-mask access-flags)
  (src-queue-family-index :uint32)
  (dst-queue-family-index :uint32)
  (buffer buffer)
  (offset device-size)
  (size device-size))

(defcstruct (image-memory-barrier :class c-image-memory-barrier)
  (s-type structure-type)
  (p-next (:pointer :void))
  (src-access-mask access-flags)
  (dst-access-mask access-flags)
  (old-layout image-layout)
  (new-layout image-layout)
  (src-queue-family-index :uint32)
  (dst-queue-family-index :uint32)
  (image image)
  (subresource-range (:struct image-subresource-range)))

(defcstruct (image-create-info :class c-image-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags image-create-flags)
  (image-type image-type)
  (format format)
  (extent (:struct extent-3d))
  (mip-levels :uint32)
  (array-layers :uint32)
  (samples sample-count-flag-bits)
  (tiling image-tiling)
  (usage image-usage-flags)
  (sharing-mode sharing-mode)
  (queue-family-index-count :uint32)
  (p-queue-family-indices (:pointer :uint32))
  (initial-layout image-layout))

(defcstruct (subresource-layout :class c-subresource-layout)
  (offset device-size)
  (size device-size)
  (row-pitch device-size)
  (array-pitch device-size)
  (depth-pitch device-size))

(defcstruct (image-view-create-info :class c-image-view-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags image-view-create-flags)
  (image image)
  (view-type image-view-type)
  (format format)
  (components (:struct component-mapping))
  (subresource-range (:struct image-subresource-range)))

(defcstruct (buffer-copy :class c-buffer-copy)
  (src-offset device-size)
  (dst-offset device-size)
  (size device-size))

(defcstruct (sparse-memory-bind :class c-sparse-memory-bind)
  (resource-offset device-size)
  (size device-size)
  (memory device-memory)
  (memory-offset device-size)
  (flags sparse-memory-bind-flags))

(defcstruct (sparse-image-memory-bind :class c-sparse-image-memory-bind)
  (subresource (:struct image-subresource))
  (offset (:struct offset-3d))
  (extent (:struct extent-3d))
  (memory device-memory)
  (memory-offset device-size)
  (flags sparse-memory-bind-flags))

(defcstruct (sparse-buffer-memory-bind-info :class c-sparse-buffer-memory-bind-info)
  (buffer buffer)
  (bind-count :uint32)
  (p-binds (:pointer (:struct sparse-memory-bind))))

(defcstruct (sparse-image-opaque-memory-bind-info :class c-sparse-image-opaque-memory-bind-info)
  (image image)
  (bind-count :uint32)
  (p-binds (:pointer (:struct sparse-memory-bind))))

(defcstruct (sparse-image-memory-bind-info :class c-sparse-image-memory-bind-info)
  (image image)
  (bind-count :uint32)
  (p-binds (:pointer (:struct sparse-image-memory-bind))))

(defcstruct (bind-sparse-info :class c-bind-sparse-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (wait-semaphore-count :uint32)
  (p-wait-semaphores (:pointer semaphore))
  (buffer-bind-count :uint32)
  (p-buffer-binds (:pointer (:struct sparse-buffer-memory-bind-info)))
  (image-opaque-bind-count :uint32)
  (p-image-opaque-binds (:pointer
                         (:struct sparse-image-opaque-memory-bind-info)))
  (image-bind-count :uint32)
  (p-image-binds (:pointer (:struct sparse-image-memory-bind-info)))
  (signal-semaphore-count :uint32)
  (p-signal-semaphores (:pointer semaphore)))

(defcstruct (image-copy :class c-image-copy)
  (src-subresource (:struct image-subresource-layers))
  (src-offset (:struct offset-3d))
  (dst-subresource (:struct image-subresource-layers))
  (dst-offset (:struct offset-3d))
  (extent (:struct extent-3d)))

(defcstruct (image-blit :class c-image-blit)
  (src-subresource (:struct image-subresource-layers))
  (src-offsets (:struct offset-3d) :count 2)
  (dst-subresource (:struct image-subresource-layers))
  (dst-offsets (:struct offset-3d) :count 2))

(defcstruct (buffer-image-copy :class c-buffer-image-copy)
  (buffer-offset device-size)
  (buffer-row-length :uint32)
  (buffer-image-height :uint32)
  (image-subresource (:struct image-subresource-layers))
  (image-offset (:struct offset-3d))
  (image-extent (:struct extent-3d)))

(defcstruct (image-resolve :class c-image-resolve)
  (src-subresource (:struct image-subresource-layers))
  (src-offset (:struct offset-3d))
  (dst-subresource (:struct image-subresource-layers))
  (dst-offset (:struct offset-3d))
  (extent (:struct extent-3d)))

(defcstruct (shader-module-create-info :class c-shader-module-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags shader-module-create-flags)
  (code-size :size)
  (p-code (:pointer :uint32)))

(defcstruct (descriptor-set-layout-binding :class c-descriptor-set-layout-binding)
  (binding :uint32)
  (descriptor-type descriptor-type)
  (descriptor-count :uint32)
  (stage-flags shader-stage-flags)
  (p-immutable-samplers (:pointer sampler)))

(defcstruct (descriptor-set-layout-create-info :class c-descriptor-set-layout-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags descriptor-set-layout-create-flags)
  (binding-count :uint32)
  (p-bindings (:pointer (:struct descriptor-set-layout-binding))))

(defcstruct (descriptor-pool-size :class c-descriptor-pool-size)
  (type descriptor-type)
  (descriptor-count :uint32))

(defcstruct (descriptor-pool-create-info :class c-descriptor-pool-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags descriptor-pool-create-flags)
  (max-sets :uint32)
  (pool-size-count :uint32)
  (p-pool-sizes (:pointer (:struct descriptor-pool-size))))

(defcstruct (descriptor-set-allocate-info :class c-descriptor-set-allocate-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (descriptor-pool descriptor-pool)
  (descriptor-set-count :uint32)
  (p-set-layouts (:pointer descriptor-set-layout)))

(defcstruct (specialization-map-entry :class c-specialization-map-entry)
  (constant-id :uint32)
  (offset :uint32)
  (size :size))

(defcstruct (specialization-info :class c-specialization-info)
  (map-entry-count :uint32)
  (p-map-entries (:pointer (:struct specialization-map-entry)))
  (data-size :size)
  (p-data (:pointer :void)))

(defcstruct (pipeline-shader-stage-create-info :class c-pipeline-shader-stage-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags pipeline-shader-stage-create-flags)
  (stage shader-stage-flag-bits)
  (module shader-module)
  (p-name :string)
  (p-specialization-info (:pointer (:struct specialization-info))))

(defcstruct (compute-pipeline-create-info :class c-compute-pipeline-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags pipeline-create-flags)
  (stage (:struct pipeline-shader-stage-create-info))
  (layout pipeline-layout)
  (base-pipeline-handle pipeline)
  (base-pipeline-index :int32))

(defcstruct (vertex-input-binding-description :class c-vertex-input-binding-description)
  (binding :uint32)
  (stride :uint32)
  (input-rate vertex-input-rate))

(defcstruct (vertex-input-attribute-description :class c-vertex-input-attribute-description)
  (location :uint32)
  (binding :uint32)
  (format format)
  (offset :uint32))

(defcstruct (pipeline-vertex-input-state-create-info :class c-pipeline-vertex-input-state-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags pipeline-vertex-input-state-create-flags)
  (vertex-binding-description-count :uint32)
  (p-vertex-binding-descriptions (:pointer
                                  (:struct vertex-input-binding-description)))
  (vertex-attribute-description-count :uint32)
  (p-vertex-attribute-descriptions (:pointer
                                    (:struct
                                     vertex-input-attribute-description))))

(defcstruct (pipeline-input-assembly-state-create-info :class c-pipeline-input-assembly-state-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags pipeline-input-assembly-state-create-flags)
  (topology primitive-topology)
  (primitive-restart-enable bool32))

(defcstruct (pipeline-tessellation-state-create-info :class c-pipeline-tessellation-state-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags pipeline-tessellation-state-create-flags)
  (patch-control-points :uint32))

(defcstruct (pipeline-viewport-state-create-info :class c-pipeline-viewport-state-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags pipeline-viewport-state-create-flags)
  (viewport-count :uint32)
  (p-viewports (:pointer (:struct viewport)))
  (scissor-count :uint32)
  (p-scissors (:pointer (:struct rect-2d))))

(defcstruct (pipeline-rasterization-state-create-info :class c-pipeline-rasterization-state-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags pipeline-rasterization-state-create-flags)
  (depth-clamp-enable bool32)
  (rasterizer-discard-enable bool32)
  (polygon-mode polygon-mode)
  (cull-mode cull-mode-flags)
  (front-face front-face)
  (depth-bias-enable bool32)
  (depth-bias-constant-factor :float)
  (depth-bias-clamp :float)
  (depth-bias-slope-factor :float)
  (line-width :float))

(defcstruct (pipeline-multisample-state-create-info :class c-pipeline-multisample-state-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags pipeline-multisample-state-create-flags)
  (rasterization-samples sample-count-flag-bits)
  (sample-shading-enable bool32)
  (min-sample-shading :float)
  (p-sample-mask (:pointer sample-mask))
  (alpha-to-coverage-enable bool32)
  (alpha-to-one-enable bool32))

(defcstruct (pipeline-color-blend-attachment-state :class c-pipeline-color-blend-attachment-state)
  (blend-enable bool32)
  (src-color-blend-factor blend-factor)
  (dst-color-blend-factor blend-factor)
  (color-blend-op blend-op)
  (src-alpha-blend-factor blend-factor)
  (dst-alpha-blend-factor blend-factor)
  (alpha-blend-op blend-op)
  (color-write-mask color-component-flags))

(defcstruct (pipeline-color-blend-state-create-info :class c-pipeline-color-blend-state-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags pipeline-color-blend-state-create-flags)
  (logic-op-enable bool32)
  (logic-op logic-op)
  (attachment-count :uint32)
  (p-attachments (:pointer (:struct pipeline-color-blend-attachment-state)))
  (blend-constants :float :count 4))

(defcstruct (pipeline-dynamic-state-create-info :class c-pipeline-dynamic-state-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags pipeline-dynamic-state-create-flags)
  (dynamic-state-count :uint32)
  (p-dynamic-states (:pointer dynamic-state)))

(defcstruct (stencil-op-state :class c-stencil-op-state)
  (fail-op stencil-op)
  (pass-op stencil-op)
  (depth-fail-op stencil-op)
  (compare-op compare-op)
  (compare-mask :uint32)
  (write-mask :uint32)
  (reference :uint32))

(defcstruct (pipeline-depth-stencil-state-create-info :class c-pipeline-depth-stencil-state-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags pipeline-depth-stencil-state-create-flags)
  (depth-test-enable bool32)
  (depth-write-enable bool32)
  (depth-compare-op compare-op)
  (depth-bounds-test-enable bool32)
  (stencil-test-enable bool32)
  (front (:struct stencil-op-state))
  (back (:struct stencil-op-state))
  (min-depth-bounds :float)
  (max-depth-bounds :float))

(defcstruct (graphics-pipeline-create-info :class c-graphics-pipeline-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags pipeline-create-flags)
  (stage-count :uint32)
  (p-stages (:pointer (:struct pipeline-shader-stage-create-info)))
  (p-vertex-input-state (:pointer
                         (:struct pipeline-vertex-input-state-create-info)))
  (p-input-assembly-state (:pointer
                           (:struct pipeline-input-assembly-state-create-info)))
  (p-tessellation-state (:pointer
                         (:struct pipeline-tessellation-state-create-info)))
  (p-viewport-state (:pointer (:struct pipeline-viewport-state-create-info)))
  (p-rasterization-state (:pointer
                          (:struct pipeline-rasterization-state-create-info)))
  (p-multisample-state (:pointer
                        (:struct pipeline-multisample-state-create-info)))
  (p-depth-stencil-state (:pointer
                          (:struct pipeline-depth-stencil-state-create-info)))
  (p-color-blend-state (:pointer
                        (:struct pipeline-color-blend-state-create-info)))
  (p-dynamic-state (:pointer (:struct pipeline-dynamic-state-create-info)))
  (layout pipeline-layout)
  (render-pass render-pass)
  (subpass :uint32)
  (base-pipeline-handle pipeline)
  (base-pipeline-index :int32))

(defcstruct (pipeline-cache-create-info :class c-pipeline-cache-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags pipeline-cache-create-flags)
  (initial-data-size :size)
  (p-initial-data (:pointer :void)))

(defcstruct (pipeline-cache-header-version-one :class c-pipeline-cache-header-version-one)
  (header-size :uint32)
  (header-version pipeline-cache-header-version)
  (vendor-id :uint32)
  (device-id :uint32)
  (pipeline-cache-uuid :uint8 :count 16))

(defcstruct (push-constant-range :class c-push-constant-range)
  (stage-flags shader-stage-flags)
  (offset :uint32)
  (size :uint32))

(defcstruct (pipeline-layout-create-info :class c-pipeline-layout-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags pipeline-layout-create-flags)
  (set-layout-count :uint32)
  (p-set-layouts (:pointer descriptor-set-layout))
  (push-constant-range-count :uint32)
  (p-push-constant-ranges (:pointer (:struct push-constant-range))))

(defcstruct (sampler-create-info :class c-sampler-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags sampler-create-flags)
  (mag-filter filter)
  (min-filter filter)
  (mipmap-mode sampler-mipmap-mode)
  (address-mode-u sampler-address-mode)
  (address-mode-v sampler-address-mode)
  (address-mode-w sampler-address-mode)
  (mip-lod-bias :float)
  (anisotropy-enable bool32)
  (max-anisotropy :float)
  (compare-enable bool32)
  (compare-op compare-op)
  (min-lod :float)
  (max-lod :float)
  (border-color border-color)
  (unnormalized-coordinates bool32))

(defcstruct (command-pool-create-info :class c-command-pool-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags command-pool-create-flags)
  (queue-family-index :uint32))

(defcstruct (command-buffer-allocate-info :class c-command-buffer-allocate-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (command-pool command-pool)
  (level command-buffer-level)
  (command-buffer-count :uint32))

(defcstruct (command-buffer-inheritance-info :class c-command-buffer-inheritance-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (render-pass render-pass)
  (subpass :uint32)
  (framebuffer framebuffer)
  (occlusion-query-enable bool32)
  (query-flags query-control-flags)
  (pipeline-statistics query-pipeline-statistic-flags))

(defcstruct (command-buffer-begin-info :class c-command-buffer-begin-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags command-buffer-usage-flags)
  (p-inheritance-info (:pointer (:struct command-buffer-inheritance-info))))

(defcunion clear-color-value
  (float-32 :float :count 4)
  (int-32 :int32 :count 4)
  (uint-32 :uint32 :count 4))

(defcstruct (clear-depth-stencil-value :class c-clear-depth-stencil-value)
  (depth :float)
  (stencil :uint32))

(defcunion clear-value
  (color (:union clear-color-value))
  (depth-stencil (:struct clear-depth-stencil-value)))

(defcstruct (render-pass-begin-info :class c-render-pass-begin-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (render-pass render-pass)
  (framebuffer framebuffer)
  (render-area (:struct rect-2d))
  (clear-value-count :uint32)
  (p-clear-values (:pointer (:union clear-value))))

(defcstruct (clear-attachment :class c-clear-attachment)
  (aspect-mask image-aspect-flags)
  (color-attachment :uint32)
  (clear-value (:union clear-value)))

(defcstruct (attachment-description :class c-attachment-description)
  (flags attachment-description-flags)
  (format format)
  (samples sample-count-flag-bits)
  (load-op attachment-load-op)
  (store-op attachment-store-op)
  (stencil-load-op attachment-load-op)
  (stencil-store-op attachment-store-op)
  (initial-layout image-layout)
  (final-layout image-layout))

(defcstruct (attachment-reference :class c-attachment-reference)
  (attachment :uint32)
  (layout image-layout))

(defcstruct (subpass-description :class c-subpass-description)
  (flags subpass-description-flags)
  (pipeline-bind-point pipeline-bind-point)
  (input-attachment-count :uint32)
  (p-input-attachments (:pointer (:struct attachment-reference)))
  (color-attachment-count :uint32)
  (p-color-attachments (:pointer (:struct attachment-reference)))
  (p-resolve-attachments (:pointer (:struct attachment-reference)))
  (p-depth-stencil-attachment (:pointer (:struct attachment-reference)))
  (preserve-attachment-count :uint32)
  (p-preserve-attachments (:pointer :uint32)))

(defcstruct (subpass-dependency :class c-subpass-dependency)
  (src-subpass :uint32)
  (dst-subpass :uint32)
  (src-stage-mask pipeline-stage-flags)
  (dst-stage-mask pipeline-stage-flags)
  (src-access-mask access-flags)
  (dst-access-mask access-flags)
  (dependency-flags dependency-flags))

(defcstruct (render-pass-create-info :class c-render-pass-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags render-pass-create-flags)
  (attachment-count :uint32)
  (p-attachments (:pointer (:struct attachment-description)))
  (subpass-count :uint32)
  (p-subpasses (:pointer (:struct subpass-description)))
  (dependency-count :uint32)
  (p-dependencies (:pointer (:struct subpass-dependency))))

(defcstruct (event-create-info :class c-event-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags event-create-flags))

(defcstruct (fence-create-info :class c-fence-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags fence-create-flags))

(defcstruct (semaphore-create-info :class c-semaphore-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags semaphore-create-flags))

(defcstruct (query-pool-create-info :class c-query-pool-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags query-pool-create-flags)
  (query-type query-type)
  (query-count :uint32)
  (pipeline-statistics query-pipeline-statistic-flags))

(defcstruct (framebuffer-create-info :class c-framebuffer-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags framebuffer-create-flags)
  (render-pass render-pass)
  (attachment-count :uint32)
  (p-attachments (:pointer image-view))
  (width :uint32)
  (height :uint32)
  (layers :uint32))

(defcstruct (draw-indirect-command :class c-draw-indirect-command)
  (vertex-count :uint32)
  (instance-count :uint32)
  (first-vertex :uint32)
  (first-instance :uint32))

(defcstruct (draw-indexed-indirect-command :class c-draw-indexed-indirect-command)
  (index-count :uint32)
  (instance-count :uint32)
  (first-index :uint32)
  (vertex-offset :int32)
  (first-instance :uint32))

(defcstruct (dispatch-indirect-command :class c-dispatch-indirect-command)
  (x :uint32)
  (y :uint32)
  (z :uint32))

(defcstruct (multi-draw-info-ext :class c-multi-draw-info-ext)
  (first-vertex :uint32)
  (vertex-count :uint32))

(defcstruct (multi-draw-indexed-info-ext :class c-multi-draw-indexed-info-ext)
  (first-index :uint32)
  (index-count :uint32)
  (vertex-offset :int32))

(defcstruct (submit-info :class c-submit-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (wait-semaphore-count :uint32)
  (p-wait-semaphores (:pointer semaphore))
  (p-wait-dst-stage-mask (:pointer pipeline-stage-flags))
  (command-buffer-count :uint32)
  (p-command-buffers (:pointer command-buffer))
  (signal-semaphore-count :uint32)
  (p-signal-semaphores (:pointer semaphore)))

(defcstruct (display-properties-khr :class c-display-properties-khr)
  (display display-khr)
  (display-name :string)
  (physical-dimensions (:struct extent-2d))
  (physical-resolution (:struct extent-2d))
  (supported-transforms surface-transform-flags-khr)
  (plane-reorder-possible bool32)
  (persistent-content bool32))

(defcstruct (display-plane-properties-khr :class c-display-plane-properties-khr)
  (current-display display-khr)
  (current-stack-index :uint32))

(defcstruct (display-mode-parameters-khr :class c-display-mode-parameters-khr)
  (visible-region (:struct extent-2d))
  (refresh-rate :uint32))

(defcstruct (display-mode-properties-khr :class c-display-mode-properties-khr)
  (display-mode display-mode-khr)
  (parameters (:struct display-mode-parameters-khr)))

(defcstruct (display-mode-create-info-khr :class c-display-mode-create-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags display-mode-create-flags-khr)
  (parameters (:struct display-mode-parameters-khr)))

(defcstruct (display-plane-capabilities-khr :class c-display-plane-capabilities-khr)
  (supported-alpha display-plane-alpha-flags-khr)
  (min-src-position (:struct offset-2d))
  (max-src-position (:struct offset-2d))
  (min-src-extent (:struct extent-2d))
  (max-src-extent (:struct extent-2d))
  (min-dst-position (:struct offset-2d))
  (max-dst-position (:struct offset-2d))
  (min-dst-extent (:struct extent-2d))
  (max-dst-extent (:struct extent-2d)))

(defcstruct (display-surface-create-info-khr :class c-display-surface-create-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags display-surface-create-flags-khr)
  (display-mode display-mode-khr)
  (plane-index :uint32)
  (plane-stack-index :uint32)
  (transform surface-transform-flag-bits-khr)
  (global-alpha :float)
  (alpha-mode display-plane-alpha-flag-bits-khr)
  (image-extent (:struct extent-2d)))

(defcstruct (display-present-info-khr :class c-display-present-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (src-rect (:struct rect-2d))
  (dst-rect (:struct rect-2d))
  (persistent bool32))

(defcstruct (surface-capabilities-khr :class c-surface-capabilities-khr)
  (min-image-count :uint32)
  (max-image-count :uint32)
  (current-extent (:struct extent-2d))
  (min-image-extent (:struct extent-2d))
  (max-image-extent (:struct extent-2d))
  (max-image-array-layers :uint32)
  (supported-transforms surface-transform-flags-khr)
  (current-transform surface-transform-flag-bits-khr)
  (supported-composite-alpha composite-alpha-flags-khr)
  (supported-usage-flags image-usage-flags))

(defcstruct (android-surface-create-info-khr :class c-android-surface-create-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags android-surface-create-flags-khr)
  (window (:pointer a-native-window)))

(defcstruct (vi-surface-create-info-nn :class c-vi-surface-create-info-nn)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags vi-surface-create-flags-nn)
  (window (:pointer :void)))

(defcstruct (wayland-surface-create-info-khr :class c-wayland-surface-create-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags wayland-surface-create-flags-khr)
  (display (:pointer wl_display))
  (surface (:pointer wl_surface)))

(defcstruct (win32-surface-create-info-khr :class c-win32-surface-create-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags win32-surface-create-flags-khr)
  (hinstance hinstance)
  (hwnd hwnd))

(defcstruct (xlib-surface-create-info-khr :class c-xlib-surface-create-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags xlib-surface-create-flags-khr)
  (dpy (:pointer display))
  (window window))

(defcstruct (xcb-surface-create-info-khr :class c-xcb-surface-create-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags xcb-surface-create-flags-khr)
  (connection (:pointer xcb_connection_t))
  (window xcb_window_t))

(defcstruct (direct-fb-surface-create-info-ext :class c-direct-fb-surface-create-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags direct-fb-surface-create-flags-ext)
  (dfb (:pointer i-direct-fb))
  (surface (:pointer i-direct-fb-surface)))

(defcstruct (image-pipe-surface-create-info-fuchsia :class c-image-pipe-surface-create-info-fuchsia)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags image-pipe-surface-create-flags-fuchsia)
  (image-pipe-handle zx_handle_t))

(defcstruct (stream-descriptor-surface-create-info-ggp :class c-stream-descriptor-surface-create-info-ggp)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags stream-descriptor-surface-create-flags-ggp)
  (stream-descriptor ggp-stream-descriptor))

(defcstruct (screen-surface-create-info-qnx :class c-screen-surface-create-info-qnx)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags screen-surface-create-flags-qnx)
  (context (:pointer (:struct _screen_context)))
  (window (:pointer (:struct _screen_window))))

(defcstruct (surface-format-khr :class c-surface-format-khr)
  (format format)
  (color-space color-space-khr))

(defcstruct (swapchain-create-info-khr :class c-swapchain-create-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags swapchain-create-flags-khr)
  (surface surface-khr)
  (min-image-count :uint32)
  (image-format format)
  (image-color-space color-space-khr)
  (image-extent (:struct extent-2d))
  (image-array-layers :uint32)
  (image-usage image-usage-flags)
  (image-sharing-mode sharing-mode)
  (queue-family-index-count :uint32)
  (p-queue-family-indices (:pointer :uint32))
  (pre-transform surface-transform-flag-bits-khr)
  (composite-alpha composite-alpha-flag-bits-khr)
  (present-mode present-mode-khr)
  (clipped bool32)
  (old-swapchain swapchain-khr))

(defcstruct (present-info-khr :class c-present-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (wait-semaphore-count :uint32)
  (p-wait-semaphores (:pointer semaphore))
  (swapchain-count :uint32)
  (p-swapchains (:pointer swapchain-khr))
  (p-image-indices (:pointer :uint32))
  (p-results (:pointer result)))

(defcstruct (debug-report-callback-create-info-ext :class c-debug-report-callback-create-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags debug-report-flags-ext)
  (pfn-callback pfn-debug-report-callback-ext)
  (p-user-data (:pointer :void)))

(defcstruct (validation-flags-ext :class c-validation-flags-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (disabled-validation-check-count :uint32)
  (p-disabled-validation-checks (:pointer validation-check-ext)))

(defcstruct (validation-features-ext :class c-validation-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (enabled-validation-feature-count :uint32)
  (p-enabled-validation-features (:pointer validation-feature-enable-ext))
  (disabled-validation-feature-count :uint32)
  (p-disabled-validation-features (:pointer validation-feature-disable-ext)))

(defcstruct (pipeline-rasterization-state-rasterization-order-amd :class c-pipeline-rasterization-state-rasterization-order-amd)
  (s-type structure-type)
  (p-next (:pointer :void))
  (rasterization-order rasterization-order-amd))

(defcstruct (debug-marker-object-name-info-ext :class c-debug-marker-object-name-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (object-type debug-report-object-type-ext)
  (object :uint64)
  (p-object-name :string))

(defcstruct (debug-marker-object-tag-info-ext :class c-debug-marker-object-tag-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (object-type debug-report-object-type-ext)
  (object :uint64)
  (tag-name :uint64)
  (tag-size :size)
  (p-tag (:pointer :void)))

(defcstruct (debug-marker-marker-info-ext :class c-debug-marker-marker-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (p-marker-name :string)
  (color :float :count 4))

(defcstruct (dedicated-allocation-image-create-info-nv :class c-dedicated-allocation-image-create-info-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (dedicated-allocation bool32))

(defcstruct (dedicated-allocation-buffer-create-info-nv :class c-dedicated-allocation-buffer-create-info-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (dedicated-allocation bool32))

(defcstruct (dedicated-allocation-memory-allocate-info-nv :class c-dedicated-allocation-memory-allocate-info-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (image image)
  (buffer buffer))

(defcstruct (external-image-format-properties-nv :class c-external-image-format-properties-nv)
  (image-format-properties (:struct image-format-properties))
  (external-memory-features external-memory-feature-flags-nv)
  (export-from-imported-handle-types external-memory-handle-type-flags-nv)
  (compatible-handle-types external-memory-handle-type-flags-nv))

(defcstruct (external-memory-image-create-info-nv :class c-external-memory-image-create-info-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (handle-types external-memory-handle-type-flags-nv))

(defcstruct (export-memory-allocate-info-nv :class c-export-memory-allocate-info-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (handle-types external-memory-handle-type-flags-nv))

(defcstruct (import-memory-win32-handle-info-nv :class c-import-memory-win32-handle-info-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (handle-type external-memory-handle-type-flags-nv)
  (handle handle))

(defcstruct (export-memory-win32-handle-info-nv :class c-export-memory-win32-handle-info-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (p-attributes (:pointer (:struct security_attributes)))
  (dw-access dword))

(defcstruct (win32-keyed-mutex-acquire-release-info-nv :class c-win32-keyed-mutex-acquire-release-info-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (acquire-count :uint32)
  (p-acquire-syncs (:pointer device-memory))
  (p-acquire-keys (:pointer :uint64))
  (p-acquire-timeout-milliseconds (:pointer :uint32))
  (release-count :uint32)
  (p-release-syncs (:pointer device-memory))
  (p-release-keys (:pointer :uint64)))

(defcstruct (physical-device-device-generated-commands-features-nv :class c-physical-device-device-generated-commands-features-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (device-generated-commands bool32))

(defcstruct (device-private-data-create-info-ext :class c-device-private-data-create-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (private-data-slot-request-count :uint32))

(defcstruct (private-data-slot-create-info-ext :class c-private-data-slot-create-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags private-data-slot-create-flags-ext))

(defcstruct (physical-device-private-data-features-ext :class c-physical-device-private-data-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (private-data bool32))

(defcstruct (physical-device-device-generated-commands-properties-nv :class c-physical-device-device-generated-commands-properties-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (max-graphics-shader-group-count :uint32)
  (max-indirect-sequence-count :uint32)
  (max-indirect-commands-token-count :uint32)
  (max-indirect-commands-stream-count :uint32)
  (max-indirect-commands-token-offset :uint32)
  (max-indirect-commands-stream-stride :uint32)
  (min-sequences-count-buffer-offset-alignment :uint32)
  (min-sequences-index-buffer-offset-alignment :uint32)
  (min-indirect-commands-buffer-offset-alignment :uint32))

(defcstruct (physical-device-multi-draw-properties-ext :class c-physical-device-multi-draw-properties-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (max-multi-draw-count :uint32))

(defcstruct (graphics-shader-group-create-info-nv :class c-graphics-shader-group-create-info-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (stage-count :uint32)
  (p-stages (:pointer (:struct pipeline-shader-stage-create-info)))
  (p-vertex-input-state (:pointer
                         (:struct pipeline-vertex-input-state-create-info)))
  (p-tessellation-state (:pointer
                         (:struct pipeline-tessellation-state-create-info))))

(defcstruct (graphics-pipeline-shader-groups-create-info-nv :class c-graphics-pipeline-shader-groups-create-info-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (group-count :uint32)
  (p-groups (:pointer (:struct graphics-shader-group-create-info-nv)))
  (pipeline-count :uint32)
  (p-pipelines (:pointer pipeline)))

(defcstruct (bind-shader-group-indirect-command-nv :class c-bind-shader-group-indirect-command-nv)
  (group-index :uint32))

(defcstruct (bind-index-buffer-indirect-command-nv :class c-bind-index-buffer-indirect-command-nv)
  (buffer-address device-address)
  (size :uint32)
  (index-type index-type))

(defcstruct (bind-vertex-buffer-indirect-command-nv :class c-bind-vertex-buffer-indirect-command-nv)
  (buffer-address device-address)
  (size :uint32)
  (stride :uint32))

(defcstruct (set-state-flags-indirect-command-nv :class c-set-state-flags-indirect-command-nv)
  (data :uint32))

(defcstruct (indirect-commands-stream-nv :class c-indirect-commands-stream-nv)
  (buffer buffer)
  (offset device-size))

(defcstruct (indirect-commands-layout-token-nv :class c-indirect-commands-layout-token-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (token-type indirect-commands-token-type-nv)
  (stream :uint32)
  (offset :uint32)
  (vertex-binding-unit :uint32)
  (vertex-dynamic-stride bool32)
  (pushconstant-pipeline-layout pipeline-layout)
  (pushconstant-shader-stage-flags shader-stage-flags)
  (pushconstant-offset :uint32)
  (pushconstant-size :uint32)
  (indirect-state-flags indirect-state-flags-nv)
  (index-type-count :uint32)
  (p-index-types (:pointer index-type))
  (p-index-type-values (:pointer :uint32)))

(defcstruct (indirect-commands-layout-create-info-nv :class c-indirect-commands-layout-create-info-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags indirect-commands-layout-usage-flags-nv)
  (pipeline-bind-point pipeline-bind-point)
  (token-count :uint32)
  (p-tokens (:pointer (:struct indirect-commands-layout-token-nv)))
  (stream-count :uint32)
  (p-stream-strides (:pointer :uint32)))

(defcstruct (generated-commands-info-nv :class c-generated-commands-info-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (pipeline-bind-point pipeline-bind-point)
  (pipeline pipeline)
  (indirect-commands-layout indirect-commands-layout-nv)
  (stream-count :uint32)
  (p-streams (:pointer (:struct indirect-commands-stream-nv)))
  (sequences-count :uint32)
  (preprocess-buffer buffer)
  (preprocess-offset device-size)
  (preprocess-size device-size)
  (sequences-count-buffer buffer)
  (sequences-count-offset device-size)
  (sequences-index-buffer buffer)
  (sequences-index-offset device-size))

(defcstruct (generated-commands-memory-requirements-info-nv :class c-generated-commands-memory-requirements-info-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (pipeline-bind-point pipeline-bind-point)
  (pipeline pipeline)
  (indirect-commands-layout indirect-commands-layout-nv)
  (max-sequences-count :uint32))

(defcstruct (physical-device-features-2 :class c-physical-device-features-2)
  (s-type structure-type)
  (p-next (:pointer :void))
  (features (:struct physical-device-features)))

(defcstruct (physical-device-features-2-khr :class c-physical-device-features-2-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (features (:struct physical-device-features)))

(defcstruct (physical-device-properties-2 :class c-physical-device-properties-2)
  (s-type structure-type)
  (p-next (:pointer :void))
  (properties (:struct physical-device-properties)))

(defcstruct (physical-device-properties-2-khr :class c-physical-device-properties-2-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (properties (:struct physical-device-properties)))

(defcstruct (format-properties-2 :class c-format-properties-2)
  (s-type structure-type)
  (p-next (:pointer :void))
  (format-properties (:struct format-properties)))

(defcstruct (format-properties-2-khr :class c-format-properties-2-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (format-properties (:struct format-properties)))

(defcstruct (image-format-properties-2 :class c-image-format-properties-2)
  (s-type structure-type)
  (p-next (:pointer :void))
  (image-format-properties (:struct image-format-properties)))

(defcstruct (image-format-properties-2-khr :class c-image-format-properties-2-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (image-format-properties (:struct image-format-properties)))

(defcstruct (physical-device-image-format-info-2 :class c-physical-device-image-format-info-2)
  (s-type structure-type)
  (p-next (:pointer :void))
  (format format)
  (type image-type)
  (tiling image-tiling)
  (usage image-usage-flags)
  (flags image-create-flags))

(defcstruct (physical-device-image-format-info-2-khr :class c-physical-device-image-format-info-2-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (format format)
  (type image-type)
  (tiling image-tiling)
  (usage image-usage-flags)
  (flags image-create-flags))

(defcstruct (queue-family-properties-2 :class c-queue-family-properties-2)
  (s-type structure-type)
  (p-next (:pointer :void))
  (queue-family-properties (:struct queue-family-properties)))

(defcstruct (queue-family-properties-2-khr :class c-queue-family-properties-2-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (queue-family-properties (:struct queue-family-properties)))

(defcstruct (physical-device-memory-properties-2 :class c-physical-device-memory-properties-2)
  (s-type structure-type)
  (p-next (:pointer :void))
  (memory-properties (:struct physical-device-memory-properties)))

(defcstruct (physical-device-memory-properties-2-khr :class c-physical-device-memory-properties-2-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (memory-properties (:struct physical-device-memory-properties)))

(defcstruct (sparse-image-format-properties-2 :class c-sparse-image-format-properties-2)
  (s-type structure-type)
  (p-next (:pointer :void))
  (properties (:struct sparse-image-format-properties)))

(defcstruct (sparse-image-format-properties-2-khr :class c-sparse-image-format-properties-2-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (properties (:struct sparse-image-format-properties)))

(defcstruct (physical-device-sparse-image-format-info-2 :class c-physical-device-sparse-image-format-info-2)
  (s-type structure-type)
  (p-next (:pointer :void))
  (format format)
  (type image-type)
  (samples sample-count-flag-bits)
  (usage image-usage-flags)
  (tiling image-tiling))

(defcstruct (physical-device-sparse-image-format-info-2-khr :class c-physical-device-sparse-image-format-info-2-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (format format)
  (type image-type)
  (samples sample-count-flag-bits)
  (usage image-usage-flags)
  (tiling image-tiling))

(defcstruct (physical-device-push-descriptor-properties-khr :class c-physical-device-push-descriptor-properties-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (max-push-descriptors :uint32))

(defcstruct (conformance-version :class c-conformance-version)
  (major :uint8)
  (minor :uint8)
  (subminor :uint8)
  (patch :uint8))

(defcstruct (conformance-version-khr :class c-conformance-version-khr)
  (major :uint8)
  (minor :uint8)
  (subminor :uint8)
  (patch :uint8))

(defcstruct (physical-device-driver-properties :class c-physical-device-driver-properties)
  (s-type structure-type)
  (p-next (:pointer :void))
  (driver-id driver-id)
  (driver-name :char :count 256)
  (driver-info :char :count 256)
  (conformance-version (:struct conformance-version)))

(defcstruct (physical-device-driver-properties-khr :class c-physical-device-driver-properties-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (driver-id driver-id)
  (driver-name :char :count 256)
  (driver-info :char :count 256)
  (conformance-version (:struct conformance-version)))

(defcstruct (rect-layer-khr :class c-rect-layer-khr)
  (offset (:struct offset-2d))
  (extent (:struct extent-2d))
  (layer :uint32))

(defcstruct (present-region-khr :class c-present-region-khr)
  (rectangle-count :uint32)
  (p-rectangles (:pointer (:struct rect-layer-khr))))

(defcstruct (present-regions-khr :class c-present-regions-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (swapchain-count :uint32)
  (p-regions (:pointer (:struct present-region-khr))))

(defcstruct (physical-device-variable-pointers-features :class c-physical-device-variable-pointers-features)
  (s-type structure-type)
  (p-next (:pointer :void))
  (variable-pointers-storage-buffer bool32)
  (variable-pointers bool32))

(defcstruct (physical-device-variable-pointer-features :class c-physical-device-variable-pointer-features)
  (s-type structure-type)
  (p-next (:pointer :void))
  (variable-pointers-storage-buffer bool32)
  (variable-pointers bool32))

(defcstruct (physical-device-variable-pointer-features-khr :class c-physical-device-variable-pointer-features-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (variable-pointers-storage-buffer bool32)
  (variable-pointers bool32))

(defcstruct (physical-device-variable-pointers-features-khr :class c-physical-device-variable-pointers-features-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (variable-pointers-storage-buffer bool32)
  (variable-pointers bool32))

(defcstruct (external-memory-properties :class c-external-memory-properties)
  (external-memory-features external-memory-feature-flags)
  (export-from-imported-handle-types external-memory-handle-type-flags)
  (compatible-handle-types external-memory-handle-type-flags))

(defcstruct (external-memory-properties-khr :class c-external-memory-properties-khr)
  (external-memory-features external-memory-feature-flags)
  (export-from-imported-handle-types external-memory-handle-type-flags)
  (compatible-handle-types external-memory-handle-type-flags))

(defcstruct (physical-device-external-image-format-info :class c-physical-device-external-image-format-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (handle-type external-memory-handle-type-flag-bits))

(defcstruct (physical-device-external-image-format-info-khr :class c-physical-device-external-image-format-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (handle-type external-memory-handle-type-flag-bits))

(defcstruct (external-image-format-properties :class c-external-image-format-properties)
  (s-type structure-type)
  (p-next (:pointer :void))
  (external-memory-properties (:struct external-memory-properties)))

(defcstruct (external-image-format-properties-khr :class c-external-image-format-properties-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (external-memory-properties (:struct external-memory-properties)))

(defcstruct (physical-device-external-buffer-info :class c-physical-device-external-buffer-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags buffer-create-flags)
  (usage buffer-usage-flags)
  (handle-type external-memory-handle-type-flag-bits))

(defcstruct (physical-device-external-buffer-info-khr :class c-physical-device-external-buffer-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags buffer-create-flags)
  (usage buffer-usage-flags)
  (handle-type external-memory-handle-type-flag-bits))

(defcstruct (external-buffer-properties :class c-external-buffer-properties)
  (s-type structure-type)
  (p-next (:pointer :void))
  (external-memory-properties (:struct external-memory-properties)))

(defcstruct (external-buffer-properties-khr :class c-external-buffer-properties-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (external-memory-properties (:struct external-memory-properties)))

(defcstruct (physical-device-id-properties :class c-physical-device-id-properties)
  (s-type structure-type)
  (p-next (:pointer :void))
  (device-uuid :uint8 :count 16)
  (driver-uuid :uint8 :count 16)
  (device-luid :uint8 :count 8)
  (device-node-mask :uint32)
  (device-luid-valid bool32))

(defcstruct (physical-device-id-properties-khr :class c-physical-device-id-properties-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (device-uuid :uint8 :count 16)
  (driver-uuid :uint8 :count 16)
  (device-luid :uint8 :count 8)
  (device-node-mask :uint32)
  (device-luid-valid bool32))

(defcstruct (external-memory-image-create-info :class c-external-memory-image-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (handle-types external-memory-handle-type-flags))

(defcstruct (external-memory-image-create-info-khr :class c-external-memory-image-create-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (handle-types external-memory-handle-type-flags))

(defcstruct (external-memory-buffer-create-info :class c-external-memory-buffer-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (handle-types external-memory-handle-type-flags))

(defcstruct (external-memory-buffer-create-info-khr :class c-external-memory-buffer-create-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (handle-types external-memory-handle-type-flags))

(defcstruct (export-memory-allocate-info :class c-export-memory-allocate-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (handle-types external-memory-handle-type-flags))

(defcstruct (export-memory-allocate-info-khr :class c-export-memory-allocate-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (handle-types external-memory-handle-type-flags))

(defcstruct (import-memory-win32-handle-info-khr :class c-import-memory-win32-handle-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (handle-type external-memory-handle-type-flag-bits)
  (handle handle)
  (name lpcwstr))

(defcstruct (export-memory-win32-handle-info-khr :class c-export-memory-win32-handle-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (p-attributes (:pointer (:struct security_attributes)))
  (dw-access dword)
  (name lpcwstr))

(defcstruct (import-memory-zircon-handle-info-fuchsia :class c-import-memory-zircon-handle-info-fuchsia)
  (s-type structure-type)
  (p-next (:pointer :void))
  (handle-type external-memory-handle-type-flag-bits)
  (handle zx_handle_t))

(defcstruct (memory-zircon-handle-properties-fuchsia :class c-memory-zircon-handle-properties-fuchsia)
  (s-type structure-type)
  (p-next (:pointer :void))
  (memory-type-bits :uint32))

(defcstruct (memory-get-zircon-handle-info-fuchsia :class c-memory-get-zircon-handle-info-fuchsia)
  (s-type structure-type)
  (p-next (:pointer :void))
  (memory device-memory)
  (handle-type external-memory-handle-type-flag-bits))

(defcstruct (memory-win32-handle-properties-khr :class c-memory-win32-handle-properties-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (memory-type-bits :uint32))

(defcstruct (memory-get-win32-handle-info-khr :class c-memory-get-win32-handle-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (memory device-memory)
  (handle-type external-memory-handle-type-flag-bits))

(defcstruct (import-memory-fd-info-khr :class c-import-memory-fd-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (handle-type external-memory-handle-type-flag-bits)
  (fd :int))

(defcstruct (memory-fd-properties-khr :class c-memory-fd-properties-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (memory-type-bits :uint32))

(defcstruct (memory-get-fd-info-khr :class c-memory-get-fd-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (memory device-memory)
  (handle-type external-memory-handle-type-flag-bits))

(defcstruct (win32-keyed-mutex-acquire-release-info-khr :class c-win32-keyed-mutex-acquire-release-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (acquire-count :uint32)
  (p-acquire-syncs (:pointer device-memory))
  (p-acquire-keys (:pointer :uint64))
  (p-acquire-timeouts (:pointer :uint32))
  (release-count :uint32)
  (p-release-syncs (:pointer device-memory))
  (p-release-keys (:pointer :uint64)))

(defcstruct (physical-device-external-semaphore-info :class c-physical-device-external-semaphore-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (handle-type external-semaphore-handle-type-flag-bits))

(defcstruct (physical-device-external-semaphore-info-khr :class c-physical-device-external-semaphore-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (handle-type external-semaphore-handle-type-flag-bits))

(defcstruct (external-semaphore-properties :class c-external-semaphore-properties)
  (s-type structure-type)
  (p-next (:pointer :void))
  (export-from-imported-handle-types external-semaphore-handle-type-flags)
  (compatible-handle-types external-semaphore-handle-type-flags)
  (external-semaphore-features external-semaphore-feature-flags))

(defcstruct (external-semaphore-properties-khr :class c-external-semaphore-properties-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (export-from-imported-handle-types external-semaphore-handle-type-flags)
  (compatible-handle-types external-semaphore-handle-type-flags)
  (external-semaphore-features external-semaphore-feature-flags))

(defcstruct (export-semaphore-create-info :class c-export-semaphore-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (handle-types external-semaphore-handle-type-flags))

(defcstruct (export-semaphore-create-info-khr :class c-export-semaphore-create-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (handle-types external-semaphore-handle-type-flags))

(defcstruct (import-semaphore-win32-handle-info-khr :class c-import-semaphore-win32-handle-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (semaphore semaphore)
  (flags semaphore-import-flags)
  (handle-type external-semaphore-handle-type-flag-bits)
  (handle handle)
  (name lpcwstr))

(defcstruct (export-semaphore-win32-handle-info-khr :class c-export-semaphore-win32-handle-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (p-attributes (:pointer (:struct security_attributes)))
  (dw-access dword)
  (name lpcwstr))

(defcstruct (d-3d-1-2-fence-submit-info-khr :class c-d-3d-1-2-fence-submit-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (wait-semaphore-values-count :uint32)
  (p-wait-semaphore-values (:pointer :uint64))
  (signal-semaphore-values-count :uint32)
  (p-signal-semaphore-values (:pointer :uint64)))

(defcstruct (semaphore-get-win32-handle-info-khr :class c-semaphore-get-win32-handle-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (semaphore semaphore)
  (handle-type external-semaphore-handle-type-flag-bits))

(defcstruct (import-semaphore-fd-info-khr :class c-import-semaphore-fd-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (semaphore semaphore)
  (flags semaphore-import-flags)
  (handle-type external-semaphore-handle-type-flag-bits)
  (fd :int))

(defcstruct (semaphore-get-fd-info-khr :class c-semaphore-get-fd-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (semaphore semaphore)
  (handle-type external-semaphore-handle-type-flag-bits))

(defcstruct (import-semaphore-zircon-handle-info-fuchsia :class c-import-semaphore-zircon-handle-info-fuchsia)
  (s-type structure-type)
  (p-next (:pointer :void))
  (semaphore semaphore)
  (flags semaphore-import-flags)
  (handle-type external-semaphore-handle-type-flag-bits)
  (zircon-handle zx_handle_t))

(defcstruct (semaphore-get-zircon-handle-info-fuchsia :class c-semaphore-get-zircon-handle-info-fuchsia)
  (s-type structure-type)
  (p-next (:pointer :void))
  (semaphore semaphore)
  (handle-type external-semaphore-handle-type-flag-bits))

(defcstruct (physical-device-external-fence-info :class c-physical-device-external-fence-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (handle-type external-fence-handle-type-flag-bits))

(defcstruct (physical-device-external-fence-info-khr :class c-physical-device-external-fence-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (handle-type external-fence-handle-type-flag-bits))

(defcstruct (external-fence-properties :class c-external-fence-properties)
  (s-type structure-type)
  (p-next (:pointer :void))
  (export-from-imported-handle-types external-fence-handle-type-flags)
  (compatible-handle-types external-fence-handle-type-flags)
  (external-fence-features external-fence-feature-flags))

(defcstruct (external-fence-properties-khr :class c-external-fence-properties-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (export-from-imported-handle-types external-fence-handle-type-flags)
  (compatible-handle-types external-fence-handle-type-flags)
  (external-fence-features external-fence-feature-flags))

(defcstruct (export-fence-create-info :class c-export-fence-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (handle-types external-fence-handle-type-flags))

(defcstruct (export-fence-create-info-khr :class c-export-fence-create-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (handle-types external-fence-handle-type-flags))

(defcstruct (import-fence-win32-handle-info-khr :class c-import-fence-win32-handle-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (fence fence)
  (flags fence-import-flags)
  (handle-type external-fence-handle-type-flag-bits)
  (handle handle)
  (name lpcwstr))

(defcstruct (export-fence-win32-handle-info-khr :class c-export-fence-win32-handle-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (p-attributes (:pointer (:struct security_attributes)))
  (dw-access dword)
  (name lpcwstr))

(defcstruct (fence-get-win32-handle-info-khr :class c-fence-get-win32-handle-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (fence fence)
  (handle-type external-fence-handle-type-flag-bits))

(defcstruct (import-fence-fd-info-khr :class c-import-fence-fd-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (fence fence)
  (flags fence-import-flags)
  (handle-type external-fence-handle-type-flag-bits)
  (fd :int))

(defcstruct (fence-get-fd-info-khr :class c-fence-get-fd-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (fence fence)
  (handle-type external-fence-handle-type-flag-bits))

(defcstruct (physical-device-multiview-features :class c-physical-device-multiview-features)
  (s-type structure-type)
  (p-next (:pointer :void))
  (multiview bool32)
  (multiview-geometry-shader bool32)
  (multiview-tessellation-shader bool32))

(defcstruct (physical-device-multiview-features-khr :class c-physical-device-multiview-features-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (multiview bool32)
  (multiview-geometry-shader bool32)
  (multiview-tessellation-shader bool32))

(defcstruct (physical-device-multiview-properties :class c-physical-device-multiview-properties)
  (s-type structure-type)
  (p-next (:pointer :void))
  (max-multiview-view-count :uint32)
  (max-multiview-instance-index :uint32))

(defcstruct (physical-device-multiview-properties-khr :class c-physical-device-multiview-properties-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (max-multiview-view-count :uint32)
  (max-multiview-instance-index :uint32))

(defcstruct (render-pass-multiview-create-info :class c-render-pass-multiview-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (subpass-count :uint32)
  (p-view-masks (:pointer :uint32))
  (dependency-count :uint32)
  (p-view-offsets (:pointer :int32))
  (correlation-mask-count :uint32)
  (p-correlation-masks (:pointer :uint32)))

(defcstruct (render-pass-multiview-create-info-khr :class c-render-pass-multiview-create-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (subpass-count :uint32)
  (p-view-masks (:pointer :uint32))
  (dependency-count :uint32)
  (p-view-offsets (:pointer :int32))
  (correlation-mask-count :uint32)
  (p-correlation-masks (:pointer :uint32)))

(defcstruct (surface-capabilities-2-ext :class c-surface-capabilities-2-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (min-image-count :uint32)
  (max-image-count :uint32)
  (current-extent (:struct extent-2d))
  (min-image-extent (:struct extent-2d))
  (max-image-extent (:struct extent-2d))
  (max-image-array-layers :uint32)
  (supported-transforms surface-transform-flags-khr)
  (current-transform surface-transform-flag-bits-khr)
  (supported-composite-alpha composite-alpha-flags-khr)
  (supported-usage-flags image-usage-flags)
  (supported-surface-counters surface-counter-flags-ext))

(defcstruct (display-power-info-ext :class c-display-power-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (power-state display-power-state-ext))

(defcstruct (device-event-info-ext :class c-device-event-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (device-event device-event-type-ext))

(defcstruct (display-event-info-ext :class c-display-event-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (display-event display-event-type-ext))

(defcstruct (swapchain-counter-create-info-ext :class c-swapchain-counter-create-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (surface-counters surface-counter-flags-ext))

(defcstruct (physical-device-group-properties :class c-physical-device-group-properties)
  (s-type structure-type)
  (p-next (:pointer :void))
  (physical-device-count :uint32)
  (physical-devices physical-device :count 32)
  (subset-allocation bool32))

(defcstruct (physical-device-group-properties-khr :class c-physical-device-group-properties-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (physical-device-count :uint32)
  (physical-devices physical-device :count 32)
  (subset-allocation bool32))

(defcstruct (memory-allocate-flags-info :class c-memory-allocate-flags-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags memory-allocate-flags)
  (device-mask :uint32))

(defcstruct (memory-allocate-flags-info-khr :class c-memory-allocate-flags-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags memory-allocate-flags)
  (device-mask :uint32))

(defcstruct (bind-buffer-memory-info :class c-bind-buffer-memory-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (buffer buffer)
  (memory device-memory)
  (memory-offset device-size))

(defcstruct (bind-buffer-memory-info-khr :class c-bind-buffer-memory-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (buffer buffer)
  (memory device-memory)
  (memory-offset device-size))

(defcstruct (bind-buffer-memory-device-group-info :class c-bind-buffer-memory-device-group-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (device-index-count :uint32)
  (p-device-indices (:pointer :uint32)))

(defcstruct (bind-buffer-memory-device-group-info-khr :class c-bind-buffer-memory-device-group-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (device-index-count :uint32)
  (p-device-indices (:pointer :uint32)))

(defcstruct (bind-image-memory-info :class c-bind-image-memory-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (image image)
  (memory device-memory)
  (memory-offset device-size))

(defcstruct (bind-image-memory-info-khr :class c-bind-image-memory-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (image image)
  (memory device-memory)
  (memory-offset device-size))

(defcstruct (bind-image-memory-device-group-info :class c-bind-image-memory-device-group-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (device-index-count :uint32)
  (p-device-indices (:pointer :uint32))
  (split-instance-bind-region-count :uint32)
  (p-split-instance-bind-regions (:pointer (:struct rect-2d))))

(defcstruct (bind-image-memory-device-group-info-khr :class c-bind-image-memory-device-group-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (device-index-count :uint32)
  (p-device-indices (:pointer :uint32))
  (split-instance-bind-region-count :uint32)
  (p-split-instance-bind-regions (:pointer (:struct rect-2d))))

(defcstruct (device-group-render-pass-begin-info :class c-device-group-render-pass-begin-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (device-mask :uint32)
  (device-render-area-count :uint32)
  (p-device-render-areas (:pointer (:struct rect-2d))))

(defcstruct (device-group-render-pass-begin-info-khr :class c-device-group-render-pass-begin-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (device-mask :uint32)
  (device-render-area-count :uint32)
  (p-device-render-areas (:pointer (:struct rect-2d))))

(defcstruct (device-group-command-buffer-begin-info :class c-device-group-command-buffer-begin-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (device-mask :uint32))

(defcstruct (device-group-command-buffer-begin-info-khr :class c-device-group-command-buffer-begin-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (device-mask :uint32))

(defcstruct (device-group-submit-info :class c-device-group-submit-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (wait-semaphore-count :uint32)
  (p-wait-semaphore-device-indices (:pointer :uint32))
  (command-buffer-count :uint32)
  (p-command-buffer-device-masks (:pointer :uint32))
  (signal-semaphore-count :uint32)
  (p-signal-semaphore-device-indices (:pointer :uint32)))

(defcstruct (device-group-submit-info-khr :class c-device-group-submit-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (wait-semaphore-count :uint32)
  (p-wait-semaphore-device-indices (:pointer :uint32))
  (command-buffer-count :uint32)
  (p-command-buffer-device-masks (:pointer :uint32))
  (signal-semaphore-count :uint32)
  (p-signal-semaphore-device-indices (:pointer :uint32)))

(defcstruct (device-group-bind-sparse-info :class c-device-group-bind-sparse-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (resource-device-index :uint32)
  (memory-device-index :uint32))

(defcstruct (device-group-bind-sparse-info-khr :class c-device-group-bind-sparse-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (resource-device-index :uint32)
  (memory-device-index :uint32))

(defcstruct (device-group-present-capabilities-khr :class c-device-group-present-capabilities-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (present-mask :uint32 :count 32)
  (modes device-group-present-mode-flags-khr))

(defcstruct (image-swapchain-create-info-khr :class c-image-swapchain-create-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (swapchain swapchain-khr))

(defcstruct (bind-image-memory-swapchain-info-khr :class c-bind-image-memory-swapchain-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (swapchain swapchain-khr)
  (image-index :uint32))

(defcstruct (acquire-next-image-info-khr :class c-acquire-next-image-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (swapchain swapchain-khr)
  (timeout :uint64)
  (semaphore semaphore)
  (fence fence)
  (device-mask :uint32))

(defcstruct (device-group-present-info-khr :class c-device-group-present-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (swapchain-count :uint32)
  (p-device-masks (:pointer :uint32))
  (mode device-group-present-mode-flag-bits-khr))

(defcstruct (device-group-device-create-info :class c-device-group-device-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (physical-device-count :uint32)
  (p-physical-devices (:pointer physical-device)))

(defcstruct (device-group-device-create-info-khr :class c-device-group-device-create-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (physical-device-count :uint32)
  (p-physical-devices (:pointer physical-device)))

(defcstruct (device-group-swapchain-create-info-khr :class c-device-group-swapchain-create-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (modes device-group-present-mode-flags-khr))

(defcstruct (descriptor-update-template-entry :class c-descriptor-update-template-entry)
  (dst-binding :uint32)
  (dst-array-element :uint32)
  (descriptor-count :uint32)
  (descriptor-type descriptor-type)
  (offset :size)
  (stride :size))

(defcstruct (descriptor-update-template-entry-khr :class c-descriptor-update-template-entry-khr)
  (dst-binding :uint32)
  (dst-array-element :uint32)
  (descriptor-count :uint32)
  (descriptor-type descriptor-type)
  (offset :size)
  (stride :size))

(defcstruct (descriptor-update-template-create-info :class c-descriptor-update-template-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags descriptor-update-template-create-flags)
  (descriptor-update-entry-count :uint32)
  (p-descriptor-update-entries (:pointer
                                (:struct descriptor-update-template-entry)))
  (template-type descriptor-update-template-type)
  (descriptor-set-layout descriptor-set-layout)
  (pipeline-bind-point pipeline-bind-point)
  (pipeline-layout pipeline-layout)
  (set :uint32))

(defcstruct (descriptor-update-template-create-info-khr :class c-descriptor-update-template-create-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags descriptor-update-template-create-flags)
  (descriptor-update-entry-count :uint32)
  (p-descriptor-update-entries (:pointer
                                (:struct descriptor-update-template-entry)))
  (template-type descriptor-update-template-type)
  (descriptor-set-layout descriptor-set-layout)
  (pipeline-bind-point pipeline-bind-point)
  (pipeline-layout pipeline-layout)
  (set :uint32))

(defcstruct (x-y-color-ext :class c-x-y-color-ext)
  (x :float)
  (y :float))

(defcstruct (physical-device-present-id-features-khr :class c-physical-device-present-id-features-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (present-id bool32))

(defcstruct (present-id-khr :class c-present-id-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (swapchain-count :uint32)
  (p-present-ids (:pointer :uint64)))

(defcstruct (physical-device-present-wait-features-khr :class c-physical-device-present-wait-features-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (present-wait bool32))

(defcstruct (hdr-metadata-ext :class c-hdr-metadata-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (display-primary-red (:struct x-y-color-ext))
  (display-primary-green (:struct x-y-color-ext))
  (display-primary-blue (:struct x-y-color-ext))
  (white-point (:struct x-y-color-ext))
  (max-luminance :float)
  (min-luminance :float)
  (max-content-light-level :float)
  (max-frame-average-light-level :float))

(defcstruct (display-native-hdr-surface-capabilities-amd :class c-display-native-hdr-surface-capabilities-amd)
  (s-type structure-type)
  (p-next (:pointer :void))
  (local-dimming-support bool32))

(defcstruct (swapchain-display-native-hdr-create-info-amd :class c-swapchain-display-native-hdr-create-info-amd)
  (s-type structure-type)
  (p-next (:pointer :void))
  (local-dimming-enable bool32))

(defcstruct (refresh-cycle-duration-google :class c-refresh-cycle-duration-google)
  (refresh-duration :uint64))

(defcstruct (past-presentation-timing-google :class c-past-presentation-timing-google)
  (present-id :uint32)
  (desired-present-time :uint64)
  (actual-present-time :uint64)
  (earliest-present-time :uint64)
  (present-margin :uint64))

(defcstruct (present-time-google :class c-present-time-google)
  (present-id :uint32)
  (desired-present-time :uint64))

(defcstruct (present-times-info-google :class c-present-times-info-google)
  (s-type structure-type)
  (p-next (:pointer :void))
  (swapchain-count :uint32)
  (p-times (:pointer (:struct present-time-google))))

(defcstruct (ios-surface-create-info-mvk :class c-ios-surface-create-info-mvk)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags ios-surface-create-flags-mvk)
  (p-view (:pointer :void)))

(defcstruct (mac-os-surface-create-info-mvk :class c-mac-os-surface-create-info-mvk)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags mac-os-surface-create-flags-mvk)
  (p-view (:pointer :void)))

(defcstruct (metal-surface-create-info-ext :class c-metal-surface-create-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags metal-surface-create-flags-ext)
  (p-layer (:pointer ca-metal-layer)))

(defcstruct (viewport-w-scaling-nv :class c-viewport-w-scaling-nv)
  (xcoeff :float)
  (ycoeff :float))

(defcstruct (pipeline-viewport-w-scaling-state-create-info-nv :class c-pipeline-viewport-w-scaling-state-create-info-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (viewport-w-scaling-enable bool32)
  (viewport-count :uint32)
  (p-viewport-w-scalings (:pointer (:struct viewport-w-scaling-nv))))

(defcstruct (viewport-swizzle-nv :class c-viewport-swizzle-nv)
  (x viewport-coordinate-swizzle-nv)
  (y viewport-coordinate-swizzle-nv)
  (z viewport-coordinate-swizzle-nv)
  (w viewport-coordinate-swizzle-nv))

(defcstruct (pipeline-viewport-swizzle-state-create-info-nv :class c-pipeline-viewport-swizzle-state-create-info-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags pipeline-viewport-swizzle-state-create-flags-nv)
  (viewport-count :uint32)
  (p-viewport-swizzles (:pointer (:struct viewport-swizzle-nv))))

(defcstruct (physical-device-discard-rectangle-properties-ext :class c-physical-device-discard-rectangle-properties-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (max-discard-rectangles :uint32))

(defcstruct (pipeline-discard-rectangle-state-create-info-ext :class c-pipeline-discard-rectangle-state-create-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags pipeline-discard-rectangle-state-create-flags-ext)
  (discard-rectangle-mode discard-rectangle-mode-ext)
  (discard-rectangle-count :uint32)
  (p-discard-rectangles (:pointer (:struct rect-2d))))

(defcstruct (physical-device-multiview-per-view-attributes-properties-nvx :class c-physical-device-multiview-per-view-attributes-properties-nvx)
  (s-type structure-type)
  (p-next (:pointer :void))
  (per-view-position-all-components bool32))

(defcstruct (input-attachment-aspect-reference :class c-input-attachment-aspect-reference)
  (subpass :uint32)
  (input-attachment-index :uint32)
  (aspect-mask image-aspect-flags))

(defcstruct (input-attachment-aspect-reference-khr :class c-input-attachment-aspect-reference-khr)
  (subpass :uint32)
  (input-attachment-index :uint32)
  (aspect-mask image-aspect-flags))

(defcstruct (render-pass-input-attachment-aspect-create-info :class c-render-pass-input-attachment-aspect-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (aspect-reference-count :uint32)
  (p-aspect-references (:pointer (:struct input-attachment-aspect-reference))))

(defcstruct (render-pass-input-attachment-aspect-create-info-khr :class c-render-pass-input-attachment-aspect-create-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (aspect-reference-count :uint32)
  (p-aspect-references (:pointer (:struct input-attachment-aspect-reference))))

(defcstruct (physical-device-surface-info-2-khr :class c-physical-device-surface-info-2-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (surface surface-khr))

(defcstruct (surface-capabilities-2-khr :class c-surface-capabilities-2-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (surface-capabilities (:struct surface-capabilities-khr)))

(defcstruct (surface-format-2-khr :class c-surface-format-2-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (surface-format (:struct surface-format-khr)))

(defcstruct (display-properties-2-khr :class c-display-properties-2-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (display-properties (:struct display-properties-khr)))

(defcstruct (display-plane-properties-2-khr :class c-display-plane-properties-2-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (display-plane-properties (:struct display-plane-properties-khr)))

(defcstruct (display-mode-properties-2-khr :class c-display-mode-properties-2-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (display-mode-properties (:struct display-mode-properties-khr)))

(defcstruct (display-plane-info-2-khr :class c-display-plane-info-2-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (mode display-mode-khr)
  (plane-index :uint32))

(defcstruct (display-plane-capabilities-2-khr :class c-display-plane-capabilities-2-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (capabilities (:struct display-plane-capabilities-khr)))

(defcstruct (shared-present-surface-capabilities-khr :class c-shared-present-surface-capabilities-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (shared-present-supported-usage-flags image-usage-flags))

(defcstruct (physical-device-16-bit-storage-features :class c-physical-device-16-bit-storage-features)
  (s-type structure-type)
  (p-next (:pointer :void))
  (storage-buffer-16-bit-access bool32)
  (uniform-and-storage-buffer-16-bit-access bool32)
  (storage-push-constant-16 bool32)
  (storage-input-output-16 bool32))

(defcstruct (physical-device-16-bit-storage-features-khr :class c-physical-device-16-bit-storage-features-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (storage-buffer-16-bit-access bool32)
  (uniform-and-storage-buffer-16-bit-access bool32)
  (storage-push-constant-16 bool32)
  (storage-input-output-16 bool32))

(defcstruct (physical-device-subgroup-properties :class c-physical-device-subgroup-properties)
  (s-type structure-type)
  (p-next (:pointer :void))
  (subgroup-size :uint32)
  (supported-stages shader-stage-flags)
  (supported-operations subgroup-feature-flags)
  (quad-operations-in-all-stages bool32))

(defcstruct (physical-device-shader-subgroup-extended-types-features :class c-physical-device-shader-subgroup-extended-types-features)
  (s-type structure-type)
  (p-next (:pointer :void))
  (shader-subgroup-extended-types bool32))

(defcstruct (physical-device-shader-subgroup-extended-types-features-khr :class c-physical-device-shader-subgroup-extended-types-features-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (shader-subgroup-extended-types bool32))

(defcstruct (buffer-memory-requirements-info-2 :class c-buffer-memory-requirements-info-2)
  (s-type structure-type)
  (p-next (:pointer :void))
  (buffer buffer))

(defcstruct (buffer-memory-requirements-info-2-khr :class c-buffer-memory-requirements-info-2-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (buffer buffer))

(defcstruct (device-buffer-memory-requirements-khr :class c-device-buffer-memory-requirements-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (p-create-info (:pointer (:struct buffer-create-info))))

(defcstruct (image-memory-requirements-info-2 :class c-image-memory-requirements-info-2)
  (s-type structure-type)
  (p-next (:pointer :void))
  (image image))

(defcstruct (image-memory-requirements-info-2-khr :class c-image-memory-requirements-info-2-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (image image))

(defcstruct (image-sparse-memory-requirements-info-2 :class c-image-sparse-memory-requirements-info-2)
  (s-type structure-type)
  (p-next (:pointer :void))
  (image image))

(defcstruct (image-sparse-memory-requirements-info-2-khr :class c-image-sparse-memory-requirements-info-2-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (image image))

(defcstruct (device-image-memory-requirements-khr :class c-device-image-memory-requirements-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (p-create-info (:pointer (:struct image-create-info)))
  (plane-aspect image-aspect-flag-bits))

(defcstruct (memory-requirements-2 :class c-memory-requirements-2)
  (s-type structure-type)
  (p-next (:pointer :void))
  (memory-requirements (:struct memory-requirements)))

(defcstruct (memory-requirements-2-khr :class c-memory-requirements-2-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (memory-requirements (:struct memory-requirements)))

(defcstruct (sparse-image-memory-requirements-2 :class c-sparse-image-memory-requirements-2)
  (s-type structure-type)
  (p-next (:pointer :void))
  (memory-requirements (:struct sparse-image-memory-requirements)))

(defcstruct (sparse-image-memory-requirements-2-khr :class c-sparse-image-memory-requirements-2-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (memory-requirements (:struct sparse-image-memory-requirements)))

(defcstruct (physical-device-point-clipping-properties :class c-physical-device-point-clipping-properties)
  (s-type structure-type)
  (p-next (:pointer :void))
  (point-clipping-behavior point-clipping-behavior))

(defcstruct (physical-device-point-clipping-properties-khr :class c-physical-device-point-clipping-properties-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (point-clipping-behavior point-clipping-behavior))

(defcstruct (memory-dedicated-requirements :class c-memory-dedicated-requirements)
  (s-type structure-type)
  (p-next (:pointer :void))
  (prefers-dedicated-allocation bool32)
  (requires-dedicated-allocation bool32))

(defcstruct (memory-dedicated-requirements-khr :class c-memory-dedicated-requirements-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (prefers-dedicated-allocation bool32)
  (requires-dedicated-allocation bool32))

(defcstruct (memory-dedicated-allocate-info :class c-memory-dedicated-allocate-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (image image)
  (buffer buffer))

(defcstruct (memory-dedicated-allocate-info-khr :class c-memory-dedicated-allocate-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (image image)
  (buffer buffer))

(defcstruct (image-view-usage-create-info :class c-image-view-usage-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (usage image-usage-flags))

(defcstruct (image-view-usage-create-info-khr :class c-image-view-usage-create-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (usage image-usage-flags))

(defcstruct (pipeline-tessellation-domain-origin-state-create-info :class c-pipeline-tessellation-domain-origin-state-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (domain-origin tessellation-domain-origin))

(defcstruct (pipeline-tessellation-domain-origin-state-create-info-khr :class c-pipeline-tessellation-domain-origin-state-create-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (domain-origin tessellation-domain-origin))

(defcstruct (sampler-ycbcr-conversion-info :class c-sampler-ycbcr-conversion-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (conversion sampler-ycbcr-conversion))

(defcstruct (sampler-ycbcr-conversion-info-khr :class c-sampler-ycbcr-conversion-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (conversion sampler-ycbcr-conversion))

(defcstruct (sampler-ycbcr-conversion-create-info :class c-sampler-ycbcr-conversion-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (format format)
  (ycbcr-model sampler-ycbcr-model-conversion)
  (ycbcr-range sampler-ycbcr-range)
  (components (:struct component-mapping))
  (x-chroma-offset chroma-location)
  (y-chroma-offset chroma-location)
  (chroma-filter filter)
  (force-explicit-reconstruction bool32))

(defcstruct (sampler-ycbcr-conversion-create-info-khr :class c-sampler-ycbcr-conversion-create-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (format format)
  (ycbcr-model sampler-ycbcr-model-conversion)
  (ycbcr-range sampler-ycbcr-range)
  (components (:struct component-mapping))
  (x-chroma-offset chroma-location)
  (y-chroma-offset chroma-location)
  (chroma-filter filter)
  (force-explicit-reconstruction bool32))

(defcstruct (bind-image-plane-memory-info :class c-bind-image-plane-memory-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (plane-aspect image-aspect-flag-bits))

(defcstruct (bind-image-plane-memory-info-khr :class c-bind-image-plane-memory-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (plane-aspect image-aspect-flag-bits))

(defcstruct (image-plane-memory-requirements-info :class c-image-plane-memory-requirements-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (plane-aspect image-aspect-flag-bits))

(defcstruct (image-plane-memory-requirements-info-khr :class c-image-plane-memory-requirements-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (plane-aspect image-aspect-flag-bits))

(defcstruct (physical-device-sampler-ycbcr-conversion-features :class c-physical-device-sampler-ycbcr-conversion-features)
  (s-type structure-type)
  (p-next (:pointer :void))
  (sampler-ycbcr-conversion bool32))

(defcstruct (physical-device-sampler-ycbcr-conversion-features-khr :class c-physical-device-sampler-ycbcr-conversion-features-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (sampler-ycbcr-conversion bool32))

(defcstruct (sampler-ycbcr-conversion-image-format-properties :class c-sampler-ycbcr-conversion-image-format-properties)
  (s-type structure-type)
  (p-next (:pointer :void))
  (combined-image-sampler-descriptor-count :uint32))

(defcstruct (sampler-ycbcr-conversion-image-format-properties-khr :class c-sampler-ycbcr-conversion-image-format-properties-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (combined-image-sampler-descriptor-count :uint32))

(defcstruct (texture-l-o-d-gather-format-properties-amd :class c-texture-l-o-d-gather-format-properties-amd)
  (s-type structure-type)
  (p-next (:pointer :void))
  (supports-texture-gather-l-o-d-bias-amd bool32))

(defcstruct (conditional-rendering-begin-info-ext :class c-conditional-rendering-begin-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (buffer buffer)
  (offset device-size)
  (flags conditional-rendering-flags-ext))

(defcstruct (protected-submit-info :class c-protected-submit-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (protected-submit bool32))

(defcstruct (physical-device-protected-memory-features :class c-physical-device-protected-memory-features)
  (s-type structure-type)
  (p-next (:pointer :void))
  (protected-memory bool32))

(defcstruct (physical-device-protected-memory-properties :class c-physical-device-protected-memory-properties)
  (s-type structure-type)
  (p-next (:pointer :void))
  (protected-no-fault bool32))

(defcstruct (device-queue-info-2 :class c-device-queue-info-2)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags device-queue-create-flags)
  (queue-family-index :uint32)
  (queue-index :uint32))

(defcstruct (pipeline-coverage-to-color-state-create-info-nv :class c-pipeline-coverage-to-color-state-create-info-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags pipeline-coverage-to-color-state-create-flags-nv)
  (coverage-to-color-enable bool32)
  (coverage-to-color-location :uint32))

(defcstruct (physical-device-sampler-filter-minmax-properties :class c-physical-device-sampler-filter-minmax-properties)
  (s-type structure-type)
  (p-next (:pointer :void))
  (filter-minmax-single-component-formats bool32)
  (filter-minmax-image-component-mapping bool32))

(defcstruct (physical-device-sampler-filter-minmax-properties-ext :class c-physical-device-sampler-filter-minmax-properties-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (filter-minmax-single-component-formats bool32)
  (filter-minmax-image-component-mapping bool32))

(defcstruct (sample-location-ext :class c-sample-location-ext)
  (x :float)
  (y :float))

(defcstruct (sample-locations-info-ext :class c-sample-locations-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (sample-locations-per-pixel sample-count-flag-bits)
  (sample-location-grid-size (:struct extent-2d))
  (sample-locations-count :uint32)
  (p-sample-locations (:pointer (:struct sample-location-ext))))

(defcstruct (attachment-sample-locations-ext :class c-attachment-sample-locations-ext)
  (attachment-index :uint32)
  (sample-locations-info (:struct sample-locations-info-ext)))

(defcstruct (subpass-sample-locations-ext :class c-subpass-sample-locations-ext)
  (subpass-index :uint32)
  (sample-locations-info (:struct sample-locations-info-ext)))

(defcstruct (render-pass-sample-locations-begin-info-ext :class c-render-pass-sample-locations-begin-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (attachment-initial-sample-locations-count :uint32)
  (p-attachment-initial-sample-locations (:pointer
                                          (:struct
                                           attachment-sample-locations-ext)))
  (post-subpass-sample-locations-count :uint32)
  (p-post-subpass-sample-locations (:pointer
                                    (:struct subpass-sample-locations-ext))))

(defcstruct (pipeline-sample-locations-state-create-info-ext :class c-pipeline-sample-locations-state-create-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (sample-locations-enable bool32)
  (sample-locations-info (:struct sample-locations-info-ext)))

(defcstruct (physical-device-sample-locations-properties-ext :class c-physical-device-sample-locations-properties-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (sample-location-sample-counts sample-count-flags)
  (max-sample-location-grid-size (:struct extent-2d))
  (sample-location-coordinate-range :float :count 2)
  (sample-location-sub-pixel-bits :uint32)
  (variable-sample-locations bool32))

(defcstruct (multisample-properties-ext :class c-multisample-properties-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (max-sample-location-grid-size (:struct extent-2d)))

(defcstruct (sampler-reduction-mode-create-info :class c-sampler-reduction-mode-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (reduction-mode sampler-reduction-mode))

(defcstruct (sampler-reduction-mode-create-info-ext :class c-sampler-reduction-mode-create-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (reduction-mode sampler-reduction-mode))

(defcstruct (physical-device-blend-operation-advanced-features-ext :class c-physical-device-blend-operation-advanced-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (advanced-blend-coherent-operations bool32))

(defcstruct (physical-device-multi-draw-features-ext :class c-physical-device-multi-draw-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (multi-draw bool32))

(defcstruct (physical-device-blend-operation-advanced-properties-ext :class c-physical-device-blend-operation-advanced-properties-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (advanced-blend-max-color-attachments :uint32)
  (advanced-blend-independent-blend bool32)
  (advanced-blend-non-premultiplied-src-color bool32)
  (advanced-blend-non-premultiplied-dst-color bool32)
  (advanced-blend-correlated-overlap bool32)
  (advanced-blend-all-operations bool32))

(defcstruct (pipeline-color-blend-advanced-state-create-info-ext :class c-pipeline-color-blend-advanced-state-create-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (src-premultiplied bool32)
  (dst-premultiplied bool32)
  (blend-overlap blend-overlap-ext))

(defcstruct (physical-device-inline-uniform-block-features-ext :class c-physical-device-inline-uniform-block-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (inline-uniform-block bool32)
  (descriptor-binding-inline-uniform-block-update-after-bind bool32))

(defcstruct (physical-device-inline-uniform-block-properties-ext :class c-physical-device-inline-uniform-block-properties-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (max-inline-uniform-block-size :uint32)
  (max-per-stage-descriptor-inline-uniform-blocks :uint32)
  (max-per-stage-descriptor-update-after-bind-inline-uniform-blocks :uint32)
  (max-descriptor-set-inline-uniform-blocks :uint32)
  (max-descriptor-set-update-after-bind-inline-uniform-blocks :uint32))

(defcstruct (write-descriptor-set-inline-uniform-block-ext :class c-write-descriptor-set-inline-uniform-block-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (data-size :uint32)
  (p-data (:pointer :void)))

(defcstruct (descriptor-pool-inline-uniform-block-create-info-ext :class c-descriptor-pool-inline-uniform-block-create-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (max-inline-uniform-block-bindings :uint32))

(defcstruct (pipeline-coverage-modulation-state-create-info-nv :class c-pipeline-coverage-modulation-state-create-info-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags pipeline-coverage-modulation-state-create-flags-nv)
  (coverage-modulation-mode coverage-modulation-mode-nv)
  (coverage-modulation-table-enable bool32)
  (coverage-modulation-table-count :uint32)
  (p-coverage-modulation-table (:pointer :float)))

(defcstruct (image-format-list-create-info :class c-image-format-list-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (view-format-count :uint32)
  (p-view-formats (:pointer format)))

(defcstruct (image-format-list-create-info-khr :class c-image-format-list-create-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (view-format-count :uint32)
  (p-view-formats (:pointer format)))

(defcstruct (validation-cache-create-info-ext :class c-validation-cache-create-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags validation-cache-create-flags-ext)
  (initial-data-size :size)
  (p-initial-data (:pointer :void)))

(defcstruct (shader-module-validation-cache-create-info-ext :class c-shader-module-validation-cache-create-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (validation-cache validation-cache-ext))

(defcstruct (physical-device-maintenance-3-properties :class c-physical-device-maintenance-3-properties)
  (s-type structure-type)
  (p-next (:pointer :void))
  (max-per-set-descriptors :uint32)
  (max-memory-allocation-size device-size))

(defcstruct (physical-device-maintenance-3-properties-khr :class c-physical-device-maintenance-3-properties-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (max-per-set-descriptors :uint32)
  (max-memory-allocation-size device-size))

(defcstruct (physical-device-maintenance-4-features-khr :class c-physical-device-maintenance-4-features-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (maintenance-4 bool32))

(defcstruct (physical-device-maintenance-4-properties-khr :class c-physical-device-maintenance-4-properties-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (max-buffer-size device-size))

(defcstruct (descriptor-set-layout-support :class c-descriptor-set-layout-support)
  (s-type structure-type)
  (p-next (:pointer :void))
  (supported bool32))

(defcstruct (descriptor-set-layout-support-khr :class c-descriptor-set-layout-support-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (supported bool32))

(defcstruct (physical-device-shader-draw-parameters-features :class c-physical-device-shader-draw-parameters-features)
  (s-type structure-type)
  (p-next (:pointer :void))
  (shader-draw-parameters bool32))

(defcstruct (physical-device-shader-draw-parameter-features :class c-physical-device-shader-draw-parameter-features)
  (s-type structure-type)
  (p-next (:pointer :void))
  (shader-draw-parameters bool32))

(defcstruct (physical-device-shader-float-16-int-8-features :class c-physical-device-shader-float-16-int-8-features)
  (s-type structure-type)
  (p-next (:pointer :void))
  (shader-float-16 bool32)
  (shader-int-8 bool32))

(defcstruct (physical-device-float-16-int-8-features-khr :class c-physical-device-float-16-int-8-features-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (shader-float-16 bool32)
  (shader-int-8 bool32))

(defcstruct (physical-device-shader-float-16-int-8-features-khr :class c-physical-device-shader-float-16-int-8-features-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (shader-float-16 bool32)
  (shader-int-8 bool32))

(defcstruct (physical-device-float-controls-properties :class c-physical-device-float-controls-properties)
  (s-type structure-type)
  (p-next (:pointer :void))
  (denorm-behavior-independence shader-float-controls-independence)
  (rounding-mode-independence shader-float-controls-independence)
  (shader-signed-zero-inf-nan-preserve-float-16 bool32)
  (shader-signed-zero-inf-nan-preserve-float-32 bool32)
  (shader-signed-zero-inf-nan-preserve-float-64 bool32)
  (shader-denorm-preserve-float-16 bool32)
  (shader-denorm-preserve-float-32 bool32)
  (shader-denorm-preserve-float-64 bool32)
  (shader-denorm-flush-to-zero-float-16 bool32)
  (shader-denorm-flush-to-zero-float-32 bool32)
  (shader-denorm-flush-to-zero-float-64 bool32)
  (shader-rounding-mode-rte-float-16 bool32)
  (shader-rounding-mode-rte-float-32 bool32)
  (shader-rounding-mode-rte-float-64 bool32)
  (shader-rounding-mode-rtz-float-16 bool32)
  (shader-rounding-mode-rtz-float-32 bool32)
  (shader-rounding-mode-rtz-float-64 bool32))

(defcstruct (physical-device-float-controls-properties-khr :class c-physical-device-float-controls-properties-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (denorm-behavior-independence shader-float-controls-independence)
  (rounding-mode-independence shader-float-controls-independence)
  (shader-signed-zero-inf-nan-preserve-float-16 bool32)
  (shader-signed-zero-inf-nan-preserve-float-32 bool32)
  (shader-signed-zero-inf-nan-preserve-float-64 bool32)
  (shader-denorm-preserve-float-16 bool32)
  (shader-denorm-preserve-float-32 bool32)
  (shader-denorm-preserve-float-64 bool32)
  (shader-denorm-flush-to-zero-float-16 bool32)
  (shader-denorm-flush-to-zero-float-32 bool32)
  (shader-denorm-flush-to-zero-float-64 bool32)
  (shader-rounding-mode-rte-float-16 bool32)
  (shader-rounding-mode-rte-float-32 bool32)
  (shader-rounding-mode-rte-float-64 bool32)
  (shader-rounding-mode-rtz-float-16 bool32)
  (shader-rounding-mode-rtz-float-32 bool32)
  (shader-rounding-mode-rtz-float-64 bool32))

(defcstruct (physical-device-host-query-reset-features :class c-physical-device-host-query-reset-features)
  (s-type structure-type)
  (p-next (:pointer :void))
  (host-query-reset bool32))

(defcstruct (physical-device-host-query-reset-features-ext :class c-physical-device-host-query-reset-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (host-query-reset bool32))

(defcstruct (shader-resource-usage-amd :class c-shader-resource-usage-amd)
  (num-used-vgprs :uint32)
  (num-used-sgprs :uint32)
  (lds-size-per-local-work-group :uint32)
  (lds-usage-size-in-bytes :size)
  (scratch-mem-usage-in-bytes :size))

(defcstruct (shader-statistics-info-amd :class c-shader-statistics-info-amd)
  (shader-stage-mask shader-stage-flags)
  (resource-usage (:struct shader-resource-usage-amd))
  (num-physical-vgprs :uint32)
  (num-physical-sgprs :uint32)
  (num-available-vgprs :uint32)
  (num-available-sgprs :uint32)
  (compute-work-group-size :uint32 :count 3))

(defcstruct (device-queue-global-priority-create-info-ext :class c-device-queue-global-priority-create-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (global-priority queue-global-priority-ext))

(defcstruct (physical-device-global-priority-query-features-ext :class c-physical-device-global-priority-query-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (global-priority-query bool32))

(defcstruct (queue-family-global-priority-properties-ext :class c-queue-family-global-priority-properties-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (priority-count :uint32)
  (priorities queue-global-priority-ext :count 16))

(defcstruct (debug-utils-object-name-info-ext :class c-debug-utils-object-name-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (object-type object-type)
  (object-handle :uint64)
  (p-object-name :string))

(defcstruct (debug-utils-object-tag-info-ext :class c-debug-utils-object-tag-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (object-type object-type)
  (object-handle :uint64)
  (tag-name :uint64)
  (tag-size :size)
  (p-tag (:pointer :void)))

(defcstruct (debug-utils-label-ext :class c-debug-utils-label-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (p-label-name :string)
  (color :float :count 4))

(defcstruct (debug-utils-messenger-create-info-ext :class c-debug-utils-messenger-create-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags debug-utils-messenger-create-flags-ext)
  (message-severity debug-utils-message-severity-flags-ext)
  (message-type debug-utils-message-type-flags-ext)
  (pfn-user-callback pfn-debug-utils-messenger-callback-ext)
  (p-user-data (:pointer :void)))

(defcstruct (debug-utils-messenger-callback-data-ext :class c-debug-utils-messenger-callback-data-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags debug-utils-messenger-callback-data-flags-ext)
  (p-message-id-name :string)
  (message-id-number :int32)
  (p-message :string)
  (queue-label-count :uint32)
  (p-queue-labels (:pointer (:struct debug-utils-label-ext)))
  (cmd-buf-label-count :uint32)
  (p-cmd-buf-labels (:pointer (:struct debug-utils-label-ext)))
  (object-count :uint32)
  (p-objects (:pointer (:struct debug-utils-object-name-info-ext))))

(defcstruct (physical-device-device-memory-report-features-ext :class c-physical-device-device-memory-report-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (device-memory-report bool32))

(defcstruct (device-device-memory-report-create-info-ext :class c-device-device-memory-report-create-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags device-memory-report-flags-ext)
  (pfn-user-callback pfn-device-memory-report-callback-ext)
  (p-user-data (:pointer :void)))

(defcstruct (device-memory-report-callback-data-ext :class c-device-memory-report-callback-data-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags device-memory-report-flags-ext)
  (type device-memory-report-event-type-ext)
  (memory-object-id :uint64)
  (size device-size)
  (object-type object-type)
  (object-handle :uint64)
  (heap-index :uint32))

(defcstruct (import-memory-host-pointer-info-ext :class c-import-memory-host-pointer-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (handle-type external-memory-handle-type-flag-bits)
  (p-host-pointer (:pointer :void)))

(defcstruct (memory-host-pointer-properties-ext :class c-memory-host-pointer-properties-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (memory-type-bits :uint32))

(defcstruct (physical-device-external-memory-host-properties-ext :class c-physical-device-external-memory-host-properties-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (min-imported-host-pointer-alignment device-size))

(defcstruct (physical-device-conservative-rasterization-properties-ext :class c-physical-device-conservative-rasterization-properties-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (primitive-overestimation-size :float)
  (max-extra-primitive-overestimation-size :float)
  (extra-primitive-overestimation-size-granularity :float)
  (primitive-underestimation bool32)
  (conservative-point-and-line-rasterization bool32)
  (degenerate-triangles-rasterized bool32)
  (degenerate-lines-rasterized bool32)
  (fully-covered-fragment-shader-input-variable bool32)
  (conservative-rasterization-post-depth-coverage bool32))

(defcstruct (calibrated-timestamp-info-ext :class c-calibrated-timestamp-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (time-domain time-domain-ext))

(defcstruct (physical-device-shader-core-properties-amd :class c-physical-device-shader-core-properties-amd)
  (s-type structure-type)
  (p-next (:pointer :void))
  (shader-engine-count :uint32)
  (shader-arrays-per-engine-count :uint32)
  (compute-units-per-shader-array :uint32)
  (simd-per-compute-unit :uint32)
  (wavefronts-per-simd :uint32)
  (wavefront-size :uint32)
  (sgprs-per-simd :uint32)
  (min-sgpr-allocation :uint32)
  (max-sgpr-allocation :uint32)
  (sgpr-allocation-granularity :uint32)
  (vgprs-per-simd :uint32)
  (min-vgpr-allocation :uint32)
  (max-vgpr-allocation :uint32)
  (vgpr-allocation-granularity :uint32))

(defcstruct (physical-device-shader-core-properties-2-amd :class c-physical-device-shader-core-properties-2-amd)
  (s-type structure-type)
  (p-next (:pointer :void))
  (shader-core-features shader-core-properties-flags-amd)
  (active-compute-unit-count :uint32))

(defcstruct (pipeline-rasterization-conservative-state-create-info-ext :class c-pipeline-rasterization-conservative-state-create-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags pipeline-rasterization-conservative-state-create-flags-ext)
  (conservative-rasterization-mode conservative-rasterization-mode-ext)
  (extra-primitive-overestimation-size :float))

(defcstruct (physical-device-descriptor-indexing-features :class c-physical-device-descriptor-indexing-features)
  (s-type structure-type)
  (p-next (:pointer :void))
  (shader-input-attachment-array-dynamic-indexing bool32)
  (shader-uniform-texel-buffer-array-dynamic-indexing bool32)
  (shader-storage-texel-buffer-array-dynamic-indexing bool32)
  (shader-uniform-buffer-array-non-uniform-indexing bool32)
  (shader-sampled-image-array-non-uniform-indexing bool32)
  (shader-storage-buffer-array-non-uniform-indexing bool32)
  (shader-storage-image-array-non-uniform-indexing bool32)
  (shader-input-attachment-array-non-uniform-indexing bool32)
  (shader-uniform-texel-buffer-array-non-uniform-indexing bool32)
  (shader-storage-texel-buffer-array-non-uniform-indexing bool32)
  (descriptor-binding-uniform-buffer-update-after-bind bool32)
  (descriptor-binding-sampled-image-update-after-bind bool32)
  (descriptor-binding-storage-image-update-after-bind bool32)
  (descriptor-binding-storage-buffer-update-after-bind bool32)
  (descriptor-binding-uniform-texel-buffer-update-after-bind bool32)
  (descriptor-binding-storage-texel-buffer-update-after-bind bool32)
  (descriptor-binding-update-unused-while-pending bool32)
  (descriptor-binding-partially-bound bool32)
  (descriptor-binding-variable-descriptor-count bool32)
  (runtime-descriptor-array bool32))

(defcstruct (physical-device-descriptor-indexing-features-ext :class c-physical-device-descriptor-indexing-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (shader-input-attachment-array-dynamic-indexing bool32)
  (shader-uniform-texel-buffer-array-dynamic-indexing bool32)
  (shader-storage-texel-buffer-array-dynamic-indexing bool32)
  (shader-uniform-buffer-array-non-uniform-indexing bool32)
  (shader-sampled-image-array-non-uniform-indexing bool32)
  (shader-storage-buffer-array-non-uniform-indexing bool32)
  (shader-storage-image-array-non-uniform-indexing bool32)
  (shader-input-attachment-array-non-uniform-indexing bool32)
  (shader-uniform-texel-buffer-array-non-uniform-indexing bool32)
  (shader-storage-texel-buffer-array-non-uniform-indexing bool32)
  (descriptor-binding-uniform-buffer-update-after-bind bool32)
  (descriptor-binding-sampled-image-update-after-bind bool32)
  (descriptor-binding-storage-image-update-after-bind bool32)
  (descriptor-binding-storage-buffer-update-after-bind bool32)
  (descriptor-binding-uniform-texel-buffer-update-after-bind bool32)
  (descriptor-binding-storage-texel-buffer-update-after-bind bool32)
  (descriptor-binding-update-unused-while-pending bool32)
  (descriptor-binding-partially-bound bool32)
  (descriptor-binding-variable-descriptor-count bool32)
  (runtime-descriptor-array bool32))

(defcstruct (physical-device-descriptor-indexing-properties :class c-physical-device-descriptor-indexing-properties)
  (s-type structure-type)
  (p-next (:pointer :void))
  (max-update-after-bind-descriptors-in-all-pools :uint32)
  (shader-uniform-buffer-array-non-uniform-indexing-native bool32)
  (shader-sampled-image-array-non-uniform-indexing-native bool32)
  (shader-storage-buffer-array-non-uniform-indexing-native bool32)
  (shader-storage-image-array-non-uniform-indexing-native bool32)
  (shader-input-attachment-array-non-uniform-indexing-native bool32)
  (robust-buffer-access-update-after-bind bool32)
  (quad-divergent-implicit-lod bool32)
  (max-per-stage-descriptor-update-after-bind-samplers :uint32)
  (max-per-stage-descriptor-update-after-bind-uniform-buffers :uint32)
  (max-per-stage-descriptor-update-after-bind-storage-buffers :uint32)
  (max-per-stage-descriptor-update-after-bind-sampled-images :uint32)
  (max-per-stage-descriptor-update-after-bind-storage-images :uint32)
  (max-per-stage-descriptor-update-after-bind-input-attachments :uint32)
  (max-per-stage-update-after-bind-resources :uint32)
  (max-descriptor-set-update-after-bind-samplers :uint32)
  (max-descriptor-set-update-after-bind-uniform-buffers :uint32)
  (max-descriptor-set-update-after-bind-uniform-buffers-dynamic :uint32)
  (max-descriptor-set-update-after-bind-storage-buffers :uint32)
  (max-descriptor-set-update-after-bind-storage-buffers-dynamic :uint32)
  (max-descriptor-set-update-after-bind-sampled-images :uint32)
  (max-descriptor-set-update-after-bind-storage-images :uint32)
  (max-descriptor-set-update-after-bind-input-attachments :uint32))

(defcstruct (physical-device-descriptor-indexing-properties-ext :class c-physical-device-descriptor-indexing-properties-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (max-update-after-bind-descriptors-in-all-pools :uint32)
  (shader-uniform-buffer-array-non-uniform-indexing-native bool32)
  (shader-sampled-image-array-non-uniform-indexing-native bool32)
  (shader-storage-buffer-array-non-uniform-indexing-native bool32)
  (shader-storage-image-array-non-uniform-indexing-native bool32)
  (shader-input-attachment-array-non-uniform-indexing-native bool32)
  (robust-buffer-access-update-after-bind bool32)
  (quad-divergent-implicit-lod bool32)
  (max-per-stage-descriptor-update-after-bind-samplers :uint32)
  (max-per-stage-descriptor-update-after-bind-uniform-buffers :uint32)
  (max-per-stage-descriptor-update-after-bind-storage-buffers :uint32)
  (max-per-stage-descriptor-update-after-bind-sampled-images :uint32)
  (max-per-stage-descriptor-update-after-bind-storage-images :uint32)
  (max-per-stage-descriptor-update-after-bind-input-attachments :uint32)
  (max-per-stage-update-after-bind-resources :uint32)
  (max-descriptor-set-update-after-bind-samplers :uint32)
  (max-descriptor-set-update-after-bind-uniform-buffers :uint32)
  (max-descriptor-set-update-after-bind-uniform-buffers-dynamic :uint32)
  (max-descriptor-set-update-after-bind-storage-buffers :uint32)
  (max-descriptor-set-update-after-bind-storage-buffers-dynamic :uint32)
  (max-descriptor-set-update-after-bind-sampled-images :uint32)
  (max-descriptor-set-update-after-bind-storage-images :uint32)
  (max-descriptor-set-update-after-bind-input-attachments :uint32))

(defcstruct (descriptor-set-layout-binding-flags-create-info :class c-descriptor-set-layout-binding-flags-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (binding-count :uint32)
  (p-binding-flags (:pointer descriptor-binding-flags)))

(defcstruct (descriptor-set-layout-binding-flags-create-info-ext :class c-descriptor-set-layout-binding-flags-create-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (binding-count :uint32)
  (p-binding-flags (:pointer descriptor-binding-flags)))

(defcstruct (descriptor-set-variable-descriptor-count-allocate-info :class c-descriptor-set-variable-descriptor-count-allocate-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (descriptor-set-count :uint32)
  (p-descriptor-counts (:pointer :uint32)))

(defcstruct (descriptor-set-variable-descriptor-count-allocate-info-ext :class c-descriptor-set-variable-descriptor-count-allocate-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (descriptor-set-count :uint32)
  (p-descriptor-counts (:pointer :uint32)))

(defcstruct (descriptor-set-variable-descriptor-count-layout-support :class c-descriptor-set-variable-descriptor-count-layout-support)
  (s-type structure-type)
  (p-next (:pointer :void))
  (max-variable-descriptor-count :uint32))

(defcstruct (descriptor-set-variable-descriptor-count-layout-support-ext :class c-descriptor-set-variable-descriptor-count-layout-support-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (max-variable-descriptor-count :uint32))

(defcstruct (attachment-description-2 :class c-attachment-description-2)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags attachment-description-flags)
  (format format)
  (samples sample-count-flag-bits)
  (load-op attachment-load-op)
  (store-op attachment-store-op)
  (stencil-load-op attachment-load-op)
  (stencil-store-op attachment-store-op)
  (initial-layout image-layout)
  (final-layout image-layout))

(defcstruct (attachment-description-2-khr :class c-attachment-description-2-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags attachment-description-flags)
  (format format)
  (samples sample-count-flag-bits)
  (load-op attachment-load-op)
  (store-op attachment-store-op)
  (stencil-load-op attachment-load-op)
  (stencil-store-op attachment-store-op)
  (initial-layout image-layout)
  (final-layout image-layout))

(defcstruct (attachment-reference-2 :class c-attachment-reference-2)
  (s-type structure-type)
  (p-next (:pointer :void))
  (attachment :uint32)
  (layout image-layout)
  (aspect-mask image-aspect-flags))

(defcstruct (attachment-reference-2-khr :class c-attachment-reference-2-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (attachment :uint32)
  (layout image-layout)
  (aspect-mask image-aspect-flags))

(defcstruct (subpass-description-2 :class c-subpass-description-2)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags subpass-description-flags)
  (pipeline-bind-point pipeline-bind-point)
  (view-mask :uint32)
  (input-attachment-count :uint32)
  (p-input-attachments (:pointer (:struct attachment-reference-2)))
  (color-attachment-count :uint32)
  (p-color-attachments (:pointer (:struct attachment-reference-2)))
  (p-resolve-attachments (:pointer (:struct attachment-reference-2)))
  (p-depth-stencil-attachment (:pointer (:struct attachment-reference-2)))
  (preserve-attachment-count :uint32)
  (p-preserve-attachments (:pointer :uint32)))

(defcstruct (subpass-description-2-khr :class c-subpass-description-2-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags subpass-description-flags)
  (pipeline-bind-point pipeline-bind-point)
  (view-mask :uint32)
  (input-attachment-count :uint32)
  (p-input-attachments (:pointer (:struct attachment-reference-2)))
  (color-attachment-count :uint32)
  (p-color-attachments (:pointer (:struct attachment-reference-2)))
  (p-resolve-attachments (:pointer (:struct attachment-reference-2)))
  (p-depth-stencil-attachment (:pointer (:struct attachment-reference-2)))
  (preserve-attachment-count :uint32)
  (p-preserve-attachments (:pointer :uint32)))

(defcstruct (subpass-dependency-2 :class c-subpass-dependency-2)
  (s-type structure-type)
  (p-next (:pointer :void))
  (src-subpass :uint32)
  (dst-subpass :uint32)
  (src-stage-mask pipeline-stage-flags)
  (dst-stage-mask pipeline-stage-flags)
  (src-access-mask access-flags)
  (dst-access-mask access-flags)
  (dependency-flags dependency-flags)
  (view-offset :int32))

(defcstruct (subpass-dependency-2-khr :class c-subpass-dependency-2-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (src-subpass :uint32)
  (dst-subpass :uint32)
  (src-stage-mask pipeline-stage-flags)
  (dst-stage-mask pipeline-stage-flags)
  (src-access-mask access-flags)
  (dst-access-mask access-flags)
  (dependency-flags dependency-flags)
  (view-offset :int32))

(defcstruct (render-pass-create-info-2 :class c-render-pass-create-info-2)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags render-pass-create-flags)
  (attachment-count :uint32)
  (p-attachments (:pointer (:struct attachment-description-2)))
  (subpass-count :uint32)
  (p-subpasses (:pointer (:struct subpass-description-2)))
  (dependency-count :uint32)
  (p-dependencies (:pointer (:struct subpass-dependency-2)))
  (correlated-view-mask-count :uint32)
  (p-correlated-view-masks (:pointer :uint32)))

(defcstruct (render-pass-create-info-2-khr :class c-render-pass-create-info-2-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags render-pass-create-flags)
  (attachment-count :uint32)
  (p-attachments (:pointer (:struct attachment-description-2)))
  (subpass-count :uint32)
  (p-subpasses (:pointer (:struct subpass-description-2)))
  (dependency-count :uint32)
  (p-dependencies (:pointer (:struct subpass-dependency-2)))
  (correlated-view-mask-count :uint32)
  (p-correlated-view-masks (:pointer :uint32)))

(defcstruct (subpass-begin-info :class c-subpass-begin-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (contents subpass-contents))

(defcstruct (subpass-begin-info-khr :class c-subpass-begin-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (contents subpass-contents))

(defcstruct (subpass-end-info :class c-subpass-end-info)
  (s-type structure-type)
  (p-next (:pointer :void)))

(defcstruct (subpass-end-info-khr :class c-subpass-end-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void)))

(defcstruct (physical-device-timeline-semaphore-features :class c-physical-device-timeline-semaphore-features)
  (s-type structure-type)
  (p-next (:pointer :void))
  (timeline-semaphore bool32))

(defcstruct (physical-device-timeline-semaphore-features-khr :class c-physical-device-timeline-semaphore-features-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (timeline-semaphore bool32))

(defcstruct (physical-device-timeline-semaphore-properties :class c-physical-device-timeline-semaphore-properties)
  (s-type structure-type)
  (p-next (:pointer :void))
  (max-timeline-semaphore-value-difference :uint64))

(defcstruct (physical-device-timeline-semaphore-properties-khr :class c-physical-device-timeline-semaphore-properties-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (max-timeline-semaphore-value-difference :uint64))

(defcstruct (semaphore-type-create-info :class c-semaphore-type-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (semaphore-type semaphore-type)
  (initial-value :uint64))

(defcstruct (semaphore-type-create-info-khr :class c-semaphore-type-create-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (semaphore-type semaphore-type)
  (initial-value :uint64))

(defcstruct (timeline-semaphore-submit-info :class c-timeline-semaphore-submit-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (wait-semaphore-value-count :uint32)
  (p-wait-semaphore-values (:pointer :uint64))
  (signal-semaphore-value-count :uint32)
  (p-signal-semaphore-values (:pointer :uint64)))

(defcstruct (timeline-semaphore-submit-info-khr :class c-timeline-semaphore-submit-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (wait-semaphore-value-count :uint32)
  (p-wait-semaphore-values (:pointer :uint64))
  (signal-semaphore-value-count :uint32)
  (p-signal-semaphore-values (:pointer :uint64)))

(defcstruct (semaphore-wait-info :class c-semaphore-wait-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags semaphore-wait-flags)
  (semaphore-count :uint32)
  (p-semaphores (:pointer semaphore))
  (p-values (:pointer :uint64)))

(defcstruct (semaphore-wait-info-khr :class c-semaphore-wait-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags semaphore-wait-flags)
  (semaphore-count :uint32)
  (p-semaphores (:pointer semaphore))
  (p-values (:pointer :uint64)))

(defcstruct (semaphore-signal-info :class c-semaphore-signal-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (semaphore semaphore)
  (value :uint64))

(defcstruct (semaphore-signal-info-khr :class c-semaphore-signal-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (semaphore semaphore)
  (value :uint64))

(defcstruct (vertex-input-binding-divisor-description-ext :class c-vertex-input-binding-divisor-description-ext)
  (binding :uint32)
  (divisor :uint32))

(defcstruct (pipeline-vertex-input-divisor-state-create-info-ext :class c-pipeline-vertex-input-divisor-state-create-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (vertex-binding-divisor-count :uint32)
  (p-vertex-binding-divisors (:pointer
                              (:struct
                               vertex-input-binding-divisor-description-ext))))

(defcstruct (physical-device-vertex-attribute-divisor-properties-ext :class c-physical-device-vertex-attribute-divisor-properties-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (max-vertex-attrib-divisor :uint32))

(defcstruct (physical-device-p-c-i-bus-info-properties-ext :class c-physical-device-p-c-i-bus-info-properties-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (pci-domain :uint32)
  (pci-bus :uint32)
  (pci-device :uint32)
  (pci-function :uint32))

(defcstruct (import-android-hardware-buffer-info-android :class c-import-android-hardware-buffer-info-android)
  (s-type structure-type)
  (p-next (:pointer :void))
  (buffer (:pointer a-hardware-buffer)))

(defcstruct (android-hardware-buffer-usage-android :class c-android-hardware-buffer-usage-android)
  (s-type structure-type)
  (p-next (:pointer :void))
  (android-hardware-buffer-usage :uint64))

(defcstruct (android-hardware-buffer-properties-android :class c-android-hardware-buffer-properties-android)
  (s-type structure-type)
  (p-next (:pointer :void))
  (allocation-size device-size)
  (memory-type-bits :uint32))

(defcstruct (memory-get-android-hardware-buffer-info-android :class c-memory-get-android-hardware-buffer-info-android)
  (s-type structure-type)
  (p-next (:pointer :void))
  (memory device-memory))

(defcstruct (android-hardware-buffer-format-properties-android :class c-android-hardware-buffer-format-properties-android)
  (s-type structure-type)
  (p-next (:pointer :void))
  (format format)
  (external-format :uint64)
  (format-features format-feature-flags)
  (sampler-ycbcr-conversion-components (:struct component-mapping))
  (suggested-ycbcr-model sampler-ycbcr-model-conversion)
  (suggested-ycbcr-range sampler-ycbcr-range)
  (suggested-x-chroma-offset chroma-location)
  (suggested-y-chroma-offset chroma-location))

(defcstruct (command-buffer-inheritance-conditional-rendering-info-ext :class c-command-buffer-inheritance-conditional-rendering-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (conditional-rendering-enable bool32))

(defcstruct (external-format-android :class c-external-format-android)
  (s-type structure-type)
  (p-next (:pointer :void))
  (external-format :uint64))

(defcstruct (physical-device-8-bit-storage-features :class c-physical-device-8-bit-storage-features)
  (s-type structure-type)
  (p-next (:pointer :void))
  (storage-buffer-8-bit-access bool32)
  (uniform-and-storage-buffer-8-bit-access bool32)
  (storage-push-constant-8 bool32))

(defcstruct (physical-device-8-bit-storage-features-khr :class c-physical-device-8-bit-storage-features-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (storage-buffer-8-bit-access bool32)
  (uniform-and-storage-buffer-8-bit-access bool32)
  (storage-push-constant-8 bool32))

(defcstruct (physical-device-conditional-rendering-features-ext :class c-physical-device-conditional-rendering-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (conditional-rendering bool32)
  (inherited-conditional-rendering bool32))

(defcstruct (physical-device-vulkan-memory-model-features :class c-physical-device-vulkan-memory-model-features)
  (s-type structure-type)
  (p-next (:pointer :void))
  (vulkan-memory-model bool32)
  (vulkan-memory-model-device-scope bool32)
  (vulkan-memory-model-availability-visibility-chains bool32))

(defcstruct (physical-device-vulkan-memory-model-features-khr :class c-physical-device-vulkan-memory-model-features-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (vulkan-memory-model bool32)
  (vulkan-memory-model-device-scope bool32)
  (vulkan-memory-model-availability-visibility-chains bool32))

(defcstruct (physical-device-shader-atomic-int-64-features :class c-physical-device-shader-atomic-int-64-features)
  (s-type structure-type)
  (p-next (:pointer :void))
  (shader-buffer-int-64-atomics bool32)
  (shader-shared-int-64-atomics bool32))

(defcstruct (physical-device-shader-atomic-int-64-features-khr :class c-physical-device-shader-atomic-int-64-features-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (shader-buffer-int-64-atomics bool32)
  (shader-shared-int-64-atomics bool32))

(defcstruct (physical-device-shader-atomic-float-features-ext :class c-physical-device-shader-atomic-float-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (shader-buffer-float-32-atomics bool32)
  (shader-buffer-float-32-atomic-add bool32)
  (shader-buffer-float-64-atomics bool32)
  (shader-buffer-float-64-atomic-add bool32)
  (shader-shared-float-32-atomics bool32)
  (shader-shared-float-32-atomic-add bool32)
  (shader-shared-float-64-atomics bool32)
  (shader-shared-float-64-atomic-add bool32)
  (shader-image-float-32-atomics bool32)
  (shader-image-float-32-atomic-add bool32)
  (sparse-image-float-32-atomics bool32)
  (sparse-image-float-32-atomic-add bool32))

(defcstruct (physical-device-shader-atomic-float-2-features-ext :class c-physical-device-shader-atomic-float-2-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (shader-buffer-float-16-atomics bool32)
  (shader-buffer-float-16-atomic-add bool32)
  (shader-buffer-float-16-atomic-min-max bool32)
  (shader-buffer-float-32-atomic-min-max bool32)
  (shader-buffer-float-64-atomic-min-max bool32)
  (shader-shared-float-16-atomics bool32)
  (shader-shared-float-16-atomic-add bool32)
  (shader-shared-float-16-atomic-min-max bool32)
  (shader-shared-float-32-atomic-min-max bool32)
  (shader-shared-float-64-atomic-min-max bool32)
  (shader-image-float-32-atomic-min-max bool32)
  (sparse-image-float-32-atomic-min-max bool32))

(defcstruct (physical-device-vertex-attribute-divisor-features-ext :class c-physical-device-vertex-attribute-divisor-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (vertex-attribute-instance-rate-divisor bool32)
  (vertex-attribute-instance-rate-zero-divisor bool32))

(defcstruct (queue-family-checkpoint-properties-nv :class c-queue-family-checkpoint-properties-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (checkpoint-execution-stage-mask pipeline-stage-flags))

(defcstruct (checkpoint-data-nv :class c-checkpoint-data-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (stage pipeline-stage-flag-bits)
  (p-checkpoint-marker (:pointer :void)))

(defcstruct (physical-device-depth-stencil-resolve-properties :class c-physical-device-depth-stencil-resolve-properties)
  (s-type structure-type)
  (p-next (:pointer :void))
  (supported-depth-resolve-modes resolve-mode-flags)
  (supported-stencil-resolve-modes resolve-mode-flags)
  (independent-resolve-none bool32)
  (independent-resolve bool32))

(defcstruct (physical-device-depth-stencil-resolve-properties-khr :class c-physical-device-depth-stencil-resolve-properties-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (supported-depth-resolve-modes resolve-mode-flags)
  (supported-stencil-resolve-modes resolve-mode-flags)
  (independent-resolve-none bool32)
  (independent-resolve bool32))

(defcstruct (subpass-description-depth-stencil-resolve :class c-subpass-description-depth-stencil-resolve)
  (s-type structure-type)
  (p-next (:pointer :void))
  (depth-resolve-mode resolve-mode-flag-bits)
  (stencil-resolve-mode resolve-mode-flag-bits)
  (p-depth-stencil-resolve-attachment (:pointer
                                       (:struct attachment-reference-2))))

(defcstruct (subpass-description-depth-stencil-resolve-khr :class c-subpass-description-depth-stencil-resolve-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (depth-resolve-mode resolve-mode-flag-bits)
  (stencil-resolve-mode resolve-mode-flag-bits)
  (p-depth-stencil-resolve-attachment (:pointer
                                       (:struct attachment-reference-2))))

(defcstruct (image-view-astc-decode-mode-ext :class c-image-view-astc-decode-mode-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (decode-mode format))

(defcstruct (physical-device-astc-decode-features-ext :class c-physical-device-astc-decode-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (decode-mode-shared-exponent bool32))

(defcstruct (physical-device-transform-feedback-features-ext :class c-physical-device-transform-feedback-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (transform-feedback bool32)
  (geometry-streams bool32))

(defcstruct (physical-device-transform-feedback-properties-ext :class c-physical-device-transform-feedback-properties-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (max-transform-feedback-streams :uint32)
  (max-transform-feedback-buffers :uint32)
  (max-transform-feedback-buffer-size device-size)
  (max-transform-feedback-stream-data-size :uint32)
  (max-transform-feedback-buffer-data-size :uint32)
  (max-transform-feedback-buffer-data-stride :uint32)
  (transform-feedback-queries bool32)
  (transform-feedback-streams-lines-triangles bool32)
  (transform-feedback-rasterization-stream-select bool32)
  (transform-feedback-draw bool32))

(defcstruct (pipeline-rasterization-state-stream-create-info-ext :class c-pipeline-rasterization-state-stream-create-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags pipeline-rasterization-state-stream-create-flags-ext)
  (rasterization-stream :uint32))

(defcstruct (physical-device-representative-fragment-test-features-nv :class c-physical-device-representative-fragment-test-features-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (representative-fragment-test bool32))

(defcstruct (pipeline-representative-fragment-test-state-create-info-nv :class c-pipeline-representative-fragment-test-state-create-info-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (representative-fragment-test-enable bool32))

(defcstruct (physical-device-exclusive-scissor-features-nv :class c-physical-device-exclusive-scissor-features-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (exclusive-scissor bool32))

(defcstruct (pipeline-viewport-exclusive-scissor-state-create-info-nv :class c-pipeline-viewport-exclusive-scissor-state-create-info-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (exclusive-scissor-count :uint32)
  (p-exclusive-scissors (:pointer (:struct rect-2d))))

(defcstruct (physical-device-corner-sampled-image-features-nv :class c-physical-device-corner-sampled-image-features-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (corner-sampled-image bool32))

(defcstruct (physical-device-compute-shader-derivatives-features-nv :class c-physical-device-compute-shader-derivatives-features-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (compute-derivative-group-quads bool32)
  (compute-derivative-group-linear bool32))

(defcstruct (physical-device-fragment-shader-barycentric-features-nv :class c-physical-device-fragment-shader-barycentric-features-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (fragment-shader-barycentric bool32))

(defcstruct (physical-device-shader-image-footprint-features-nv :class c-physical-device-shader-image-footprint-features-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (image-footprint bool32))

(defcstruct (physical-device-dedicated-allocation-image-aliasing-features-nv :class c-physical-device-dedicated-allocation-image-aliasing-features-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (dedicated-allocation-image-aliasing bool32))

(defcstruct (shading-rate-palette-nv :class c-shading-rate-palette-nv)
  (shading-rate-palette-entry-count :uint32)
  (p-shading-rate-palette-entries (:pointer shading-rate-palette-entry-nv)))

(defcstruct (pipeline-viewport-shading-rate-image-state-create-info-nv :class c-pipeline-viewport-shading-rate-image-state-create-info-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (shading-rate-image-enable bool32)
  (viewport-count :uint32)
  (p-shading-rate-palettes (:pointer (:struct shading-rate-palette-nv))))

(defcstruct (physical-device-shading-rate-image-features-nv :class c-physical-device-shading-rate-image-features-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (shading-rate-image bool32)
  (shading-rate-coarse-sample-order bool32))

(defcstruct (physical-device-shading-rate-image-properties-nv :class c-physical-device-shading-rate-image-properties-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (shading-rate-texel-size (:struct extent-2d))
  (shading-rate-palette-size :uint32)
  (shading-rate-max-coarse-samples :uint32))

(defcstruct (physical-device-invocation-mask-features-huawei :class c-physical-device-invocation-mask-features-huawei)
  (s-type structure-type)
  (p-next (:pointer :void))
  (invocation-mask bool32))

(defcstruct (coarse-sample-location-nv :class c-coarse-sample-location-nv)
  (pixel-x :uint32)
  (pixel-y :uint32)
  (sample :uint32))

(defcstruct (coarse-sample-order-custom-nv :class c-coarse-sample-order-custom-nv)
  (shading-rate shading-rate-palette-entry-nv)
  (sample-count :uint32)
  (sample-location-count :uint32)
  (p-sample-locations (:pointer (:struct coarse-sample-location-nv))))

(defcstruct (pipeline-viewport-coarse-sample-order-state-create-info-nv :class c-pipeline-viewport-coarse-sample-order-state-create-info-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (sample-order-type coarse-sample-order-type-nv)
  (custom-sample-order-count :uint32)
  (p-custom-sample-orders (:pointer (:struct coarse-sample-order-custom-nv))))

(defcstruct (physical-device-mesh-shader-features-nv :class c-physical-device-mesh-shader-features-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (task-shader bool32)
  (mesh-shader bool32))

(defcstruct (physical-device-mesh-shader-properties-nv :class c-physical-device-mesh-shader-properties-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (max-draw-mesh-tasks-count :uint32)
  (max-task-work-group-invocations :uint32)
  (max-task-work-group-size :uint32 :count 3)
  (max-task-total-memory-size :uint32)
  (max-task-output-count :uint32)
  (max-mesh-work-group-invocations :uint32)
  (max-mesh-work-group-size :uint32 :count 3)
  (max-mesh-total-memory-size :uint32)
  (max-mesh-output-vertices :uint32)
  (max-mesh-output-primitives :uint32)
  (max-mesh-multiview-view-count :uint32)
  (mesh-output-per-vertex-granularity :uint32)
  (mesh-output-per-primitive-granularity :uint32))

(defcstruct (draw-mesh-tasks-indirect-command-nv :class c-draw-mesh-tasks-indirect-command-nv)
  (task-count :uint32)
  (first-task :uint32))

(defcstruct (ray-tracing-shader-group-create-info-nv :class c-ray-tracing-shader-group-create-info-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (type ray-tracing-shader-group-type-khr)
  (general-shader :uint32)
  (closest-hit-shader :uint32)
  (any-hit-shader :uint32)
  (intersection-shader :uint32))

(defcstruct (ray-tracing-shader-group-create-info-khr :class c-ray-tracing-shader-group-create-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (type ray-tracing-shader-group-type-khr)
  (general-shader :uint32)
  (closest-hit-shader :uint32)
  (any-hit-shader :uint32)
  (intersection-shader :uint32)
  (p-shader-group-capture-replay-handle (:pointer :void)))

(defcstruct (ray-tracing-pipeline-create-info-nv :class c-ray-tracing-pipeline-create-info-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags pipeline-create-flags)
  (stage-count :uint32)
  (p-stages (:pointer (:struct pipeline-shader-stage-create-info)))
  (group-count :uint32)
  (p-groups (:pointer (:struct ray-tracing-shader-group-create-info-nv)))
  (max-recursion-depth :uint32)
  (layout pipeline-layout)
  (base-pipeline-handle pipeline)
  (base-pipeline-index :int32))

(defcstruct (pipeline-library-create-info-khr :class c-pipeline-library-create-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (library-count :uint32)
  (p-libraries (:pointer pipeline)))

(defcstruct (ray-tracing-pipeline-interface-create-info-khr :class c-ray-tracing-pipeline-interface-create-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (max-pipeline-ray-payload-size :uint32)
  (max-pipeline-ray-hit-attribute-size :uint32))

(defcstruct (ray-tracing-pipeline-create-info-khr :class c-ray-tracing-pipeline-create-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags pipeline-create-flags)
  (stage-count :uint32)
  (p-stages (:pointer (:struct pipeline-shader-stage-create-info)))
  (group-count :uint32)
  (p-groups (:pointer (:struct ray-tracing-shader-group-create-info-khr)))
  (max-pipeline-ray-recursion-depth :uint32)
  (p-library-info (:pointer (:struct pipeline-library-create-info-khr)))
  (p-library-interface (:pointer
                        (:struct
                         ray-tracing-pipeline-interface-create-info-khr)))
  (p-dynamic-state (:pointer (:struct pipeline-dynamic-state-create-info)))
  (layout pipeline-layout)
  (base-pipeline-handle pipeline)
  (base-pipeline-index :int32))

(defcstruct (geometry-triangles-nv :class c-geometry-triangles-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (vertex-data buffer)
  (vertex-offset device-size)
  (vertex-count :uint32)
  (vertex-stride device-size)
  (vertex-format format)
  (index-data buffer)
  (index-offset device-size)
  (index-count :uint32)
  (index-type index-type)
  (transform-data buffer)
  (transform-offset device-size))

(defcstruct (geometry-aabb-nv :class c-geometry-aabb-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (aabb-data buffer)
  (num-aabbs :uint32)
  (stride :uint32)
  (offset device-size))

(defcstruct (geometry-data-nv :class c-geometry-data-nv)
  (triangles (:struct geometry-triangles-nv))
  (aabbs (:struct geometry-aabb-nv)))

(defcstruct (geometry-nv :class c-geometry-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (geometry-type geometry-type-khr)
  (geometry (:struct geometry-data-nv))
  (flags geometry-flags-khr))

(defcstruct (acceleration-structure-info-nv :class c-acceleration-structure-info-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (type acceleration-structure-type-nv)
  (flags build-acceleration-structure-flags-nv)
  (instance-count :uint32)
  (geometry-count :uint32)
  (p-geometries (:pointer (:struct geometry-nv))))

(defcstruct (acceleration-structure-create-info-nv :class c-acceleration-structure-create-info-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (compacted-size device-size)
  (info (:struct acceleration-structure-info-nv)))

(defcstruct (bind-acceleration-structure-memory-info-nv :class c-bind-acceleration-structure-memory-info-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (acceleration-structure acceleration-structure-nv)
  (memory device-memory)
  (memory-offset device-size)
  (device-index-count :uint32)
  (p-device-indices (:pointer :uint32)))

(defcstruct (write-descriptor-set-acceleration-structure-khr :class c-write-descriptor-set-acceleration-structure-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (acceleration-structure-count :uint32)
  (p-acceleration-structures (:pointer acceleration-structure-khr)))

(defcstruct (write-descriptor-set-acceleration-structure-nv :class c-write-descriptor-set-acceleration-structure-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (acceleration-structure-count :uint32)
  (p-acceleration-structures (:pointer acceleration-structure-nv)))

(defcstruct (acceleration-structure-memory-requirements-info-nv :class c-acceleration-structure-memory-requirements-info-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (type acceleration-structure-memory-requirements-type-nv)
  (acceleration-structure acceleration-structure-nv))

(defcstruct (physical-device-acceleration-structure-features-khr :class c-physical-device-acceleration-structure-features-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (acceleration-structure bool32)
  (acceleration-structure-capture-replay bool32)
  (acceleration-structure-indirect-build bool32)
  (acceleration-structure-host-commands bool32)
  (descriptor-binding-acceleration-structure-update-after-bind bool32))

(defcstruct (physical-device-ray-tracing-pipeline-features-khr :class c-physical-device-ray-tracing-pipeline-features-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (ray-tracing-pipeline bool32)
  (ray-tracing-pipeline-shader-group-handle-capture-replay bool32)
  (ray-tracing-pipeline-shader-group-handle-capture-replay-mixed bool32)
  (ray-tracing-pipeline-trace-rays-indirect bool32)
  (ray-traversal-primitive-culling bool32))

(defcstruct (physical-device-ray-query-features-khr :class c-physical-device-ray-query-features-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (ray-query bool32))

(defcstruct (physical-device-acceleration-structure-properties-khr :class c-physical-device-acceleration-structure-properties-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (max-geometry-count :uint64)
  (max-instance-count :uint64)
  (max-primitive-count :uint64)
  (max-per-stage-descriptor-acceleration-structures :uint32)
  (max-per-stage-descriptor-update-after-bind-acceleration-structures :uint32)
  (max-descriptor-set-acceleration-structures :uint32)
  (max-descriptor-set-update-after-bind-acceleration-structures :uint32)
  (min-acceleration-structure-scratch-offset-alignment :uint32))

(defcstruct (physical-device-ray-tracing-pipeline-properties-khr :class c-physical-device-ray-tracing-pipeline-properties-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (shader-group-handle-size :uint32)
  (max-ray-recursion-depth :uint32)
  (max-shader-group-stride :uint32)
  (shader-group-base-alignment :uint32)
  (shader-group-handle-capture-replay-size :uint32)
  (max-ray-dispatch-invocation-count :uint32)
  (shader-group-handle-alignment :uint32)
  (max-ray-hit-attribute-size :uint32))

(defcstruct (physical-device-ray-tracing-properties-nv :class c-physical-device-ray-tracing-properties-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (shader-group-handle-size :uint32)
  (max-recursion-depth :uint32)
  (max-shader-group-stride :uint32)
  (shader-group-base-alignment :uint32)
  (max-geometry-count :uint64)
  (max-instance-count :uint64)
  (max-triangle-count :uint64)
  (max-descriptor-set-acceleration-structures :uint32))

(defcstruct (strided-device-address-region-khr :class c-strided-device-address-region-khr)
  (device-address device-address)
  (stride device-size)
  (size device-size))

(defcstruct (trace-rays-indirect-command-khr :class c-trace-rays-indirect-command-khr)
  (width :uint32)
  (height :uint32)
  (depth :uint32))

(defcstruct (drm-format-modifier-properties-ext :class c-drm-format-modifier-properties-ext)
  (drm-format-modifier :uint64)
  (drm-format-modifier-plane-count :uint32)
  (drm-format-modifier-tiling-features format-feature-flags))

(defcstruct (drm-format-modifier-properties-list-ext :class c-drm-format-modifier-properties-list-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (drm-format-modifier-count :uint32)
  (p-drm-format-modifier-properties (:pointer
                                     (:struct
                                      drm-format-modifier-properties-ext))))

(defcstruct (physical-device-image-drm-format-modifier-info-ext :class c-physical-device-image-drm-format-modifier-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (drm-format-modifier :uint64)
  (sharing-mode sharing-mode)
  (queue-family-index-count :uint32)
  (p-queue-family-indices (:pointer :uint32)))

(defcstruct (image-drm-format-modifier-list-create-info-ext :class c-image-drm-format-modifier-list-create-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (drm-format-modifier-count :uint32)
  (p-drm-format-modifiers (:pointer :uint64)))

(defcstruct (image-drm-format-modifier-explicit-create-info-ext :class c-image-drm-format-modifier-explicit-create-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (drm-format-modifier :uint64)
  (drm-format-modifier-plane-count :uint32)
  (p-plane-layouts (:pointer (:struct subresource-layout))))

(defcstruct (image-drm-format-modifier-properties-ext :class c-image-drm-format-modifier-properties-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (drm-format-modifier :uint64))

(defcstruct (image-stencil-usage-create-info :class c-image-stencil-usage-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (stencil-usage image-usage-flags))

(defcstruct (image-stencil-usage-create-info-ext :class c-image-stencil-usage-create-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (stencil-usage image-usage-flags))

(defcstruct (device-memory-overallocation-create-info-amd :class c-device-memory-overallocation-create-info-amd)
  (s-type structure-type)
  (p-next (:pointer :void))
  (overallocation-behavior memory-overallocation-behavior-amd))

(defcstruct (physical-device-fragment-density-map-features-ext :class c-physical-device-fragment-density-map-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (fragment-density-map bool32)
  (fragment-density-map-dynamic bool32)
  (fragment-density-map-non-subsampled-images bool32))

(defcstruct (physical-device-fragment-density-map-2-features-ext :class c-physical-device-fragment-density-map-2-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (fragment-density-map-deferred bool32))

(defcstruct (physical-device-fragment-density-map-properties-ext :class c-physical-device-fragment-density-map-properties-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (min-fragment-density-texel-size (:struct extent-2d))
  (max-fragment-density-texel-size (:struct extent-2d))
  (fragment-density-invocations bool32))

(defcstruct (physical-device-fragment-density-map-2-properties-ext :class c-physical-device-fragment-density-map-2-properties-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (subsampled-loads bool32)
  (subsampled-coarse-reconstruction-early-access bool32)
  (max-subsampled-array-layers :uint32)
  (max-descriptor-set-subsampled-samplers :uint32))

(defcstruct (render-pass-fragment-density-map-create-info-ext :class c-render-pass-fragment-density-map-create-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (fragment-density-map-attachment (:struct attachment-reference)))

(defcstruct (physical-device-scalar-block-layout-features :class c-physical-device-scalar-block-layout-features)
  (s-type structure-type)
  (p-next (:pointer :void))
  (scalar-block-layout bool32))

(defcstruct (physical-device-scalar-block-layout-features-ext :class c-physical-device-scalar-block-layout-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (scalar-block-layout bool32))

(defcstruct (surface-protected-capabilities-khr :class c-surface-protected-capabilities-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (supports-protected bool32))

(defcstruct (physical-device-uniform-buffer-standard-layout-features :class c-physical-device-uniform-buffer-standard-layout-features)
  (s-type structure-type)
  (p-next (:pointer :void))
  (uniform-buffer-standard-layout bool32))

(defcstruct (physical-device-uniform-buffer-standard-layout-features-khr :class c-physical-device-uniform-buffer-standard-layout-features-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (uniform-buffer-standard-layout bool32))

(defcstruct (physical-device-depth-clip-enable-features-ext :class c-physical-device-depth-clip-enable-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (depth-clip-enable bool32))

(defcstruct (pipeline-rasterization-depth-clip-state-create-info-ext :class c-pipeline-rasterization-depth-clip-state-create-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags pipeline-rasterization-depth-clip-state-create-flags-ext)
  (depth-clip-enable bool32))

(defcstruct (physical-device-memory-budget-properties-ext :class c-physical-device-memory-budget-properties-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (heap-budget device-size :count 16)
  (heap-usage device-size :count 16))

(defcstruct (physical-device-memory-priority-features-ext :class c-physical-device-memory-priority-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (memory-priority bool32))

(defcstruct (memory-priority-allocate-info-ext :class c-memory-priority-allocate-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (priority :float))

(defcstruct (physical-device-pageable-device-local-memory-features-ext :class c-physical-device-pageable-device-local-memory-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (pageable-device-local-memory bool32))

(defcstruct (physical-device-buffer-device-address-features :class c-physical-device-buffer-device-address-features)
  (s-type structure-type)
  (p-next (:pointer :void))
  (buffer-device-address bool32)
  (buffer-device-address-capture-replay bool32)
  (buffer-device-address-multi-device bool32))

(defcstruct (physical-device-buffer-device-address-features-khr :class c-physical-device-buffer-device-address-features-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (buffer-device-address bool32)
  (buffer-device-address-capture-replay bool32)
  (buffer-device-address-multi-device bool32))

(defcstruct (physical-device-buffer-device-address-features-ext :class c-physical-device-buffer-device-address-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (buffer-device-address bool32)
  (buffer-device-address-capture-replay bool32)
  (buffer-device-address-multi-device bool32))

(defcstruct (physical-device-buffer-address-features-ext :class c-physical-device-buffer-address-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (buffer-device-address bool32)
  (buffer-device-address-capture-replay bool32)
  (buffer-device-address-multi-device bool32))

(defcstruct (buffer-device-address-info :class c-buffer-device-address-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (buffer buffer))

(defcstruct (buffer-device-address-info-ext :class c-buffer-device-address-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (buffer buffer))

(defcstruct (buffer-device-address-info-khr :class c-buffer-device-address-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (buffer buffer))

(defcstruct (buffer-opaque-capture-address-create-info :class c-buffer-opaque-capture-address-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (opaque-capture-address :uint64))

(defcstruct (buffer-opaque-capture-address-create-info-khr :class c-buffer-opaque-capture-address-create-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (opaque-capture-address :uint64))

(defcstruct (buffer-device-address-create-info-ext :class c-buffer-device-address-create-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (device-address device-address))

(defcstruct (physical-device-image-view-image-format-info-ext :class c-physical-device-image-view-image-format-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (image-view-type image-view-type))

(defcstruct (filter-cubic-image-view-image-format-properties-ext :class c-filter-cubic-image-view-image-format-properties-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (filter-cubic bool32)
  (filter-cubic-minmax bool32))

(defcstruct (physical-device-imageless-framebuffer-features :class c-physical-device-imageless-framebuffer-features)
  (s-type structure-type)
  (p-next (:pointer :void))
  (imageless-framebuffer bool32))

(defcstruct (physical-device-imageless-framebuffer-features-khr :class c-physical-device-imageless-framebuffer-features-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (imageless-framebuffer bool32))

(defcstruct (framebuffer-attachment-image-info :class c-framebuffer-attachment-image-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags image-create-flags)
  (usage image-usage-flags)
  (width :uint32)
  (height :uint32)
  (layer-count :uint32)
  (view-format-count :uint32)
  (p-view-formats (:pointer format)))

(defcstruct (framebuffer-attachments-create-info-khr :class c-framebuffer-attachments-create-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (attachment-image-info-count :uint32)
  (p-attachment-image-infos (:pointer
                             (:struct framebuffer-attachment-image-info))))

(defcstruct (framebuffer-attachments-create-info :class c-framebuffer-attachments-create-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (attachment-image-info-count :uint32)
  (p-attachment-image-infos (:pointer
                             (:struct framebuffer-attachment-image-info))))

(defcstruct (render-pass-attachment-begin-info :class c-render-pass-attachment-begin-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (attachment-count :uint32)
  (p-attachments (:pointer image-view)))

(defcstruct (render-pass-attachment-begin-info-khr :class c-render-pass-attachment-begin-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (attachment-count :uint32)
  (p-attachments (:pointer image-view)))

(defcstruct (physical-device-texture-compression-astc-h-d-r-features-ext :class c-physical-device-texture-compression-astc-h-d-r-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (texture-compression-astc_-h-d-r bool32))

(defcstruct (physical-device-cooperative-matrix-features-nv :class c-physical-device-cooperative-matrix-features-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (cooperative-matrix bool32)
  (cooperative-matrix-robust-buffer-access bool32))

(defcstruct (physical-device-cooperative-matrix-properties-nv :class c-physical-device-cooperative-matrix-properties-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (cooperative-matrix-supported-stages shader-stage-flags))

(defcstruct (cooperative-matrix-properties-nv :class c-cooperative-matrix-properties-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (m-size :uint32)
  (n-size :uint32)
  (k-size :uint32)
  (a-type component-type-nv)
  (b-type component-type-nv)
  (c-type component-type-nv)
  (d-type component-type-nv)
  (scope scope-nv))

(defcstruct (physical-device-ycbcr-image-arrays-features-ext :class c-physical-device-ycbcr-image-arrays-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (ycbcr-image-arrays bool32))

(defcstruct (image-view-handle-info-nvx :class c-image-view-handle-info-nvx)
  (s-type structure-type)
  (p-next (:pointer :void))
  (image-view image-view)
  (descriptor-type descriptor-type)
  (sampler sampler))

(defcstruct (image-view-address-properties-nvx :class c-image-view-address-properties-nvx)
  (s-type structure-type)
  (p-next (:pointer :void))
  (device-address device-address)
  (size device-size))

(defcstruct (present-frame-token-ggp :class c-present-frame-token-ggp)
  (s-type structure-type)
  (p-next (:pointer :void))
  (frame-token ggp-frame-token))

(defcstruct (pipeline-creation-feedback-ext :class c-pipeline-creation-feedback-ext)
  (flags pipeline-creation-feedback-flags-ext)
  (duration :uint64))

(defcstruct (pipeline-creation-feedback-create-info-ext :class c-pipeline-creation-feedback-create-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (p-pipeline-creation-feedback (:pointer
                                 (:struct pipeline-creation-feedback-ext)))
  (pipeline-stage-creation-feedback-count :uint32)
  (p-pipeline-stage-creation-feedbacks (:pointer
                                        (:struct
                                         pipeline-creation-feedback-ext))))

(defcstruct (surface-full-screen-exclusive-info-ext :class c-surface-full-screen-exclusive-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (full-screen-exclusive full-screen-exclusive-ext))

(defcstruct (surface-full-screen-exclusive-win32-info-ext :class c-surface-full-screen-exclusive-win32-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (hmonitor hmonitor))

(defcstruct (surface-capabilities-full-screen-exclusive-ext :class c-surface-capabilities-full-screen-exclusive-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (full-screen-exclusive-supported bool32))

(defcstruct (physical-device-performance-query-features-khr :class c-physical-device-performance-query-features-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (performance-counter-query-pools bool32)
  (performance-counter-multiple-query-pools bool32))

(defcstruct (physical-device-performance-query-properties-khr :class c-physical-device-performance-query-properties-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (allow-command-buffer-query-copies bool32))

(defcstruct (performance-counter-khr :class c-performance-counter-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (unit performance-counter-unit-khr)
  (scope performance-counter-scope-khr)
  (storage performance-counter-storage-khr)
  (uuid :uint8 :count 16))

(defcstruct (performance-counter-description-khr :class c-performance-counter-description-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags performance-counter-description-flags-khr)
  (name :char :count 256)
  (category :char :count 256)
  (description :char :count 256))

(defcstruct (query-pool-performance-create-info-khr :class c-query-pool-performance-create-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (queue-family-index :uint32)
  (counter-index-count :uint32)
  (p-counter-indices (:pointer :uint32)))

(defcunion performance-counter-result-khr
  (int-32 :int32)
  (int-64 :int64)
  (uint-32 :uint32)
  (uint-64 :uint64)
  (float-32 :float)
  (float-64 :double))

(defcstruct (acquire-profiling-lock-info-khr :class c-acquire-profiling-lock-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags acquire-profiling-lock-flags-khr)
  (timeout :uint64))

(defcstruct (performance-query-submit-info-khr :class c-performance-query-submit-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (counter-pass-index :uint32))

(defcstruct (headless-surface-create-info-ext :class c-headless-surface-create-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags headless-surface-create-flags-ext))

(defcstruct (physical-device-coverage-reduction-mode-features-nv :class c-physical-device-coverage-reduction-mode-features-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (coverage-reduction-mode bool32))

(defcstruct (pipeline-coverage-reduction-state-create-info-nv :class c-pipeline-coverage-reduction-state-create-info-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags pipeline-coverage-reduction-state-create-flags-nv)
  (coverage-reduction-mode coverage-reduction-mode-nv))

(defcstruct (framebuffer-mixed-samples-combination-nv :class c-framebuffer-mixed-samples-combination-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (coverage-reduction-mode coverage-reduction-mode-nv)
  (rasterization-samples sample-count-flag-bits)
  (depth-stencil-samples sample-count-flags)
  (color-samples sample-count-flags))

(defcstruct (physical-device-shader-integer-functions-2-features-intel :class c-physical-device-shader-integer-functions-2-features-intel)
  (s-type structure-type)
  (p-next (:pointer :void))
  (shader-integer-functions-2 bool32))

(defcunion performance-value-data-intel
  (value-32 :uint32)
  (value-64 :uint64)
  (value-float :float)
  (value-bool bool32)
  (value-string :string))

(defcstruct (performance-value-intel :class c-performance-value-intel)
  (type performance-value-type-intel)
  (data (:union performance-value-data-intel)))

(defcstruct (initialize-performance-api-info-intel :class c-initialize-performance-api-info-intel)
  (s-type structure-type)
  (p-next (:pointer :void))
  (p-user-data (:pointer :void)))

(defcstruct (query-pool-performance-query-create-info-intel :class c-query-pool-performance-query-create-info-intel)
  (s-type structure-type)
  (p-next (:pointer :void))
  (performance-counters-sampling query-pool-sampling-mode-intel))

(defcstruct (query-pool-create-info-intel :class c-query-pool-create-info-intel)
  (s-type structure-type)
  (p-next (:pointer :void))
  (performance-counters-sampling query-pool-sampling-mode-intel))

(defcstruct (performance-marker-info-intel :class c-performance-marker-info-intel)
  (s-type structure-type)
  (p-next (:pointer :void))
  (marker :uint64))

(defcstruct (performance-stream-marker-info-intel :class c-performance-stream-marker-info-intel)
  (s-type structure-type)
  (p-next (:pointer :void))
  (marker :uint32))

(defcstruct (performance-override-info-intel :class c-performance-override-info-intel)
  (s-type structure-type)
  (p-next (:pointer :void))
  (type performance-override-type-intel)
  (enable bool32)
  (parameter :uint64))

(defcstruct (performance-configuration-acquire-info-intel :class c-performance-configuration-acquire-info-intel)
  (s-type structure-type)
  (p-next (:pointer :void))
  (type performance-configuration-type-intel))

(defcstruct (physical-device-shader-clock-features-khr :class c-physical-device-shader-clock-features-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (shader-subgroup-clock bool32)
  (shader-device-clock bool32))

(defcstruct (physical-device-index-type-uint-8-features-ext :class c-physical-device-index-type-uint-8-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (index-type-uint-8 bool32))

(defcstruct (physical-device-shader-s-m-builtins-properties-nv :class c-physical-device-shader-s-m-builtins-properties-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (shader-s-m-count :uint32)
  (shader-warps-per-s-m :uint32))

(defcstruct (physical-device-shader-s-m-builtins-features-nv :class c-physical-device-shader-s-m-builtins-features-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (shader-s-m-builtins bool32))

(defcstruct (physical-device-fragment-shader-interlock-features-ext :class c-physical-device-fragment-shader-interlock-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (fragment-shader-sample-interlock bool32)
  (fragment-shader-pixel-interlock bool32)
  (fragment-shader-shading-rate-interlock bool32))

(defcstruct (physical-device-separate-depth-stencil-layouts-features :class c-physical-device-separate-depth-stencil-layouts-features)
  (s-type structure-type)
  (p-next (:pointer :void))
  (separate-depth-stencil-layouts bool32))

(defcstruct (physical-device-separate-depth-stencil-layouts-features-khr :class c-physical-device-separate-depth-stencil-layouts-features-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (separate-depth-stencil-layouts bool32))

(defcstruct (attachment-reference-stencil-layout :class c-attachment-reference-stencil-layout)
  (s-type structure-type)
  (p-next (:pointer :void))
  (stencil-layout image-layout))

(defcstruct (attachment-reference-stencil-layout-khr :class c-attachment-reference-stencil-layout-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (stencil-layout image-layout))

(defcstruct (physical-device-primitive-topology-list-restart-features-ext :class c-physical-device-primitive-topology-list-restart-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (primitive-topology-list-restart bool32)
  (primitive-topology-patch-list-restart bool32))

(defcstruct (attachment-description-stencil-layout :class c-attachment-description-stencil-layout)
  (s-type structure-type)
  (p-next (:pointer :void))
  (stencil-initial-layout image-layout)
  (stencil-final-layout image-layout))

(defcstruct (attachment-description-stencil-layout-khr :class c-attachment-description-stencil-layout-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (stencil-initial-layout image-layout)
  (stencil-final-layout image-layout))

(defcstruct (physical-device-pipeline-executable-properties-features-khr :class c-physical-device-pipeline-executable-properties-features-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (pipeline-executable-info bool32))

(defcstruct (pipeline-info-khr :class c-pipeline-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (pipeline pipeline))

(defcstruct (pipeline-executable-properties-khr :class c-pipeline-executable-properties-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (stages shader-stage-flags)
  (name :char :count 256)
  (description :char :count 256)
  (subgroup-size :uint32))

(defcstruct (pipeline-executable-info-khr :class c-pipeline-executable-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (pipeline pipeline)
  (executable-index :uint32))

(defcunion pipeline-executable-statistic-value-khr
  (b32 bool32)
  (i64 :int64)
  (u64 :uint64)
  (f64 :double))

(defcstruct (pipeline-executable-statistic-khr :class c-pipeline-executable-statistic-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (name :char :count 256)
  (description :char :count 256)
  (format pipeline-executable-statistic-format-khr)
  (value (:union pipeline-executable-statistic-value-khr)))

(defcstruct (pipeline-executable-internal-representation-khr :class c-pipeline-executable-internal-representation-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (name :char :count 256)
  (description :char :count 256)
  (is-text bool32)
  (data-size :size)
  (p-data (:pointer :void)))

(defcstruct (physical-device-shader-demote-to-helper-invocation-features-ext :class c-physical-device-shader-demote-to-helper-invocation-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (shader-demote-to-helper-invocation bool32))

(defcstruct (physical-device-texel-buffer-alignment-features-ext :class c-physical-device-texel-buffer-alignment-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (texel-buffer-alignment bool32))

(defcstruct (physical-device-texel-buffer-alignment-properties-ext :class c-physical-device-texel-buffer-alignment-properties-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (storage-texel-buffer-offset-alignment-bytes device-size)
  (storage-texel-buffer-offset-single-texel-alignment bool32)
  (uniform-texel-buffer-offset-alignment-bytes device-size)
  (uniform-texel-buffer-offset-single-texel-alignment bool32))

(defcstruct (physical-device-subgroup-size-control-features-ext :class c-physical-device-subgroup-size-control-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (subgroup-size-control bool32)
  (compute-full-subgroups bool32))

(defcstruct (physical-device-subgroup-size-control-properties-ext :class c-physical-device-subgroup-size-control-properties-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (min-subgroup-size :uint32)
  (max-subgroup-size :uint32)
  (max-compute-workgroup-subgroups :uint32)
  (required-subgroup-size-stages shader-stage-flags))

(defcstruct (pipeline-shader-stage-required-subgroup-size-create-info-ext :class c-pipeline-shader-stage-required-subgroup-size-create-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (required-subgroup-size :uint32))

(defcstruct (subpass-shading-pipeline-create-info-huawei :class c-subpass-shading-pipeline-create-info-huawei)
  (s-type structure-type)
  (p-next (:pointer :void))
  (render-pass render-pass)
  (subpass :uint32))

(defcstruct (physical-device-subpass-shading-properties-huawei :class c-physical-device-subpass-shading-properties-huawei)
  (s-type structure-type)
  (p-next (:pointer :void))
  (max-subpass-shading-workgroup-size-aspect-ratio :uint32))

(defcstruct (memory-opaque-capture-address-allocate-info :class c-memory-opaque-capture-address-allocate-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (opaque-capture-address :uint64))

(defcstruct (memory-opaque-capture-address-allocate-info-khr :class c-memory-opaque-capture-address-allocate-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (opaque-capture-address :uint64))

(defcstruct (device-memory-opaque-capture-address-info :class c-device-memory-opaque-capture-address-info)
  (s-type structure-type)
  (p-next (:pointer :void))
  (memory device-memory))

(defcstruct (device-memory-opaque-capture-address-info-khr :class c-device-memory-opaque-capture-address-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (memory device-memory))

(defcstruct (physical-device-line-rasterization-features-ext :class c-physical-device-line-rasterization-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (rectangular-lines bool32)
  (bresenham-lines bool32)
  (smooth-lines bool32)
  (stippled-rectangular-lines bool32)
  (stippled-bresenham-lines bool32)
  (stippled-smooth-lines bool32))

(defcstruct (physical-device-line-rasterization-properties-ext :class c-physical-device-line-rasterization-properties-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (line-sub-pixel-precision-bits :uint32))

(defcstruct (pipeline-rasterization-line-state-create-info-ext :class c-pipeline-rasterization-line-state-create-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (line-rasterization-mode line-rasterization-mode-ext)
  (stippled-line-enable bool32)
  (line-stipple-factor :uint32)
  (line-stipple-pattern :uint16))

(defcstruct (physical-device-pipeline-creation-cache-control-features-ext :class c-physical-device-pipeline-creation-cache-control-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (pipeline-creation-cache-control bool32))

(defcstruct (physical-device-vulkan-1-1-features :class c-physical-device-vulkan-1-1-features)
  (s-type structure-type)
  (p-next (:pointer :void))
  (storage-buffer-16-bit-access bool32)
  (uniform-and-storage-buffer-16-bit-access bool32)
  (storage-push-constant-16 bool32)
  (storage-input-output-16 bool32)
  (multiview bool32)
  (multiview-geometry-shader bool32)
  (multiview-tessellation-shader bool32)
  (variable-pointers-storage-buffer bool32)
  (variable-pointers bool32)
  (protected-memory bool32)
  (sampler-ycbcr-conversion bool32)
  (shader-draw-parameters bool32))

(defcstruct (physical-device-vulkan-1-1-properties :class c-physical-device-vulkan-1-1-properties)
  (s-type structure-type)
  (p-next (:pointer :void))
  (device-uuid :uint8 :count 16)
  (driver-uuid :uint8 :count 16)
  (device-luid :uint8 :count 8)
  (device-node-mask :uint32)
  (device-luid-valid bool32)
  (subgroup-size :uint32)
  (subgroup-supported-stages shader-stage-flags)
  (subgroup-supported-operations subgroup-feature-flags)
  (subgroup-quad-operations-in-all-stages bool32)
  (point-clipping-behavior point-clipping-behavior)
  (max-multiview-view-count :uint32)
  (max-multiview-instance-index :uint32)
  (protected-no-fault bool32)
  (max-per-set-descriptors :uint32)
  (max-memory-allocation-size device-size))

(defcstruct (physical-device-vulkan-1-2-features :class c-physical-device-vulkan-1-2-features)
  (s-type structure-type)
  (p-next (:pointer :void))
  (sampler-mirror-clamp-to-edge bool32)
  (draw-indirect-count bool32)
  (storage-buffer-8-bit-access bool32)
  (uniform-and-storage-buffer-8-bit-access bool32)
  (storage-push-constant-8 bool32)
  (shader-buffer-int-64-atomics bool32)
  (shader-shared-int-64-atomics bool32)
  (shader-float-16 bool32)
  (shader-int-8 bool32)
  (descriptor-indexing bool32)
  (shader-input-attachment-array-dynamic-indexing bool32)
  (shader-uniform-texel-buffer-array-dynamic-indexing bool32)
  (shader-storage-texel-buffer-array-dynamic-indexing bool32)
  (shader-uniform-buffer-array-non-uniform-indexing bool32)
  (shader-sampled-image-array-non-uniform-indexing bool32)
  (shader-storage-buffer-array-non-uniform-indexing bool32)
  (shader-storage-image-array-non-uniform-indexing bool32)
  (shader-input-attachment-array-non-uniform-indexing bool32)
  (shader-uniform-texel-buffer-array-non-uniform-indexing bool32)
  (shader-storage-texel-buffer-array-non-uniform-indexing bool32)
  (descriptor-binding-uniform-buffer-update-after-bind bool32)
  (descriptor-binding-sampled-image-update-after-bind bool32)
  (descriptor-binding-storage-image-update-after-bind bool32)
  (descriptor-binding-storage-buffer-update-after-bind bool32)
  (descriptor-binding-uniform-texel-buffer-update-after-bind bool32)
  (descriptor-binding-storage-texel-buffer-update-after-bind bool32)
  (descriptor-binding-update-unused-while-pending bool32)
  (descriptor-binding-partially-bound bool32)
  (descriptor-binding-variable-descriptor-count bool32)
  (runtime-descriptor-array bool32)
  (sampler-filter-minmax bool32)
  (scalar-block-layout bool32)
  (imageless-framebuffer bool32)
  (uniform-buffer-standard-layout bool32)
  (shader-subgroup-extended-types bool32)
  (separate-depth-stencil-layouts bool32)
  (host-query-reset bool32)
  (timeline-semaphore bool32)
  (buffer-device-address bool32)
  (buffer-device-address-capture-replay bool32)
  (buffer-device-address-multi-device bool32)
  (vulkan-memory-model bool32)
  (vulkan-memory-model-device-scope bool32)
  (vulkan-memory-model-availability-visibility-chains bool32)
  (shader-output-viewport-index bool32)
  (shader-output-layer bool32)
  (subgroup-broadcast-dynamic-id bool32))

(defcstruct (physical-device-vulkan-1-2-properties :class c-physical-device-vulkan-1-2-properties)
  (s-type structure-type)
  (p-next (:pointer :void))
  (driver-id driver-id)
  (driver-name :char :count 256)
  (driver-info :char :count 256)
  (conformance-version (:struct conformance-version))
  (denorm-behavior-independence shader-float-controls-independence)
  (rounding-mode-independence shader-float-controls-independence)
  (shader-signed-zero-inf-nan-preserve-float-16 bool32)
  (shader-signed-zero-inf-nan-preserve-float-32 bool32)
  (shader-signed-zero-inf-nan-preserve-float-64 bool32)
  (shader-denorm-preserve-float-16 bool32)
  (shader-denorm-preserve-float-32 bool32)
  (shader-denorm-preserve-float-64 bool32)
  (shader-denorm-flush-to-zero-float-16 bool32)
  (shader-denorm-flush-to-zero-float-32 bool32)
  (shader-denorm-flush-to-zero-float-64 bool32)
  (shader-rounding-mode-rte-float-16 bool32)
  (shader-rounding-mode-rte-float-32 bool32)
  (shader-rounding-mode-rte-float-64 bool32)
  (shader-rounding-mode-rtz-float-16 bool32)
  (shader-rounding-mode-rtz-float-32 bool32)
  (shader-rounding-mode-rtz-float-64 bool32)
  (max-update-after-bind-descriptors-in-all-pools :uint32)
  (shader-uniform-buffer-array-non-uniform-indexing-native bool32)
  (shader-sampled-image-array-non-uniform-indexing-native bool32)
  (shader-storage-buffer-array-non-uniform-indexing-native bool32)
  (shader-storage-image-array-non-uniform-indexing-native bool32)
  (shader-input-attachment-array-non-uniform-indexing-native bool32)
  (robust-buffer-access-update-after-bind bool32)
  (quad-divergent-implicit-lod bool32)
  (max-per-stage-descriptor-update-after-bind-samplers :uint32)
  (max-per-stage-descriptor-update-after-bind-uniform-buffers :uint32)
  (max-per-stage-descriptor-update-after-bind-storage-buffers :uint32)
  (max-per-stage-descriptor-update-after-bind-sampled-images :uint32)
  (max-per-stage-descriptor-update-after-bind-storage-images :uint32)
  (max-per-stage-descriptor-update-after-bind-input-attachments :uint32)
  (max-per-stage-update-after-bind-resources :uint32)
  (max-descriptor-set-update-after-bind-samplers :uint32)
  (max-descriptor-set-update-after-bind-uniform-buffers :uint32)
  (max-descriptor-set-update-after-bind-uniform-buffers-dynamic :uint32)
  (max-descriptor-set-update-after-bind-storage-buffers :uint32)
  (max-descriptor-set-update-after-bind-storage-buffers-dynamic :uint32)
  (max-descriptor-set-update-after-bind-sampled-images :uint32)
  (max-descriptor-set-update-after-bind-storage-images :uint32)
  (max-descriptor-set-update-after-bind-input-attachments :uint32)
  (supported-depth-resolve-modes resolve-mode-flags)
  (supported-stencil-resolve-modes resolve-mode-flags)
  (independent-resolve-none bool32)
  (independent-resolve bool32)
  (filter-minmax-single-component-formats bool32)
  (filter-minmax-image-component-mapping bool32)
  (max-timeline-semaphore-value-difference :uint64)
  (framebuffer-integer-color-sample-counts sample-count-flags))

(defcstruct (pipeline-compiler-control-create-info-amd :class c-pipeline-compiler-control-create-info-amd)
  (s-type structure-type)
  (p-next (:pointer :void))
  (compiler-control-flags pipeline-compiler-control-flags-amd))

(defcstruct (physical-device-coherent-memory-features-amd :class c-physical-device-coherent-memory-features-amd)
  (s-type structure-type)
  (p-next (:pointer :void))
  (device-coherent-memory bool32))

(defcstruct (physical-device-tool-properties-ext :class c-physical-device-tool-properties-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (name :char :count 256)
  (version :char :count 256)
  (purposes tool-purpose-flags-ext)
  (description :char :count 256)
  (layer :char :count 256))

(defcstruct (sampler-custom-border-color-create-info-ext :class c-sampler-custom-border-color-create-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (custom-border-color (:union clear-color-value))
  (format format))

(defcstruct (physical-device-custom-border-color-properties-ext :class c-physical-device-custom-border-color-properties-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (max-custom-border-color-samplers :uint32))

(defcstruct (physical-device-custom-border-color-features-ext :class c-physical-device-custom-border-color-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (custom-border-colors bool32)
  (custom-border-color-without-format bool32))

(defcstruct (sampler-border-color-component-mapping-create-info-ext :class c-sampler-border-color-component-mapping-create-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (components (:struct component-mapping))
  (srgb bool32))

(defcstruct (physical-device-border-color-swizzle-features-ext :class c-physical-device-border-color-swizzle-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (border-color-swizzle bool32)
  (border-color-swizzle-from-image bool32))

(defcunion device-or-host-address-khr
  (device-address device-address)
  (host-address (:pointer :void)))

(defcunion device-or-host-address-const-khr
  (device-address device-address)
  (host-address (:pointer :void)))

(defcstruct (acceleration-structure-geometry-triangles-data-khr :class c-acceleration-structure-geometry-triangles-data-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (vertex-format format)
  (vertex-data (:union device-or-host-address-const-khr))
  (vertex-stride device-size)
  (max-vertex :uint32)
  (index-type index-type)
  (index-data (:union device-or-host-address-const-khr))
  (transform-data (:union device-or-host-address-const-khr)))

(defcstruct (acceleration-structure-geometry-aabbs-data-khr :class c-acceleration-structure-geometry-aabbs-data-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (data (:union device-or-host-address-const-khr))
  (stride device-size))

(defcstruct (acceleration-structure-geometry-instances-data-khr :class c-acceleration-structure-geometry-instances-data-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (array-of-pointers bool32)
  (data (:union device-or-host-address-const-khr)))

(defcunion acceleration-structure-geometry-data-khr
  (triangles (:struct acceleration-structure-geometry-triangles-data-khr))
  (aabbs (:struct acceleration-structure-geometry-aabbs-data-khr))
  (instances (:struct acceleration-structure-geometry-instances-data-khr)))

(defcstruct (acceleration-structure-geometry-khr :class c-acceleration-structure-geometry-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (geometry-type geometry-type-khr)
  (geometry (:union acceleration-structure-geometry-data-khr))
  (flags geometry-flags-khr))

(defcstruct (acceleration-structure-build-geometry-info-khr :class c-acceleration-structure-build-geometry-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (type acceleration-structure-type-khr)
  (flags build-acceleration-structure-flags-khr)
  (mode build-acceleration-structure-mode-khr)
  (src-acceleration-structure acceleration-structure-khr)
  (dst-acceleration-structure acceleration-structure-khr)
  (geometry-count :uint32)
  (p-geometries (:pointer (:struct acceleration-structure-geometry-khr)))
  (pp-geometries (:pointer
                  (:pointer (:struct acceleration-structure-geometry-khr))))
  (scratch-data (:union device-or-host-address-khr)))

(defcstruct (acceleration-structure-build-range-info-khr :class c-acceleration-structure-build-range-info-khr)
  (primitive-count :uint32)
  (primitive-offset :uint32)
  (first-vertex :uint32)
  (transform-offset :uint32))

(defcstruct (acceleration-structure-create-info-khr :class c-acceleration-structure-create-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (create-flags acceleration-structure-create-flags-khr)
  (buffer buffer)
  (offset device-size)
  (size device-size)
  (type acceleration-structure-type-khr)
  (device-address device-address))

(defcstruct (aabb-positions-khr :class c-aabb-positions-khr)
  (min-x :float)
  (min-y :float)
  (min-z :float)
  (max-x :float)
  (max-y :float)
  (max-z :float))

(defcstruct (aabb-positions-nv :class c-aabb-positions-nv)
  (min-x :float)
  (min-y :float)
  (min-z :float)
  (max-x :float)
  (max-y :float)
  (max-z :float))

(defcstruct (transform-matrix-khr :class c-transform-matrix-khr)
  (matrix :float :count 12))

(defcstruct (transform-matrix-nv :class c-transform-matrix-nv)
  (matrix :float :count 12))

(defcstruct (acceleration-structure-instance-khr :class c-acceleration-structure-instance-khr)
  (transform (:struct transform-matrix-khr))
  (instance-custom-index-and-mask :uint32)
  (instance-shader-binding-table-record-offset-and-flags :uint32)
  (acceleration-structure-reference :uint64))

(defcstruct (acceleration-structure-instance-nv :class c-acceleration-structure-instance-nv)
  (transform (:struct transform-matrix-khr))
  (instance-custom-index-and-mask :uint32)
  (instance-shader-binding-table-record-offset-and-flags :uint32)
  (acceleration-structure-reference :uint64))

(defcstruct (acceleration-structure-device-address-info-khr :class c-acceleration-structure-device-address-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (acceleration-structure acceleration-structure-khr))

(defcstruct (acceleration-structure-version-info-khr :class c-acceleration-structure-version-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (p-version-data (:pointer :uint8)))

(defcstruct (copy-acceleration-structure-info-khr :class c-copy-acceleration-structure-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (src acceleration-structure-khr)
  (dst acceleration-structure-khr)
  (mode copy-acceleration-structure-mode-khr))

(defcstruct (copy-acceleration-structure-to-memory-info-khr :class c-copy-acceleration-structure-to-memory-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (src acceleration-structure-khr)
  (dst (:union device-or-host-address-khr))
  (mode copy-acceleration-structure-mode-khr))

(defcstruct (copy-memory-to-acceleration-structure-info-khr :class c-copy-memory-to-acceleration-structure-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (src (:union device-or-host-address-const-khr))
  (dst acceleration-structure-khr)
  (mode copy-acceleration-structure-mode-khr))

(defcstruct (physical-device-extended-dynamic-state-features-ext :class c-physical-device-extended-dynamic-state-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (extended-dynamic-state bool32))

(defcstruct (physical-device-extended-dynamic-state-2-features-ext :class c-physical-device-extended-dynamic-state-2-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (extended-dynamic-state-2 bool32)
  (extended-dynamic-state-2-logic-op bool32)
  (extended-dynamic-state-2-patch-control-points bool32))

(defcstruct (render-pass-transform-begin-info-qcom :class c-render-pass-transform-begin-info-qcom)
  (s-type structure-type)
  (p-next (:pointer :void))
  (transform surface-transform-flag-bits-khr))

(defcstruct (copy-command-transform-info-qcom :class c-copy-command-transform-info-qcom)
  (s-type structure-type)
  (p-next (:pointer :void))
  (transform surface-transform-flag-bits-khr))

(defcstruct (command-buffer-inheritance-render-pass-transform-info-qcom :class c-command-buffer-inheritance-render-pass-transform-info-qcom)
  (s-type structure-type)
  (p-next (:pointer :void))
  (transform surface-transform-flag-bits-khr)
  (render-area (:struct rect-2d)))

(defcstruct (physical-device-diagnostics-config-features-nv :class c-physical-device-diagnostics-config-features-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (diagnostics-config bool32))

(defcstruct (device-diagnostics-config-create-info-nv :class c-device-diagnostics-config-create-info-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags device-diagnostics-config-flags-nv))

(defcstruct (physical-device-zero-initialize-workgroup-memory-features-khr :class c-physical-device-zero-initialize-workgroup-memory-features-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (shader-zero-initialize-workgroup-memory bool32))

(defcstruct (physical-device-shader-subgroup-uniform-control-flow-features-khr :class c-physical-device-shader-subgroup-uniform-control-flow-features-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (shader-subgroup-uniform-control-flow bool32))

(defcstruct (physical-device-robustness-2-features-ext :class c-physical-device-robustness-2-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (robust-buffer-access-2 bool32)
  (robust-image-access-2 bool32)
  (null-descriptor bool32))

(defcstruct (physical-device-robustness-2-properties-ext :class c-physical-device-robustness-2-properties-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (robust-storage-buffer-access-size-alignment device-size)
  (robust-uniform-buffer-access-size-alignment device-size))

(defcstruct (physical-device-image-robustness-features-ext :class c-physical-device-image-robustness-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (robust-image-access bool32))

(defcstruct (physical-device-workgroup-memory-explicit-layout-features-khr :class c-physical-device-workgroup-memory-explicit-layout-features-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (workgroup-memory-explicit-layout bool32)
  (workgroup-memory-explicit-layout-scalar-block-layout bool32)
  (workgroup-memory-explicit-layout-8-bit-access bool32)
  (workgroup-memory-explicit-layout-16-bit-access bool32))

(defcstruct (physical-device-portability-subset-features-khr :class c-physical-device-portability-subset-features-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (constant-alpha-color-blend-factors bool32)
  (events bool32)
  (image-view-format-reinterpretation bool32)
  (image-view-format-swizzle bool32)
  (image-view-2d-on-3d-image bool32)
  (multisample-array-image bool32)
  (mutable-comparison-samplers bool32)
  (point-polygons bool32)
  (sampler-mip-lod-bias bool32)
  (separate-stencil-mask-ref bool32)
  (shader-sample-rate-interpolation-functions bool32)
  (tessellation-isolines bool32)
  (tessellation-point-mode bool32)
  (triangle-fans bool32)
  (vertex-attribute-access-beyond-stride bool32))

(defcstruct (physical-device-portability-subset-properties-khr :class c-physical-device-portability-subset-properties-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (min-vertex-input-binding-stride-alignment :uint32))

(defcstruct (physical-device-4444-formats-features-ext :class c-physical-device-4444-formats-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (format-a4r4g4b4 bool32)
  (format-a4b4g4r4 bool32))

(defcstruct (physical-device-subpass-shading-features-huawei :class c-physical-device-subpass-shading-features-huawei)
  (s-type structure-type)
  (p-next (:pointer :void))
  (subpass-shading bool32))

(defcstruct (buffer-copy-2-khr :class c-buffer-copy-2-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (src-offset device-size)
  (dst-offset device-size)
  (size device-size))

(defcstruct (image-copy-2-khr :class c-image-copy-2-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (src-subresource (:struct image-subresource-layers))
  (src-offset (:struct offset-3d))
  (dst-subresource (:struct image-subresource-layers))
  (dst-offset (:struct offset-3d))
  (extent (:struct extent-3d)))

(defcstruct (image-blit-2-khr :class c-image-blit-2-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (src-subresource (:struct image-subresource-layers))
  (src-offsets (:struct offset-3d) :count 2)
  (dst-subresource (:struct image-subresource-layers))
  (dst-offsets (:struct offset-3d) :count 2))

(defcstruct (buffer-image-copy-2-khr :class c-buffer-image-copy-2-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (buffer-offset device-size)
  (buffer-row-length :uint32)
  (buffer-image-height :uint32)
  (image-subresource (:struct image-subresource-layers))
  (image-offset (:struct offset-3d))
  (image-extent (:struct extent-3d)))

(defcstruct (image-resolve-2-khr :class c-image-resolve-2-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (src-subresource (:struct image-subresource-layers))
  (src-offset (:struct offset-3d))
  (dst-subresource (:struct image-subresource-layers))
  (dst-offset (:struct offset-3d))
  (extent (:struct extent-3d)))

(defcstruct (copy-buffer-info-2-khr :class c-copy-buffer-info-2-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (src-buffer buffer)
  (dst-buffer buffer)
  (region-count :uint32)
  (p-regions (:pointer (:struct buffer-copy-2-khr))))

(defcstruct (copy-image-info-2-khr :class c-copy-image-info-2-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (src-image image)
  (src-image-layout image-layout)
  (dst-image image)
  (dst-image-layout image-layout)
  (region-count :uint32)
  (p-regions (:pointer (:struct image-copy-2-khr))))

(defcstruct (blit-image-info-2-khr :class c-blit-image-info-2-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (src-image image)
  (src-image-layout image-layout)
  (dst-image image)
  (dst-image-layout image-layout)
  (region-count :uint32)
  (p-regions (:pointer (:struct image-blit-2-khr)))
  (filter filter))

(defcstruct (copy-buffer-to-image-info-2-khr :class c-copy-buffer-to-image-info-2-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (src-buffer buffer)
  (dst-image image)
  (dst-image-layout image-layout)
  (region-count :uint32)
  (p-regions (:pointer (:struct buffer-image-copy-2-khr))))

(defcstruct (copy-image-to-buffer-info-2-khr :class c-copy-image-to-buffer-info-2-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (src-image image)
  (src-image-layout image-layout)
  (dst-buffer buffer)
  (region-count :uint32)
  (p-regions (:pointer (:struct buffer-image-copy-2-khr))))

(defcstruct (resolve-image-info-2-khr :class c-resolve-image-info-2-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (src-image image)
  (src-image-layout image-layout)
  (dst-image image)
  (dst-image-layout image-layout)
  (region-count :uint32)
  (p-regions (:pointer (:struct image-resolve-2-khr))))

(defcstruct (physical-device-shader-image-atomic-int-64-features-ext :class c-physical-device-shader-image-atomic-int-64-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (shader-image-int-64-atomics bool32)
  (sparse-image-int-64-atomics bool32))

(defcstruct (fragment-shading-rate-attachment-info-khr :class c-fragment-shading-rate-attachment-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (p-fragment-shading-rate-attachment (:pointer
                                       (:struct attachment-reference-2)))
  (shading-rate-attachment-texel-size (:struct extent-2d)))

(defcstruct (pipeline-fragment-shading-rate-state-create-info-khr :class c-pipeline-fragment-shading-rate-state-create-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (fragment-size (:struct extent-2d))
  (combiner-ops fragment-shading-rate-combiner-op-khr :count 2))

(defcstruct (physical-device-fragment-shading-rate-features-khr :class c-physical-device-fragment-shading-rate-features-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (pipeline-fragment-shading-rate bool32)
  (primitive-fragment-shading-rate bool32)
  (attachment-fragment-shading-rate bool32))

(defcstruct (physical-device-fragment-shading-rate-properties-khr :class c-physical-device-fragment-shading-rate-properties-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (min-fragment-shading-rate-attachment-texel-size (:struct extent-2d))
  (max-fragment-shading-rate-attachment-texel-size (:struct extent-2d))
  (max-fragment-shading-rate-attachment-texel-size-aspect-ratio :uint32)
  (primitive-fragment-shading-rate-with-multiple-viewports bool32)
  (layered-shading-rate-attachments bool32)
  (fragment-shading-rate-non-trivial-combiner-ops bool32)
  (max-fragment-size (:struct extent-2d))
  (max-fragment-size-aspect-ratio :uint32)
  (max-fragment-shading-rate-coverage-samples :uint32)
  (max-fragment-shading-rate-rasterization-samples sample-count-flag-bits)
  (fragment-shading-rate-with-shader-depth-stencil-writes bool32)
  (fragment-shading-rate-with-sample-mask bool32)
  (fragment-shading-rate-with-shader-sample-mask bool32)
  (fragment-shading-rate-with-conservative-rasterization bool32)
  (fragment-shading-rate-with-fragment-shader-interlock bool32)
  (fragment-shading-rate-with-custom-sample-locations bool32)
  (fragment-shading-rate-strict-multiply-combiner bool32))

(defcstruct (physical-device-fragment-shading-rate-khr :class c-physical-device-fragment-shading-rate-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (sample-counts sample-count-flags)
  (fragment-size (:struct extent-2d)))

(defcstruct (physical-device-shader-terminate-invocation-features-khr :class c-physical-device-shader-terminate-invocation-features-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (shader-terminate-invocation bool32))

(defcstruct (physical-device-fragment-shading-rate-enums-features-nv :class c-physical-device-fragment-shading-rate-enums-features-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (fragment-shading-rate-enums bool32)
  (supersample-fragment-shading-rates bool32)
  (no-invocation-fragment-shading-rates bool32))

(defcstruct (physical-device-fragment-shading-rate-enums-properties-nv :class c-physical-device-fragment-shading-rate-enums-properties-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (max-fragment-shading-rate-invocation-count sample-count-flag-bits))

(defcstruct (pipeline-fragment-shading-rate-enum-state-create-info-nv :class c-pipeline-fragment-shading-rate-enum-state-create-info-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (shading-rate-type fragment-shading-rate-type-nv)
  (shading-rate fragment-shading-rate-nv)
  (combiner-ops fragment-shading-rate-combiner-op-khr :count 2))

(defcstruct (acceleration-structure-build-sizes-info-khr :class c-acceleration-structure-build-sizes-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (acceleration-structure-size device-size)
  (update-scratch-size device-size)
  (build-scratch-size device-size))

(defcstruct (physical-device-mutable-descriptor-type-features-valve :class c-physical-device-mutable-descriptor-type-features-valve)
  (s-type structure-type)
  (p-next (:pointer :void))
  (mutable-descriptor-type bool32))

(defcstruct (mutable-descriptor-type-list-valve :class c-mutable-descriptor-type-list-valve)
  (descriptor-type-count :uint32)
  (p-descriptor-types (:pointer descriptor-type)))

(defcstruct (mutable-descriptor-type-create-info-valve :class c-mutable-descriptor-type-create-info-valve)
  (s-type structure-type)
  (p-next (:pointer :void))
  (mutable-descriptor-type-list-count :uint32)
  (p-mutable-descriptor-type-lists (:pointer
                                    (:struct
                                     mutable-descriptor-type-list-valve))))

(defcstruct (physical-device-vertex-input-dynamic-state-features-ext :class c-physical-device-vertex-input-dynamic-state-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (vertex-input-dynamic-state bool32))

(defcstruct (physical-device-external-memory-r-d-m-a-features-nv :class c-physical-device-external-memory-r-d-m-a-features-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (external-memory-r-d-m-a bool32))

(defcstruct (vertex-input-binding-description-2-ext :class c-vertex-input-binding-description-2-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (binding :uint32)
  (stride :uint32)
  (input-rate vertex-input-rate)
  (divisor :uint32))

(defcstruct (vertex-input-attribute-description-2-ext :class c-vertex-input-attribute-description-2-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (location :uint32)
  (binding :uint32)
  (format format)
  (offset :uint32))

(defcstruct (physical-device-color-write-enable-features-ext :class c-physical-device-color-write-enable-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (color-write-enable bool32))

(defcstruct (pipeline-color-write-create-info-ext :class c-pipeline-color-write-create-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (attachment-count :uint32)
  (p-color-write-enables (:pointer bool32)))

(defcstruct (memory-barrier-2-khr :class c-memory-barrier-2-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (src-stage-mask pipeline-stage-flags-2-khr)
  (src-access-mask access-flags-2-khr)
  (dst-stage-mask pipeline-stage-flags-2-khr)
  (dst-access-mask access-flags-2-khr))

(defcstruct (image-memory-barrier-2-khr :class c-image-memory-barrier-2-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (src-stage-mask pipeline-stage-flags-2-khr)
  (src-access-mask access-flags-2-khr)
  (dst-stage-mask pipeline-stage-flags-2-khr)
  (dst-access-mask access-flags-2-khr)
  (old-layout image-layout)
  (new-layout image-layout)
  (src-queue-family-index :uint32)
  (dst-queue-family-index :uint32)
  (image image)
  (subresource-range (:struct image-subresource-range)))

(defcstruct (buffer-memory-barrier-2-khr :class c-buffer-memory-barrier-2-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (src-stage-mask pipeline-stage-flags-2-khr)
  (src-access-mask access-flags-2-khr)
  (dst-stage-mask pipeline-stage-flags-2-khr)
  (dst-access-mask access-flags-2-khr)
  (src-queue-family-index :uint32)
  (dst-queue-family-index :uint32)
  (buffer buffer)
  (offset device-size)
  (size device-size))

(defcstruct (dependency-info-khr :class c-dependency-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (dependency-flags dependency-flags)
  (memory-barrier-count :uint32)
  (p-memory-barriers (:pointer (:struct memory-barrier-2-khr)))
  (buffer-memory-barrier-count :uint32)
  (p-buffer-memory-barriers (:pointer (:struct buffer-memory-barrier-2-khr)))
  (image-memory-barrier-count :uint32)
  (p-image-memory-barriers (:pointer (:struct image-memory-barrier-2-khr))))

(defcstruct (semaphore-submit-info-khr :class c-semaphore-submit-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (semaphore semaphore)
  (value :uint64)
  (stage-mask pipeline-stage-flags-2-khr)
  (device-index :uint32))

(defcstruct (command-buffer-submit-info-khr :class c-command-buffer-submit-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (command-buffer command-buffer)
  (device-mask :uint32))

(defcstruct (submit-info-2-khr :class c-submit-info-2-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags submit-flags-khr)
  (wait-semaphore-info-count :uint32)
  (p-wait-semaphore-infos (:pointer (:struct semaphore-submit-info-khr)))
  (command-buffer-info-count :uint32)
  (p-command-buffer-infos (:pointer (:struct command-buffer-submit-info-khr)))
  (signal-semaphore-info-count :uint32)
  (p-signal-semaphore-infos (:pointer (:struct semaphore-submit-info-khr))))

(defcstruct (queue-family-checkpoint-properties-2-nv :class c-queue-family-checkpoint-properties-2-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (checkpoint-execution-stage-mask pipeline-stage-flags-2-khr))

(defcstruct (checkpoint-data-2-nv :class c-checkpoint-data-2-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (stage pipeline-stage-flags-2-khr)
  (p-checkpoint-marker (:pointer :void)))

(defcstruct (physical-device-synchronization-2-features-khr :class c-physical-device-synchronization-2-features-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (synchronization-2 bool32))

(defcstruct (video-queue-family-properties-2-khr :class c-video-queue-family-properties-2-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (video-codec-operations video-codec-operation-flags-khr))

(defcstruct (video-profile-khr :class c-video-profile-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (video-codec-operation video-codec-operation-flag-bits-khr)
  (chroma-subsampling video-chroma-subsampling-flags-khr)
  (luma-bit-depth video-component-bit-depth-flags-khr)
  (chroma-bit-depth video-component-bit-depth-flags-khr))

(defcstruct (video-profiles-khr :class c-video-profiles-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (profile-count :uint32)
  (p-profiles (:pointer (:struct video-profile-khr))))

(defcstruct (physical-device-video-format-info-khr :class c-physical-device-video-format-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (image-usage image-usage-flags)
  (p-video-profiles (:pointer (:struct video-profiles-khr))))

(defcstruct (video-format-properties-khr :class c-video-format-properties-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (format format))

(defcstruct (video-capabilities-khr :class c-video-capabilities-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (capability-flags video-capability-flags-khr)
  (min-bitstream-buffer-offset-alignment device-size)
  (min-bitstream-buffer-size-alignment device-size)
  (video-picture-extent-granularity (:struct extent-2d))
  (min-extent (:struct extent-2d))
  (max-extent (:struct extent-2d))
  (max-reference-pictures-slots-count :uint32)
  (max-reference-pictures-active-count :uint32))

(defcstruct (video-get-memory-properties-khr :class c-video-get-memory-properties-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (memory-bind-index :uint32)
  (p-memory-requirements (:pointer (:struct memory-requirements-2))))

(defcstruct (video-bind-memory-khr :class c-video-bind-memory-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (memory-bind-index :uint32)
  (memory device-memory)
  (memory-offset device-size)
  (memory-size device-size))

(defcstruct (video-picture-resource-khr :class c-video-picture-resource-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (coded-offset (:struct offset-2d))
  (coded-extent (:struct extent-2d))
  (base-array-layer :uint32)
  (image-view-binding image-view))

(defcstruct (video-reference-slot-khr :class c-video-reference-slot-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (slot-index :int8)
  (p-picture-resource (:pointer (:struct video-picture-resource-khr))))

(defcstruct (video-decode-info-khr :class c-video-decode-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags video-decode-flags-khr)
  (coded-offset (:struct offset-2d))
  (coded-extent (:struct extent-2d))
  (src-buffer buffer)
  (src-buffer-offset device-size)
  (src-buffer-range device-size)
  (dst-picture-resource (:struct video-picture-resource-khr))
  (p-setup-reference-slot (:pointer (:struct video-reference-slot-khr)))
  (reference-slot-count :uint32)
  (p-reference-slots (:pointer (:struct video-reference-slot-khr))))

(defcstruct (video-decode-h264-profile-ext :class c-video-decode-h264-profile-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (std-profile-idc std-video-h264-profile-idc)
  (picture-layout video-decode-h264-picture-layout-flags-ext))

(defcstruct (video-decode-h264-capabilities-ext :class c-video-decode-h264-capabilities-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (max-level :uint32)
  (field-offset-granularity (:struct offset-2d))
  (std-extension-version (:struct extension-properties)))

(defcstruct (video-decode-h264-session-create-info-ext :class c-video-decode-h264-session-create-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags video-decode-h264-create-flags-ext)
  (p-std-extension-version (:pointer (:struct extension-properties))))

(defcstruct (video-decode-h264-session-parameters-add-info-ext :class c-video-decode-h264-session-parameters-add-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (sps-std-count :uint32)
  (p-sps-std (:pointer (:struct std-video-h264-sequence-parameter-set)))
  (pps-std-count :uint32)
  (p-pps-std (:pointer (:struct std-video-h264-picture-parameter-set))))

(defcstruct (video-decode-h264-session-parameters-create-info-ext :class c-video-decode-h264-session-parameters-create-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (max-sps-std-count :uint32)
  (max-pps-std-count :uint32)
  (p-parameters-add-info (:pointer
                          (:struct
                           video-decode-h264-session-parameters-add-info-ext))))

(defcstruct (video-decode-h264-picture-info-ext :class c-video-decode-h264-picture-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (p-std-picture-info (:pointer (:struct std-video-decode-h264-picture-info)))
  (slices-count :uint32)
  (p-slices-data-offsets (:pointer :uint32)))

(defcstruct (video-decode-h264-dpb-slot-info-ext :class c-video-decode-h264-dpb-slot-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (p-std-reference-info (:pointer
                         (:struct std-video-decode-h264-reference-info))))

(defcstruct (video-decode-h264-mvc-ext :class c-video-decode-h264-mvc-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (p-std-mvc (:pointer (:struct std-video-decode-h264-mvc))))

(defcstruct (video-decode-h265-profile-ext :class c-video-decode-h265-profile-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (std-profile-idc std-video-h265-profile-idc))

(defcstruct (video-decode-h265-capabilities-ext :class c-video-decode-h265-capabilities-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (max-level :uint32)
  (std-extension-version (:struct extension-properties)))

(defcstruct (video-decode-h265-session-create-info-ext :class c-video-decode-h265-session-create-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags video-decode-h265-create-flags-ext)
  (p-std-extension-version (:pointer (:struct extension-properties))))

(defcstruct (video-decode-h265-session-parameters-add-info-ext :class c-video-decode-h265-session-parameters-add-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (sps-std-count :uint32)
  (p-sps-std (:pointer (:struct std-video-h265-sequence-parameter-set)))
  (pps-std-count :uint32)
  (p-pps-std (:pointer (:struct std-video-h265-picture-parameter-set))))

(defcstruct (video-decode-h265-session-parameters-create-info-ext :class c-video-decode-h265-session-parameters-create-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (max-sps-std-count :uint32)
  (max-pps-std-count :uint32)
  (p-parameters-add-info (:pointer
                          (:struct
                           video-decode-h265-session-parameters-add-info-ext))))

(defcstruct (video-decode-h265-picture-info-ext :class c-video-decode-h265-picture-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (p-std-picture-info (:pointer (:struct std-video-decode-h265-picture-info)))
  (slices-count :uint32)
  (p-slices-data-offsets (:pointer :uint32)))

(defcstruct (video-decode-h265-dpb-slot-info-ext :class c-video-decode-h265-dpb-slot-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (p-std-reference-info (:pointer
                         (:struct std-video-decode-h265-reference-info))))

(defcstruct (video-session-create-info-khr :class c-video-session-create-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (queue-family-index :uint32)
  (flags video-session-create-flags-khr)
  (p-video-profile (:pointer (:struct video-profile-khr)))
  (picture-format format)
  (max-coded-extent (:struct extent-2d))
  (reference-pictures-format format)
  (max-reference-pictures-slots-count :uint32)
  (max-reference-pictures-active-count :uint32))

(defcstruct (video-session-parameters-create-info-khr :class c-video-session-parameters-create-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (video-session-parameters-template video-session-parameters-khr)
  (video-session video-session-khr))

(defcstruct (video-session-parameters-update-info-khr :class c-video-session-parameters-update-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (update-sequence-count :uint32))

(defcstruct (video-begin-coding-info-khr :class c-video-begin-coding-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags video-begin-coding-flags-khr)
  (codec-quality-preset video-coding-quality-preset-flags-khr)
  (video-session video-session-khr)
  (video-session-parameters video-session-parameters-khr)
  (reference-slot-count :uint32)
  (p-reference-slots (:pointer (:struct video-reference-slot-khr))))

(defcstruct (video-end-coding-info-khr :class c-video-end-coding-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags video-end-coding-flags-khr))

(defcstruct (video-coding-control-info-khr :class c-video-coding-control-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags video-coding-control-flags-khr))

(defcstruct (video-encode-info-khr :class c-video-encode-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags video-encode-flags-khr)
  (quality-level :uint32)
  (coded-extent (:struct extent-2d))
  (dst-bitstream-buffer buffer)
  (dst-bitstream-buffer-offset device-size)
  (dst-bitstream-buffer-max-range device-size)
  (src-picture-resource (:struct video-picture-resource-khr))
  (p-setup-reference-slot (:pointer (:struct video-reference-slot-khr)))
  (reference-slot-count :uint32)
  (p-reference-slots (:pointer (:struct video-reference-slot-khr))))

(defcstruct (video-encode-rate-control-info-khr :class c-video-encode-rate-control-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags video-encode-rate-control-flags-khr)
  (rate-control-mode video-encode-rate-control-mode-flag-bits-khr)
  (average-bitrate :uint32)
  (peak-to-average-bitrate-ratio :uint16)
  (frame-rate-numerator :uint16)
  (frame-rate-denominator :uint16)
  (virtual-buffer-size-in-ms :uint32))

(defcstruct (video-encode-h264-capabilities-ext :class c-video-encode-h264-capabilities-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags video-encode-h264-capability-flags-ext)
  (input-mode-flags video-encode-h264-input-mode-flags-ext)
  (output-mode-flags video-encode-h264-output-mode-flags-ext)
  (min-picture-size-in-mbs (:struct extent-2d))
  (max-picture-size-in-mbs (:struct extent-2d))
  (input-image-data-alignment (:struct extent-2d))
  (max-num-l-0-reference-for-p :uint8)
  (max-num-l-0-reference-for-b :uint8)
  (max-num-l-1-reference :uint8)
  (quality-level-count :uint8)
  (std-extension-version (:struct extension-properties)))

(defcstruct (video-encode-h264-session-create-info-ext :class c-video-encode-h264-session-create-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags video-encode-h264-create-flags-ext)
  (max-picture-size-in-mbs (:struct extent-2d))
  (p-std-extension-version (:pointer (:struct extension-properties))))

(defcstruct (video-encode-h264-session-parameters-add-info-ext :class c-video-encode-h264-session-parameters-add-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (sps-std-count :uint32)
  (p-sps-std (:pointer (:struct std-video-h264-sequence-parameter-set)))
  (pps-std-count :uint32)
  (p-pps-std (:pointer (:struct std-video-h264-picture-parameter-set))))

(defcstruct (video-encode-h264-session-parameters-create-info-ext :class c-video-encode-h264-session-parameters-create-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (max-sps-std-count :uint32)
  (max-pps-std-count :uint32)
  (p-parameters-add-info (:pointer
                          (:struct
                           video-encode-h264-session-parameters-add-info-ext))))

(defcstruct (video-encode-h264-dpb-slot-info-ext :class c-video-encode-h264-dpb-slot-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (slot-index :int8)
  (p-std-picture-info (:pointer (:struct std-video-encode-h264-picture-info))))

(defcstruct (video-encode-h264-nalu-slice-ext :class c-video-encode-h264-nalu-slice-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (p-slice-header-std (:pointer (:struct std-video-encode-h264-slice-header)))
  (mb-count :uint32)
  (ref-final-list-0-entry-count :uint8)
  (p-ref-final-list-0-entries (:pointer
                               (:struct video-encode-h264-dpb-slot-info-ext)))
  (ref-final-list-1-entry-count :uint8)
  (p-ref-final-list-1-entries (:pointer
                               (:struct video-encode-h264-dpb-slot-info-ext)))
  (preceding-nalu-bytes :uint32)
  (min-qp :uint8)
  (max-qp :uint8))

(defcstruct (video-encode-h264-vcl-frame-info-ext :class c-video-encode-h264-vcl-frame-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (ref-default-final-list-0-entry-count :uint8)
  (p-ref-default-final-list-0-entries (:pointer
                                       (:struct
                                        video-encode-h264-dpb-slot-info-ext)))
  (ref-default-final-list-1-entry-count :uint8)
  (p-ref-default-final-list-1-entries (:pointer
                                       (:struct
                                        video-encode-h264-dpb-slot-info-ext)))
  (nalu-slice-entry-count :uint32)
  (p-nalu-slice-entries (:pointer (:struct video-encode-h264-nalu-slice-ext)))
  (p-current-picture-info (:pointer
                           (:struct video-encode-h264-dpb-slot-info-ext))))

(defcstruct (video-encode-h264-emit-picture-parameters-ext :class c-video-encode-h264-emit-picture-parameters-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (sps-id :uint8)
  (emit-sps-enable bool32)
  (pps-id-entry-count :uint32)
  (pps-id-entries (:pointer :uint8)))

(defcstruct (video-encode-h264-profile-ext :class c-video-encode-h264-profile-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (std-profile-idc std-video-h264-profile-idc))

(defcstruct (video-encode-h265-capabilities-ext :class c-video-encode-h265-capabilities-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags video-encode-h265-capability-flags-ext)
  (input-mode-flags video-encode-h265-input-mode-flags-ext)
  (output-mode-flags video-encode-h265-output-mode-flags-ext)
  (ctb-sizes video-encode-h265-ctb-size-flags-ext)
  (input-image-data-alignment (:struct extent-2d))
  (max-num-l-0-reference-for-p :uint8)
  (max-num-l-0-reference-for-b :uint8)
  (max-num-l-1-reference :uint8)
  (max-num-sub-layers :uint8)
  (quality-level-count :uint8)
  (std-extension-version (:struct extension-properties)))

(defcstruct (video-encode-h265-session-create-info-ext :class c-video-encode-h265-session-create-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags video-encode-h265-create-flags-ext)
  (p-std-extension-version (:pointer (:struct extension-properties))))

(defcstruct (video-encode-h265-session-parameters-add-info-ext :class c-video-encode-h265-session-parameters-add-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (vps-std-count :uint32)
  (p-vps-std (:pointer (:struct std-video-h265-video-parameter-set)))
  (sps-std-count :uint32)
  (p-sps-std (:pointer (:struct std-video-h265-sequence-parameter-set)))
  (pps-std-count :uint32)
  (p-pps-std (:pointer (:struct std-video-h265-picture-parameter-set))))

(defcstruct (video-encode-h265-session-parameters-create-info-ext :class c-video-encode-h265-session-parameters-create-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (max-vps-std-count :uint32)
  (max-sps-std-count :uint32)
  (max-pps-std-count :uint32)
  (p-parameters-add-info (:pointer
                          (:struct
                           video-encode-h265-session-parameters-add-info-ext))))

(defcstruct (video-encode-h265-dpb-slot-info-ext :class c-video-encode-h265-dpb-slot-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (slot-index :int8)
  (p-std-reference-info (:pointer
                         (:struct std-video-encode-h265-reference-info))))

(defcstruct (video-encode-h265-reference-lists-ext :class c-video-encode-h265-reference-lists-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (reference-list-0-entry-count :uint8)
  (p-reference-list-0-entries (:pointer
                               (:struct video-encode-h265-dpb-slot-info-ext)))
  (reference-list-1-entry-count :uint8)
  (p-reference-list-1-entries (:pointer
                               (:struct video-encode-h265-dpb-slot-info-ext)))
  (p-reference-modifications (:pointer
                              (:struct
                               std-video-encode-h265-reference-modifications))))

(defcstruct (video-encode-h265-nalu-slice-ext :class c-video-encode-h265-nalu-slice-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (ctb-count :uint32)
  (p-reference-final-lists (:pointer
                            (:struct video-encode-h265-reference-lists-ext)))
  (p-slice-header-std (:pointer (:struct std-video-encode-h265-slice-header))))

(defcstruct (video-encode-h265-vcl-frame-info-ext :class c-video-encode-h265-vcl-frame-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (p-reference-final-lists (:pointer
                            (:struct video-encode-h265-reference-lists-ext)))
  (nalu-slice-entry-count :uint32)
  (p-nalu-slice-entries (:pointer (:struct video-encode-h265-nalu-slice-ext)))
  (p-current-picture-info (:pointer
                           (:struct std-video-encode-h265-picture-info))))

(defcstruct (video-encode-h265-emit-picture-parameters-ext :class c-video-encode-h265-emit-picture-parameters-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (vps-id :uint8)
  (sps-id :uint8)
  (emit-vps-enable bool32)
  (emit-sps-enable bool32)
  (pps-id-entry-count :uint32)
  (pps-id-entries (:pointer :uint8)))

(defcstruct (video-encode-h265-profile-ext :class c-video-encode-h265-profile-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (std-profile-idc std-video-h265-profile-idc))

(defcstruct (physical-device-inherited-viewport-scissor-features-nv :class c-physical-device-inherited-viewport-scissor-features-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (inherited-viewport-scissor-2d bool32))

(defcstruct (command-buffer-inheritance-viewport-scissor-info-nv :class c-command-buffer-inheritance-viewport-scissor-info-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (viewport-scissor-2d bool32)
  (viewport-depth-count :uint32)
  (p-viewport-depths (:pointer (:struct viewport))))

(defcstruct (physical-device-ycbcr-2-plane-4-4-4-formats-features-ext :class c-physical-device-ycbcr-2-plane-4-4-4-formats-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (ycbcr-2plane-4-4-4-formats bool32))

(defcstruct (physical-device-provoking-vertex-features-ext :class c-physical-device-provoking-vertex-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (provoking-vertex-last bool32)
  (transform-feedback-preserves-provoking-vertex bool32))

(defcstruct (physical-device-provoking-vertex-properties-ext :class c-physical-device-provoking-vertex-properties-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (provoking-vertex-mode-per-pipeline bool32)
  (transform-feedback-preserves-triangle-fan-provoking-vertex bool32))

(defcstruct (pipeline-rasterization-provoking-vertex-state-create-info-ext :class c-pipeline-rasterization-provoking-vertex-state-create-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (provoking-vertex-mode provoking-vertex-mode-ext))

(defcstruct (cu-module-create-info-nvx :class c-cu-module-create-info-nvx)
  (s-type structure-type)
  (p-next (:pointer :void))
  (data-size :size)
  (p-data (:pointer :void)))

(defcstruct (cu-function-create-info-nvx :class c-cu-function-create-info-nvx)
  (s-type structure-type)
  (p-next (:pointer :void))
  (module cu-module-nvx)
  (p-name :string))

(defcstruct (cu-launch-info-nvx :class c-cu-launch-info-nvx)
  (s-type structure-type)
  (p-next (:pointer :void))
  (function-handle cu-function-nvx)
  (grid-dim-x :uint32)
  (grid-dim-y :uint32)
  (grid-dim-z :uint32)
  (block-dim-x :uint32)
  (block-dim-y :uint32)
  (block-dim-z :uint32)
  (shared-mem-bytes :uint32)
  (param-count :size)
  (p-params (:pointer (:pointer :void)))
  (extra-count :size)
  (p-extras (:pointer (:pointer :void))))

(defcstruct (physical-device-shader-integer-dot-product-features-khr :class c-physical-device-shader-integer-dot-product-features-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (shader-integer-dot-product bool32))

(defcstruct (physical-device-shader-integer-dot-product-properties-khr :class c-physical-device-shader-integer-dot-product-properties-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (integer-dot-product-8-bit-unsigned-accelerated bool32)
  (integer-dot-product-8-bit-signed-accelerated bool32)
  (integer-dot-product-8-bit-mixed-signedness-accelerated bool32)
  (integer-dot-product-4x-8-bit-packed-unsigned-accelerated bool32)
  (integer-dot-product-4x-8-bit-packed-signed-accelerated bool32)
  (integer-dot-product-4x-8-bit-packed-mixed-signedness-accelerated bool32)
  (integer-dot-product-16-bit-unsigned-accelerated bool32)
  (integer-dot-product-16-bit-signed-accelerated bool32)
  (integer-dot-product-16-bit-mixed-signedness-accelerated bool32)
  (integer-dot-product-32-bit-unsigned-accelerated bool32)
  (integer-dot-product-32-bit-signed-accelerated bool32)
  (integer-dot-product-32-bit-mixed-signedness-accelerated bool32)
  (integer-dot-product-64-bit-unsigned-accelerated bool32)
  (integer-dot-product-64-bit-signed-accelerated bool32)
  (integer-dot-product-64-bit-mixed-signedness-accelerated bool32)
  (integer-dot-product-accumulating-saturating-8-bit-unsigned-accelerated bool32)
  (integer-dot-product-accumulating-saturating-8-bit-signed-accelerated bool32)
  (integer-dot-product-accumulating-saturating-8-bit-mixed-signedness-accelerated bool32)
  (integer-dot-product-accumulating-saturating-4x-8-bit-packed-unsigned-accelerated bool32)
  (integer-dot-product-accumulating-saturating-4x-8-bit-packed-signed-accelerated bool32)
  (integer-dot-product-accumulating-saturating-4x-8-bit-packed-mixed-signedness-accelerated bool32)
  (integer-dot-product-accumulating-saturating-16-bit-unsigned-accelerated bool32)
  (integer-dot-product-accumulating-saturating-16-bit-signed-accelerated bool32)
  (integer-dot-product-accumulating-saturating-16-bit-mixed-signedness-accelerated bool32)
  (integer-dot-product-accumulating-saturating-32-bit-unsigned-accelerated bool32)
  (integer-dot-product-accumulating-saturating-32-bit-signed-accelerated bool32)
  (integer-dot-product-accumulating-saturating-32-bit-mixed-signedness-accelerated bool32)
  (integer-dot-product-accumulating-saturating-64-bit-unsigned-accelerated bool32)
  (integer-dot-product-accumulating-saturating-64-bit-signed-accelerated bool32)
  (integer-dot-product-accumulating-saturating-64-bit-mixed-signedness-accelerated bool32))

(defcstruct (physical-device-drm-properties-ext :class c-physical-device-drm-properties-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (has-primary bool32)
  (has-render bool32)
  (primary-major :int64)
  (primary-minor :int64)
  (render-major :int64)
  (render-minor :int64))

(defcstruct (physical-device-ray-tracing-motion-blur-features-nv :class c-physical-device-ray-tracing-motion-blur-features-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (ray-tracing-motion-blur bool32)
  (ray-tracing-motion-blur-pipeline-trace-rays-indirect bool32))

(defcstruct (acceleration-structure-geometry-motion-triangles-data-nv :class c-acceleration-structure-geometry-motion-triangles-data-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (vertex-data (:union device-or-host-address-const-khr)))

(defcstruct (acceleration-structure-motion-info-nv :class c-acceleration-structure-motion-info-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (max-instances :uint32)
  (flags acceleration-structure-motion-info-flags-nv))

(defcstruct (srt-data-nv :class c-srt-data-nv)
  (sx :float)
  (a :float)
  (b :float)
  (pvx :float)
  (sy :float)
  (c :float)
  (pvy :float)
  (sz :float)
  (pvz :float)
  (qx :float)
  (qy :float)
  (qz :float)
  (qw :float)
  (tx :float)
  (ty :float)
  (tz :float))

(defcstruct (acceleration-structure-srt-motion-instance-nv :class c-acceleration-structure-srt-motion-instance-nv)
  (transform-t-0 (:struct srt-data-nv))
  (transform-t-1 (:struct srt-data-nv))
  (instance-custom-index-and-mask :uint32)
  (instance-shader-binding-table-record-offset-and-flags :uint32)
  (acceleration-structure-reference :uint64))

(defcstruct (acceleration-structure-matrix-motion-instance-nv :class c-acceleration-structure-matrix-motion-instance-nv)
  (transform-t-0 (:struct transform-matrix-khr))
  (transform-t-1 (:struct transform-matrix-khr))
  (instance-custom-index-and-mask :uint32)
  (instance-shader-binding-table-record-offset-and-flags :uint32)
  (acceleration-structure-reference :uint64))

(defcunion acceleration-structure-motion-instance-data-nv
  (static-instance (:struct acceleration-structure-instance-khr))
  (matrix-motion-instance (:struct
                           acceleration-structure-matrix-motion-instance-nv))
  (srt-motion-instance (:struct acceleration-structure-srt-motion-instance-nv)))

(defcstruct (acceleration-structure-motion-instance-nv :class c-acceleration-structure-motion-instance-nv)
  (type acceleration-structure-motion-instance-type-nv)
  (flags acceleration-structure-motion-instance-flags-nv)
  (data (:union acceleration-structure-motion-instance-data-nv)))

(defcstruct (memory-get-remote-address-info-nv :class c-memory-get-remote-address-info-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (memory device-memory)
  (handle-type external-memory-handle-type-flag-bits))

(defcstruct (import-memory-buffer-collection-fuchsia :class c-import-memory-buffer-collection-fuchsia)
  (s-type structure-type)
  (p-next (:pointer :void))
  (collection buffer-collection-fuchsia)
  (index :uint32))

(defcstruct (buffer-collection-image-create-info-fuchsia :class c-buffer-collection-image-create-info-fuchsia)
  (s-type structure-type)
  (p-next (:pointer :void))
  (collection buffer-collection-fuchsia)
  (index :uint32))

(defcstruct (buffer-collection-buffer-create-info-fuchsia :class c-buffer-collection-buffer-create-info-fuchsia)
  (s-type structure-type)
  (p-next (:pointer :void))
  (collection buffer-collection-fuchsia)
  (index :uint32))

(defcstruct (buffer-collection-create-info-fuchsia :class c-buffer-collection-create-info-fuchsia)
  (s-type structure-type)
  (p-next (:pointer :void))
  (collection-token zx_handle_t))

(defcstruct (sysmem-color-space-fuchsia :class c-sysmem-color-space-fuchsia)
  (s-type structure-type)
  (p-next (:pointer :void))
  (color-space :uint32))

(defcstruct (buffer-collection-properties-fuchsia :class c-buffer-collection-properties-fuchsia)
  (s-type structure-type)
  (p-next (:pointer :void))
  (memory-type-bits :uint32)
  (buffer-count :uint32)
  (create-info-index :uint32)
  (sysmem-pixel-format :uint64)
  (format-features format-feature-flags)
  (sysmem-color-space-index (:struct sysmem-color-space-fuchsia))
  (sampler-ycbcr-conversion-components (:struct component-mapping))
  (suggested-ycbcr-model sampler-ycbcr-model-conversion)
  (suggested-ycbcr-range sampler-ycbcr-range)
  (suggested-x-chroma-offset chroma-location)
  (suggested-y-chroma-offset chroma-location))

(defcstruct (buffer-collection-constraints-info-fuchsia :class c-buffer-collection-constraints-info-fuchsia)
  (s-type structure-type)
  (p-next (:pointer :void))
  (min-buffer-count :uint32)
  (max-buffer-count :uint32)
  (min-buffer-count-for-camping :uint32)
  (min-buffer-count-for-dedicated-slack :uint32)
  (min-buffer-count-for-shared-slack :uint32))

(defcstruct (buffer-constraints-info-fuchsia :class c-buffer-constraints-info-fuchsia)
  (s-type structure-type)
  (p-next (:pointer :void))
  (create-info (:struct buffer-create-info))
  (required-format-features format-feature-flags)
  (buffer-collection-constraints (:struct
                                  buffer-collection-constraints-info-fuchsia)))

(defcstruct (image-format-constraints-info-fuchsia :class c-image-format-constraints-info-fuchsia)
  (s-type structure-type)
  (p-next (:pointer :void))
  (image-create-info (:struct image-create-info))
  (required-format-features format-feature-flags)
  (flags image-format-constraints-flags-fuchsia)
  (sysmem-pixel-format :uint64)
  (color-space-count :uint32)
  (p-color-spaces (:pointer (:struct sysmem-color-space-fuchsia))))

(defcstruct (image-constraints-info-fuchsia :class c-image-constraints-info-fuchsia)
  (s-type structure-type)
  (p-next (:pointer :void))
  (format-constraints-count :uint32)
  (p-format-constraints (:pointer
                         (:struct image-format-constraints-info-fuchsia)))
  (buffer-collection-constraints (:struct
                                  buffer-collection-constraints-info-fuchsia))
  (flags image-constraints-info-flags-fuchsia))

(defcstruct (physical-device-r-g-b-a-1-0-x-6-formats-features-ext :class c-physical-device-r-g-b-a-1-0-x-6-formats-features-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (format-rgba-1-0x-6-without-y-cb-cr-sampler bool32))

(defcstruct (format-properties-3-khr :class c-format-properties-3-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (linear-tiling-features format-feature-flags-2-khr)
  (optimal-tiling-features format-feature-flags-2-khr)
  (buffer-features format-feature-flags-2-khr))

(defcstruct (drm-format-modifier-properties-2-ext :class c-drm-format-modifier-properties-2-ext)
  (drm-format-modifier :uint64)
  (drm-format-modifier-plane-count :uint32)
  (drm-format-modifier-tiling-features format-feature-flags-2-khr))

(defcstruct (drm-format-modifier-properties-list-2-ext :class c-drm-format-modifier-properties-list-2-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (drm-format-modifier-count :uint32)
  (p-drm-format-modifier-properties (:pointer
                                     (:struct
                                      drm-format-modifier-properties-2-ext))))

(defcstruct (android-hardware-buffer-format-properties-2-android :class c-android-hardware-buffer-format-properties-2-android)
  (s-type structure-type)
  (p-next (:pointer :void))
  (format format)
  (external-format :uint64)
  (format-features format-feature-flags-2-khr)
  (sampler-ycbcr-conversion-components (:struct component-mapping))
  (suggested-ycbcr-model sampler-ycbcr-model-conversion)
  (suggested-ycbcr-range sampler-ycbcr-range)
  (suggested-x-chroma-offset chroma-location)
  (suggested-y-chroma-offset chroma-location))

(defcstruct (pipeline-rendering-create-info-khr :class c-pipeline-rendering-create-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (view-mask :uint32)
  (color-attachment-count :uint32)
  (p-color-attachment-formats (:pointer format))
  (depth-attachment-format format)
  (stencil-attachment-format format))

(defcstruct (rendering-attachment-info-khr :class c-rendering-attachment-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (image-view image-view)
  (image-layout image-layout)
  (resolve-mode resolve-mode-flag-bits)
  (resolve-image-view image-view)
  (resolve-image-layout image-layout)
  (load-op attachment-load-op)
  (store-op attachment-store-op)
  (clear-value (:union clear-value)))

(defcstruct (rendering-info-khr :class c-rendering-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags rendering-flags-khr)
  (render-area (:struct rect-2d))
  (layer-count :uint32)
  (view-mask :uint32)
  (color-attachment-count :uint32)
  (p-color-attachments (:pointer (:struct rendering-attachment-info-khr)))
  (p-depth-attachment (:pointer (:struct rendering-attachment-info-khr)))
  (p-stencil-attachment (:pointer (:struct rendering-attachment-info-khr))))

(defcstruct (rendering-fragment-shading-rate-attachment-info-khr :class c-rendering-fragment-shading-rate-attachment-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (image-view image-view)
  (image-layout image-layout)
  (shading-rate-attachment-texel-size (:struct extent-2d)))

(defcstruct (rendering-fragment-density-map-attachment-info-ext :class c-rendering-fragment-density-map-attachment-info-ext)
  (s-type structure-type)
  (p-next (:pointer :void))
  (image-view image-view)
  (image-layout image-layout))

(defcstruct (physical-device-dynamic-rendering-features-khr :class c-physical-device-dynamic-rendering-features-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (dynamic-rendering bool32))

(defcstruct (command-buffer-inheritance-rendering-info-khr :class c-command-buffer-inheritance-rendering-info-khr)
  (s-type structure-type)
  (p-next (:pointer :void))
  (flags rendering-flags-khr)
  (view-mask :uint32)
  (color-attachment-count :uint32)
  (p-color-attachment-formats (:pointer format))
  (depth-attachment-format format)
  (stencil-attachment-format format)
  (rasterization-samples sample-count-flag-bits))

(defcstruct (attachment-sample-count-info-amd :class c-attachment-sample-count-info-amd)
  (s-type structure-type)
  (p-next (:pointer :void))
  (color-attachment-count :uint32)
  (p-color-attachment-samples (:pointer sample-count-flag-bits))
  (depth-stencil-attachment-samples sample-count-flag-bits))

(defcstruct (attachment-sample-count-info-nv :class c-attachment-sample-count-info-nv)
  (s-type structure-type)
  (p-next (:pointer :void))
  (color-attachment-count :uint32)
  (p-color-attachment-samples (:pointer sample-count-flag-bits))
  (depth-stencil-attachment-samples sample-count-flag-bits))

(defcstruct (multiview-per-view-attributes-info-nvx :class c-multiview-per-view-attributes-info-nvx)
  (s-type structure-type)
  (p-next (:pointer :void))
  (per-view-attributes bool32)
  (per-view-attributes-position-x-only bool32))

